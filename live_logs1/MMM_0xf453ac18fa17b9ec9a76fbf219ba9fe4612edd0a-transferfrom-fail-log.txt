This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 22:29:28,287 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 22:29:28,289 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 22:29:28,300 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 22:29:28,301 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 22:29:28,301 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 22:29:28,302 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 22:29:28,305 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 22:29:28,306 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 22:29:28,307 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 22:29:28,307 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 22:29:28,308 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 22:29:28,308 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 22:29:28,309 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 22:29:28,310 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 22:29:28,311 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 22:29:28,311 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 22:29:28,312 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 22:29:28,314 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 22:29:28,315 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 22:29:28,316 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 22:29:28,317 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 22:29:28,318 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 22:29:28,318 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 22:29:28,319 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 22:29:28,319 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 22:29:28,319 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 22:29:28,320 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 22:29:28,320 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 22:29:28,320 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 22:29:28,321 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 22:29:28,321 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 22:29:28,322 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 22:29:28,322 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 22:29:28,323 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 22:29:28,323 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 22:29:28,324 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 22:29:28,324 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 22:29:28,324 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 22:29:28,325 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 22:29:28,325 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 22:29:28,326 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 22:29:28,333 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 22:29:28,333 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 22:29:28,334 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 22:29:28,334 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 22:29:28,334 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 22:29:28,335 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 22:29:28,335 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 22:29:28,335 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 22:29:28,335 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 22:29:28,335 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 22:29:28,335 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 22:29:28,335 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 22:29:28,335 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 22:29:28,336 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 22:29:28,336 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 22:29:28,337 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 22:29:28,337 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 22:29:28,337 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 22:29:28,337 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 22:29:28,337 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 22:29:28,357 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 22:29:28,367 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 22:29:28,369 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 22:29:28,370 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 22:29:28,371 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 22:29:28,371 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl
[2020-11-24 22:29:28,372 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl'
[2020-11-24 22:29:28,485 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 22:29:28,487 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 22:29:28,488 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 22:29:28,489 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 22:29:28,489 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 22:29:28,508 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,510 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,550 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,551 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,580 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,593 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,604 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,619 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 22:29:28,620 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 22:29:28,621 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 22:29:28,624 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 22:29:28,629 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/1) ...
[2020-11-24 22:29:28,654 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC777.transferFrom(from, to, value), from != to && (value > _balances_ERC777[this][from] || value > _allowances_ERC777[this][from][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][from] >= 0 &&  _balances_ERC777[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC777[this][from][msg.sender] >= 0 && _allowances_ERC777[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transferFrom)))
[2020-11-24 22:29:28,660 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC777.transferFrom(from, to, value), from != to && (value > _balances_ERC777[this][from] || value > _allowances_ERC777[this][from][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][from] >= 0 &&  _balances_ERC777[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC777[this][from][msg.sender] >= 0 && _allowances_ERC777[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transferFrom)))
[2020-11-24 22:29:28,668 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC777.transferFrom(from, to, value), from != to && (value > _balances_ERC777[this][from] || value > _allowances_ERC777[this][from][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][from] >= 0 &&  _balances_ERC777[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC777[this][from][msg.sender] >= 0 && _allowances_ERC777[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transferFrom)))
[2020-11-24 22:29:28,679 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( holder_s1071!=recipient_s1071 && ( ( amount_s1071>_balances_ERC777[this][holder_s1071] || amount_s1071>_allowances_ERC777[this][holder_s1071][msg.sender] ) || ( _balances_ERC777[this][recipient_s1071] + amount_s1071 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s1071>=0 ) && amount_s1071<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC777[this][recipient_s1071]>=0 ) && _balances_ERC777[this][recipient_s1071]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC777[this][holder_s1071]>=0 ) && _balances_ERC777[this][holder_s1071]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC777[this][holder_s1071][msg.sender]>=0 ) && _allowances_ERC777[this][holder_s1071][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>],IdentifierExpression[recipient_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IdentifierExpression[amount_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[holder_s1071,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 22:29:28,686 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC777.transferFrom(from, to, value), from != to && (value > _balances_ERC777[this][from] || value > _allowances_ERC777[this][from][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][from] >= 0 &&  _balances_ERC777[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC777[this][from][msg.sender] >= 0 && _allowances_ERC777[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transferFrom)))
[2020-11-24 22:29:28,686 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC7770) ==> ( <>AP(fail_transferFrom_ERC7770) ) ) )
Executed UtopiaSpecLang
[2020-11-24 22:29:28,703 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:29:28 PropertyContainer
[2020-11-24 22:29:28,703 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 22:29:28,703 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 22:29:28,703 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 22:29:28,703 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 22:29:28,704 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/2) ...
[2020-11-24 22:29:28,705 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 22:29:28,705 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 22:29:28,725 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:29:28" (2/2) ...
[2020-11-24 22:29:28,725 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 22:29:28,725 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 22:29:28,726 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 22:29:28,726 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 22:29:28,726 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/2) ...
[2020-11-24 22:29:28,782 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 22:29:28,782 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777_NoBaseCtor__success
[2020-11-24 22:29:28,782 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777
[2020-11-24 22:29:28,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777
[2020-11-24 22:29:28,782 INFO  L130     BoogieDeclarations]: Found specification of procedure name_IERC777
[2020-11-24 22:29:28,782 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_IERC777
[2020-11-24 22:29:28,782 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_IERC777
[2020-11-24 22:29:28,783 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_IERC777
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_IERC777
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__success
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient
[2020-11-24 22:29:28,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure tokensReceived~address~address~address~uint256~bytes~bytes_IERC777Recipient
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender_NoBaseCtor__success
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender
[2020-11-24 22:29:28,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender
[2020-11-24 22:29:28,784 INFO  L130     BoogieDeclarations]: Found specification of procedure tokensToSend~address~address~address~uint256~bytes~bytes_IERC777Sender
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 22:29:28,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 22:29:28,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 22:29:28,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address_NoBaseCtor__success
[2020-11-24 22:29:28,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address
[2020-11-24 22:29:28,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure isContract~address_Address__success
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__success
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry
[2020-11-24 22:29:28,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure setManager~address~address_IERC1820Registry
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure getManager~address_IERC1820Registry
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure setInterfaceImplementer~address~bytes32~address_IERC1820Registry
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure getInterfaceImplementer~address~bytes32_IERC1820Registry
[2020-11-24 22:29:28,787 INFO  L130     BoogieDeclarations]: Found specification of procedure interfaceHash~string_IERC1820Registry
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure updateERC165Cache~address~bytes4_IERC1820Registry
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure implementsERC165Interface~address~bytes4_IERC1820Registry
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure implementsERC165InterfaceNoCache~address~bytes4_IERC1820Registry
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777_NoBaseCtor__success
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777
[2020-11-24 22:29:28,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777
[2020-11-24 22:29:28,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777
[2020-11-24 22:29:28,788 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777
[2020-11-24 22:29:28,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777
[2020-11-24 22:29:28,789 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777
[2020-11-24 22:29:28,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777
[2020-11-24 22:29:28,789 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777
[2020-11-24 22:29:28,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777
[2020-11-24 22:29:28,789 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777
[2020-11-24 22:29:28,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777
[2020-11-24 22:29:28,789 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777
[2020-11-24 22:29:28,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777
[2020-11-24 22:29:28,789 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777
[2020-11-24 22:29:28,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777
[2020-11-24 22:29:28,790 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777
[2020-11-24 22:29:28,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777
[2020-11-24 22:29:28,790 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777
[2020-11-24 22:29:28,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777
[2020-11-24 22:29:28,790 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777
[2020-11-24 22:29:28,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777
[2020-11-24 22:29:28,790 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777
[2020-11-24 22:29:28,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777
[2020-11-24 22:29:28,790 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777
[2020-11-24 22:29:28,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777
[2020-11-24 22:29:28,791 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777
[2020-11-24 22:29:28,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777
[2020-11-24 22:29:28,791 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:29:28,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:29:28,791 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:29:28,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:29:28,791 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777
[2020-11-24 22:29:28,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777
[2020-11-24 22:29:28,791 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777
[2020-11-24 22:29:28,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777
[2020-11-24 22:29:28,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:29:28,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 22:29:28,793 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 22:29:28,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 22:29:28,793 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 22:29:28,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 22:29:28,793 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 22:29:28,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 22:29:28,793 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 22:29:28,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 22:29:28,793 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 22:29:28,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 22:29:28,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 22:29:28,794 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM_NoBaseCtor__success
[2020-11-24 22:29:28,794 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM
[2020-11-24 22:29:28,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM
[2020-11-24 22:29:28,794 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM
[2020-11-24 22:29:28,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM
[2020-11-24 22:29:28,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM
[2020-11-24 22:29:28,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM
[2020-11-24 22:29:28,794 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure noOverflow_pre__success
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777Recipient
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777Recipient
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777Sender
[2020-11-24 22:29:28,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777Sender
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Address
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Address
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC1820Registry
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC1820Registry
[2020-11-24 22:29:28,796 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC777
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC777
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MMM
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777_NoBaseCtor__fail
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777__success
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777__fail
[2020-11-24 22:29:28,797 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient__success
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender_NoBaseCtor__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender__success
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:29:28,798 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address_NoBaseCtor__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address__success
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure isContract~address_Address__fail
[2020-11-24 22:29:28,799 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry__success
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777_NoBaseCtor__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777__success
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777__success
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777__success
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777__success
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777__fail
[2020-11-24 22:29:28,800 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777__success
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777__fail
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777__success
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777__fail
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777__success
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777__fail
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777__success
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777__fail
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777__success
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777__fail
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777__success
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777__fail
[2020-11-24 22:29:28,801 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777__success
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777__fail
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777__success
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777__fail
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777__success
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777__fail
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777__success
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777__fail
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,802 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777__success
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777__success
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777__success
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,803 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC777__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 22:29:28,804 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM_NoBaseCtor__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM__success
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM__success
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM__success
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 22:29:28,805 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 22:29:28,806 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 22:29:28,806 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 22:29:28,806 INFO  L130     BoogieDeclarations]: Found specification of procedure noOverflow_pre__fail
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777_NoBaseCtor__fail
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777_NoBaseCtor__success
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777__fail
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777__success
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__fail
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__success
[2020-11-24 22:29:28,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient__fail
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient__success
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender_NoBaseCtor__fail
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender_NoBaseCtor__success
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender__fail
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender__success
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:29:28,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 22:29:28,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address_NoBaseCtor__fail
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address_NoBaseCtor__success
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address__fail
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address__success
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure isContract~address_Address__fail
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure isContract~address_Address__success
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__fail
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__success
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry__fail
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry__success
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777_NoBaseCtor__fail
[2020-11-24 22:29:28,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777_NoBaseCtor__success
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777__fail
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777__success
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777__fail
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777__success
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777__fail
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777__success
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777__fail
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777__success
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777__fail
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777__success
[2020-11-24 22:29:28,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777__success
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777__success
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777__success
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777__success
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777__success
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777__success
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777__fail
[2020-11-24 22:29:28,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777__success
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777__fail
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777__success
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777__fail
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777__success
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777__fail
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777__success
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777__fail
[2020-11-24 22:29:28,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777__success
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777__fail
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777__success
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC777__fail
[2020-11-24 22:29:28,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC777__success
[2020-11-24 22:29:28,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:29:28,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:29:28,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:29:28,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 22:29:28,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 22:29:28,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 22:29:28,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 22:29:28,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 22:29:28,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 22:29:28,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 22:29:28,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM_NoBaseCtor__fail
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM_NoBaseCtor__success
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM__fail
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM__success
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM__fail
[2020-11-24 22:29:28,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM__success
[2020-11-24 22:29:28,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM__fail
[2020-11-24 22:29:28,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM__success
[2020-11-24 22:29:28,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 22:29:28,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 22:29:28,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 22:29:28,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure noOverflow_pre__fail
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure noOverflow_pre__success
[2020-11-24 22:29:28,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777Recipient
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777Recipient
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777Sender
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777Sender
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 22:29:28,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 22:29:28,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 22:29:28,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 22:29:28,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Address
[2020-11-24 22:29:28,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Address
[2020-11-24 22:29:28,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC1820Registry
[2020-11-24 22:29:28,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC1820Registry
[2020-11-24 22:29:28,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC777
[2020-11-24 22:29:28,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC777
[2020-11-24 22:29:28,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 22:29:28,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 22:29:28,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MMM
[2020-11-24 22:29:28,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 22:29:28,822 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 22:29:28,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 22:29:29,132 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:29:29,132 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:29:29,756 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 22:29:29,756 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-24 22:29:29,758 INFO  L202        PluginConnector]: Adding new model MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:29:29 BoogieIcfgContainer
[2020-11-24 22:29:29,758 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:29:28" (2/2) ...
[2020-11-24 22:29:29,758 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 22:29:29,758 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5a7ae4b6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:29:29, skipping insertion in model container
[2020-11-24 22:29:29,758 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 22:29:29,759 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 22:29:29,759 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 22:29:29,759 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 22:29:29,760 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/3) ...
[2020-11-24 22:29:29,760 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2e0ba793 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:29:29, skipping insertion in model container
[2020-11-24 22:29:29,760 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:29:28" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 22:29:29,789 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:29:29 NWAContainer
[2020-11-24 22:29:29,789 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 22:29:29,789 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 22:29:29,790 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 22:29:29,790 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 22:29:29,791 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:29:29" (3/4) ...
[2020-11-24 22:29:29,792 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@10b16d39 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:29:29, skipping insertion in model container
[2020-11-24 22:29:29,792 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:29:29" (4/4) ...
[2020-11-24 22:29:29,794 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 22:29:29,798 INFO  L110   BuchiProductObserver]: Initial RCFG 2823 locations, 3645 edges
[2020-11-24 22:29:29,798 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 22:29:29,808 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 22:29:31,757 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 22:29:31,765 INFO  L110   BuchiProductObserver]: BuchiProgram size 6804 locations, 11827 edges
[2020-11-24 22:29:31,766 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:29:31 BoogieIcfgContainer
[2020-11-24 22:29:31,766 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 22:29:31,766 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 22:29:31,766 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 22:29:31,767 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 22:29:31,768 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:29:31" (1/1) ...
[2020-11-24 22:29:31,886 INFO  L313           BlockEncoder]: Initial Icfg 6804 locations, 11827 edges
[2020-11-24 22:29:31,887 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 22:29:31,887 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 22:29:31,887 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 22:29:31,888 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 22:29:31,901 INFO  L70    emoveInfeasibleEdges]: Removed 138 edges and 23 locations because of local infeasibility
[2020-11-24 22:29:31,912 INFO  L70        RemoveSinkStates]: Removed 108 edges and 60 locations by removing sink states
[2020-11-24 22:29:31,925 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 22:29:31,929 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 22:29:31,933 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 22:29:31,933 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 22:29:31,936 INFO  L313           BlockEncoder]: Encoded RCFG 6677 locations, 11516 edges
[2020-11-24 22:29:31,937 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:29:31 BasicIcfg
[2020-11-24 22:29:31,937 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 22:29:31,937 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 22:29:31,937 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 22:29:31,939 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 22:29:31,939 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:29:31,939 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:29:28" (1/6) ...
[2020-11-24 22:29:31,940 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6baef15 and model type MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:29:31, skipping insertion in model container
[2020-11-24 22:29:31,940 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:29:31,940 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:29:28" (2/6) ...
[2020-11-24 22:29:31,941 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6baef15 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:29:31, skipping insertion in model container
[2020-11-24 22:29:31,941 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:29:31,941 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:29:29" (3/6) ...
[2020-11-24 22:29:31,941 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6baef15 and model type MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 10:29:31, skipping insertion in model container
[2020-11-24 22:29:31,941 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:29:31,941 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:29:29" (4/6) ...
[2020-11-24 22:29:31,941 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6baef15 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:29:31, skipping insertion in model container
[2020-11-24 22:29:31,941 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:29:31,941 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:29:31" (5/6) ...
[2020-11-24 22:29:31,941 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6baef15 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 10:29:31, skipping insertion in model container
[2020-11-24 22:29:31,942 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:29:31,942 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:29:31" (6/6) ...
[2020-11-24 22:29:31,942 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transferfrom-fail.bpl_BEv2
[2020-11-24 22:29:31,969 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 22:29:31,969 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 22:29:31,969 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 22:29:31,969 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 22:29:31,969 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 22:29:31,969 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 22:29:31,969 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 22:29:31,969 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 22:29:31,970 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 22:29:32,018 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6677 states.
[2020-11-24 22:29:32,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:32,117 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:32,117 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:32,127 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:32,127 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:32,127 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 22:29:32,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6677 states.
[2020-11-24 22:29:32,164 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:32,165 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:32,165 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:32,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:32,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND TRUE   revert
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:32,185 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:32,186 INFO  L82        PathProgramCache]: Analyzing trace with hash -1098135588, now seen corresponding path program 1 times
[2020-11-24 22:29:32,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:32,213 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:32,252 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:29:32,254 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:32,255 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:29:32,632 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:32,640 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:29:32,640 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:29:32,642 INFO  L87              Difference]: Start difference. First operand 6677 states. Second operand 3 states.
[2020-11-24 22:29:33,005 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:33,005 INFO  L93              Difference]: Finished difference Result 4441 states and 4991 transitions.
[2020-11-24 22:29:33,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:29:33,006 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4441 states and 4991 transitions.
[2020-11-24 22:29:33,027 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:33,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4441 states to 4441 states and 4991 transitions.
[2020-11-24 22:29:33,057 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 22:29:33,059 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1088
[2020-11-24 22:29:33,059 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4441 states and 4991 transitions.
[2020-11-24 22:29:33,068 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:33,069 INFO  L728         BuchiCegarLoop]: Abstraction has 4441 states and 4991 transitions.
[2020-11-24 22:29:33,084 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4441 states and 4991 transitions.
[2020-11-24 22:29:33,153 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4441 to 4441.
[2020-11-24 22:29:33,154 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4441 states.
[2020-11-24 22:29:33,164 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4441 states to 4441 states and 4991 transitions.
[2020-11-24 22:29:33,165 INFO  L751         BuchiCegarLoop]: Abstraction has 4441 states and 4991 transitions.
[2020-11-24 22:29:33,165 INFO  L631         BuchiCegarLoop]: Abstraction has 4441 states and 4991 transitions.
[2020-11-24 22:29:33,165 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 22:29:33,166 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4441 states and 4991 transitions.
[2020-11-24 22:29:33,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:33,178 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:33,178 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:33,180 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:33,180 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND TRUE   revert
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND TRUE   !(recipient_s1071 != null)
[L4841]              revert := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND TRUE   !(recipient_s1071 != null)
[L4841]              revert := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:33,184 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:33,184 INFO  L82        PathProgramCache]: Analyzing trace with hash -895085346, now seen corresponding path program 1 times
[2020-11-24 22:29:33,185 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:33,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:33,220 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:29:33,220 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:33,220 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:29:33,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:33,221 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:29:33,221 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:29:33,222 INFO  L87              Difference]: Start difference. First operand 4441 states and 4991 transitions. cyclomatic complexity: 554 Second operand 4 states.
[2020-11-24 22:29:33,909 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:33,910 INFO  L93              Difference]: Finished difference Result 5567 states and 6149 transitions.
[2020-11-24 22:29:33,910 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:29:33,910 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5567 states and 6149 transitions.
[2020-11-24 22:29:33,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:29:33,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5567 states to 5279 states and 5815 transitions.
[2020-11-24 22:29:33,945 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1298
[2020-11-24 22:29:33,946 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1322
[2020-11-24 22:29:33,946 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5279 states and 5815 transitions.
[2020-11-24 22:29:33,953 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:33,953 INFO  L728         BuchiCegarLoop]: Abstraction has 5279 states and 5815 transitions.
[2020-11-24 22:29:33,957 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5279 states and 5815 transitions.
[2020-11-24 22:29:33,995 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5279 to 4792.
[2020-11-24 22:29:33,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4792 states.
[2020-11-24 22:29:34,000 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4792 states to 4792 states and 5205 transitions.
[2020-11-24 22:29:34,000 INFO  L751         BuchiCegarLoop]: Abstraction has 4792 states and 5205 transitions.
[2020-11-24 22:29:34,000 INFO  L631         BuchiCegarLoop]: Abstraction has 4792 states and 5205 transitions.
[2020-11-24 22:29:34,000 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 22:29:34,000 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4792 states and 5205 transitions.
[2020-11-24 22:29:34,007 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:29:34,007 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:34,007 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:34,010 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:34,010 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND TRUE   i_s605 < Length[_defaultOperatorsArray_ERC777[this]]
[L4333]              _defaultOperators_ERC777[this][M_int_Ref[_defaultOperatorsArray_ERC777[this]][i_s605]] := true;
[L4334]              i_s605 := (i_s605 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4335]  COND TRUE   gas < 0
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:34,015 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:34,016 INFO  L82        PathProgramCache]: Analyzing trace with hash -1782283255, now seen corresponding path program 1 times
[2020-11-24 22:29:34,016 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:34,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:34,123 INFO  L134       CoverageAnalysis]: Checked inductivity of 43 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 43 trivial. 0 not checked.
[2020-11-24 22:29:34,123 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:34,123 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:29:34,124 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:34,124 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:29:34,124 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:29:34,124 INFO  L87              Difference]: Start difference. First operand 4792 states and 5205 transitions. cyclomatic complexity: 417 Second operand 3 states.
[2020-11-24 22:29:34,176 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:34,176 INFO  L93              Difference]: Finished difference Result 5048 states and 5468 transitions.
[2020-11-24 22:29:34,176 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:29:34,176 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5048 states and 5468 transitions.
[2020-11-24 22:29:34,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 22:29:34,208 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5048 states to 4969 states and 5389 transitions.
[2020-11-24 22:29:34,208 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1263
[2020-11-24 22:29:34,209 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1263
[2020-11-24 22:29:34,209 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4969 states and 5389 transitions.
[2020-11-24 22:29:34,212 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:34,213 INFO  L728         BuchiCegarLoop]: Abstraction has 4969 states and 5389 transitions.
[2020-11-24 22:29:34,217 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4969 states and 5389 transitions.
[2020-11-24 22:29:34,254 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4969 to 4796.
[2020-11-24 22:29:34,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4796 states.
[2020-11-24 22:29:34,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4796 states to 4796 states and 5207 transitions.
[2020-11-24 22:29:34,260 INFO  L751         BuchiCegarLoop]: Abstraction has 4796 states and 5207 transitions.
[2020-11-24 22:29:34,260 INFO  L631         BuchiCegarLoop]: Abstraction has 4796 states and 5207 transitions.
[2020-11-24 22:29:34,260 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 22:29:34,260 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4796 states and 5207 transitions.
[2020-11-24 22:29:34,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:29:34,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:34,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:34,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:34,290 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:34,301 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:34,301 INFO  L82        PathProgramCache]: Analyzing trace with hash 1270797472, now seen corresponding path program 1 times
[2020-11-24 22:29:34,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:34,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:34,517 INFO  L134       CoverageAnalysis]: Checked inductivity of 43 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 39 trivial. 0 not checked.
[2020-11-24 22:29:34,517 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:34,517 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 22:29:34,518 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:34,518 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 22:29:34,518 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-24 22:29:34,518 INFO  L87              Difference]: Start difference. First operand 4796 states and 5207 transitions. cyclomatic complexity: 415 Second operand 16 states.
[2020-11-24 22:29:37,938 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:37,939 INFO  L93              Difference]: Finished difference Result 4926 states and 5357 transitions.
[2020-11-24 22:29:37,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 22:29:37,939 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4926 states and 5357 transitions.
[2020-11-24 22:29:37,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:29:37,961 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4926 states to 4926 states and 5357 transitions.
[2020-11-24 22:29:37,961 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1292
[2020-11-24 22:29:37,962 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1292
[2020-11-24 22:29:37,962 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4926 states and 5357 transitions.
[2020-11-24 22:29:37,967 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:37,968 INFO  L728         BuchiCegarLoop]: Abstraction has 4926 states and 5357 transitions.
[2020-11-24 22:29:37,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4926 states and 5357 transitions.
[2020-11-24 22:29:37,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4926 to 4624.
[2020-11-24 22:29:37,999 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4624 states.
[2020-11-24 22:29:38,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4624 states to 4624 states and 4990 transitions.
[2020-11-24 22:29:38,003 INFO  L751         BuchiCegarLoop]: Abstraction has 4624 states and 4990 transitions.
[2020-11-24 22:29:38,003 INFO  L631         BuchiCegarLoop]: Abstraction has 4624 states and 4990 transitions.
[2020-11-24 22:29:38,003 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 22:29:38,003 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4624 states and 4990 transitions.
[2020-11-24 22:29:38,007 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:38,008 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:38,008 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:38,010 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:38,010 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND TRUE   choice == 9
[L7721]              gas := gas - 21000;
[L7722]  COND TRUE   gas >= 0
[L7723]              assume value_s990 >= 0 && value_s990 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7724]              assume msgvalue_MSG == 0;
[L7725]  CALL        call __ret_0_approve := approve~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, spender_s990, value_s990);
[L2185]              havoc __exception;
[L2186]              revert := false;
[L2187]  COND FALSE  !(__exception)
[L2224]  CALL        call __ret_0_ := approve~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s990, value_s990);
[L4780]              holder_s990 := msgsender_MSG;
[L4781]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s990, spender_s990, value_s990);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4781]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s990, spender_s990, value_s990);
[L4782]  COND FALSE  !(revert)
[L4785]              __ret_0_ := true;
[L2224]  RET         call __ret_0_ := approve~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s990, value_s990);
[L2225]              assume !revert && gas >= 0;
[L7725]  RET         call __ret_0_approve := approve~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, spender_s990, value_s990);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:38,015 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:38,015 INFO  L82        PathProgramCache]: Analyzing trace with hash 118896091, now seen corresponding path program 1 times
[2020-11-24 22:29:38,016 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:38,037 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:38,234 INFO  L134       CoverageAnalysis]: Checked inductivity of 131 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 127 trivial. 0 not checked.
[2020-11-24 22:29:38,234 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:29:38,234 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-24 22:29:38,234 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:38,235 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 22:29:38,235 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-24 22:29:38,235 INFO  L87              Difference]: Start difference. First operand 4624 states and 4990 transitions. cyclomatic complexity: 371 Second operand 15 states.
[2020-11-24 22:29:40,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:40,735 INFO  L93              Difference]: Finished difference Result 4693 states and 5069 transitions.
[2020-11-24 22:29:40,735 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-24 22:29:40,735 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4693 states and 5069 transitions.
[2020-11-24 22:29:40,743 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:40,753 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4693 states to 4693 states and 5069 transitions.
[2020-11-24 22:29:40,753 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1176
[2020-11-24 22:29:40,754 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1176
[2020-11-24 22:29:40,754 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4693 states and 5069 transitions.
[2020-11-24 22:29:40,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:40,757 INFO  L728         BuchiCegarLoop]: Abstraction has 4693 states and 5069 transitions.
[2020-11-24 22:29:40,761 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4693 states and 5069 transitions.
[2020-11-24 22:29:40,783 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4693 to 4621.
[2020-11-24 22:29:40,784 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4621 states.
[2020-11-24 22:29:40,787 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4621 states to 4621 states and 4987 transitions.
[2020-11-24 22:29:40,787 INFO  L751         BuchiCegarLoop]: Abstraction has 4621 states and 4987 transitions.
[2020-11-24 22:29:40,787 INFO  L631         BuchiCegarLoop]: Abstraction has 4621 states and 4987 transitions.
[2020-11-24 22:29:40,787 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 22:29:40,787 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4621 states and 4987 transitions.
[2020-11-24 22:29:40,792 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:40,792 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:40,792 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:40,794 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:40,794 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND TRUE   __exception
[L2824]              __tmp__Balance := Balance;
[L2825]              __tmp__DType := DType;
[L2826]              __tmp__Alloc := Alloc;
[L2827]              __tmp__balance_ADDR := balance_ADDR;
[L2828]              __tmp__M_Ref_int := M_Ref_int;
[L2829]              __tmp__sum__balances0 := sum__balances0;
[L2830]              __tmp__M_Ref_bool := M_Ref_bool;
[L2831]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L2832]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L2833]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2834]              __tmp__sum__operators2 := sum__operators2;
[L2835]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L2836]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L2837]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L2838]              __tmp__sum__allowances4 := sum__allowances4;
[L2839]              __tmp__M_int_Ref := M_int_Ref;
[L2840]              __tmp__sum := sum;
[L2841]              __tmp__Length := Length;
[L2842]              __tmp__now := now;
[L2843]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L2844]              __tmp___balances_ERC777 := _balances_ERC777;
[L2845]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L2846]              __tmp___name_ERC777 := _name_ERC777;
[L2847]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L2848]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L2849]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L2850]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L2851]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L2852]              __tmp___operators_ERC777 := _operators_ERC777;
[L2853]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L2854]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L2855]              __tmp___owner_Ownable := _owner_Ownable;
[L2856]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L2857]  CALL        call MMM_MMM__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  CALL        call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L3883]  CALL        call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3868]              assume msgsender_MSG != null;
[L3869]              __tmp__Balance[this] := 0;
[L3883]  RET         call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3884]  COND FALSE  !(revert)
[L5389]  RET         call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]              assume msgsender_MSG != null;
[L3965]              __tmp__Balance[this] := 0;
[L3979]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5393]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call __var_44 := FreshRefGenerator__fail();
[L3851]              havoc newRef;
[L3852]              assume __tmp__Alloc[newRef] == false;
[L3853]              __tmp__Alloc[newRef] := true;
[L3854]              assume newRef != null;
[L5397]  RET         call __var_44 := FreshRefGenerator__fail();
[L5398]  COND FALSE  !(revert)
[L5401]              __tmp__Length[__var_44] := 0;
[L5402]              __var_43 := __var_44;
[L5403]  CALL        call ERC777_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4363]  CALL        call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L3883]  CALL        call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3868]              assume msgsender_MSG != null;
[L3869]              __tmp__Balance[this] := 0;
[L3883]  RET         call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3884]  COND FALSE  !(revert)
[L4363]  RET         call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4367]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]              assume msgsender_MSG != null;
[L3965]              __tmp__Balance[this] := 0;
[L3979]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4367]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4368]  COND FALSE  !(revert)
[L4371]  CALL        call ERC777_ERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4246]              assume msgsender_MSG != null;
[L4247]              __tmp__Balance[this] := 0;
[L4248]              __tmp___balances_ERC777[this] := zeroRefintArr();
[L4249]              __tmp__sum__balances0[this] := 0;
[L4250]              __tmp___totalSupply_ERC777[this] := 0;
[L4251]              __tmp___name_ERC777[this] := -1488944962;
[L4252]              __tmp___symbol_ERC777[this] := -1488944962;
[L4253]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4254]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4256]  CALL        call __var_9 := FreshRefGenerator__fail();
[L3851]              havoc newRef;
[L3852]              assume __tmp__Alloc[newRef] == false;
[L3853]              __tmp__Alloc[newRef] := true;
[L3854]              assume newRef != null;
[L4256]  RET         call __var_9 := FreshRefGenerator__fail();
[L4257]  COND FALSE  !(revert)
[L4260]              __tmp___defaultOperatorsArray_ERC777[this] := __var_9;
[L4261]              assume __tmp__Length[__tmp___defaultOperatorsArray_ERC777[this]] == 0;
[L4262]              __tmp___defaultOperators_ERC777[this] := zeroRefboolArr();
[L4263]              __tmp___operators_ERC777[this] := zeroRefRefboolArr();
[L4264]              __tmp___revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4265]              __tmp___allowances_ERC777[this] := zeroRefRefintArr();
[L4266]              __tmp__sum__allowances4[this] := 0;
[L4268]              __tmp___name_ERC777[this] := name_s605;
[L4269]              __tmp___symbol_ERC777[this] := symbol_s605;
[L4270]              __tmp___defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4271]              i_s605 := 0;
[L4272]  COND FALSE  !(i_s605 < __tmp__Length[__tmp___defaultOperatorsArray_ERC777[this]])
[L4280]              __var_2 := this;
[L4281]              __var_3 := keccak256(874679271);
[L4282]              assume __var_3 != 0;
[L4283]              __var_4 := this;
[L4285]              __var_6 := this;
[L4286]              __var_7 := keccak256(-2132820306);
[L4287]              assume __var_7 != 0;
[L4288]              __var_8 := this;
[L4371]  RET         call ERC777_ERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4372]  COND FALSE  !(revert)
[L5403]  RET         call ERC777_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5404]  COND FALSE  !(revert)
[L5407]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5215]              assume msgsender_MSG != null;
[L5216]              __tmp__Balance[this] := 0;
[L5217]              __tmp___owner_Ownable[this] := null;
[L5219]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L5235]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5236]  COND FALSE  !(revert)
[L5407]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5408]  COND FALSE  !(revert)
[L5411]  CALL        call MMM_MMM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5366]              assume msgsender_MSG != null;
[L5367]              __tmp__Balance[this] := 0;
[L5368]              __tmp___maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5411]  RET         call MMM_MMM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5412]  COND FALSE  !(revert)
[L2857]  RET         call MMM_MMM__fail(this, msgsender_MSG, msgvalue_MSG);
[L2858]              assume revert || gas < 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:40,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:40,797 INFO  L82        PathProgramCache]: Analyzing trace with hash 619950579, now seen corresponding path program 1 times
[2020-11-24 22:29:40,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:40,808 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:40,855 INFO  L134       CoverageAnalysis]: Checked inductivity of 31 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 31 trivial. 0 not checked.
[2020-11-24 22:29:40,855 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:40,855 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:29:40,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:40,856 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:29:40,856 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:29:40,856 INFO  L87              Difference]: Start difference. First operand 4621 states and 4987 transitions. cyclomatic complexity: 371 Second operand 4 states.
[2020-11-24 22:29:41,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:41,346 INFO  L93              Difference]: Finished difference Result 5574 states and 6186 transitions.
[2020-11-24 22:29:41,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:29:41,346 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5574 states and 6186 transitions.
[2020-11-24 22:29:41,355 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 22:29:41,368 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5574 states to 5408 states and 6016 transitions.
[2020-11-24 22:29:41,368 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1403
[2020-11-24 22:29:41,368 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1403
[2020-11-24 22:29:41,368 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5408 states and 6016 transitions.
[2020-11-24 22:29:41,372 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:41,372 INFO  L728         BuchiCegarLoop]: Abstraction has 5408 states and 6016 transitions.
[2020-11-24 22:29:41,375 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5408 states and 6016 transitions.
[2020-11-24 22:29:41,398 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5408 to 4455.
[2020-11-24 22:29:41,398 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4455 states.
[2020-11-24 22:29:41,401 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4455 states to 4455 states and 4816 transitions.
[2020-11-24 22:29:41,401 INFO  L751         BuchiCegarLoop]: Abstraction has 4455 states and 4816 transitions.
[2020-11-24 22:29:41,401 INFO  L631         BuchiCegarLoop]: Abstraction has 4455 states and 4816 transitions.
[2020-11-24 22:29:41,401 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 22:29:41,402 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4455 states and 4816 transitions.
[2020-11-24 22:29:41,406 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:41,406 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:41,406 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:41,407 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:41,407 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND TRUE   choice == 18
[L7663]              gas := gas - 21000;
[L7664]  COND TRUE   gas >= 0
[L7665]              assume amount_s760 >= 0 && amount_s760 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7666]              assume msgvalue_MSG == 0;
[L7667]  CALL        call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1518]              havoc __exception;
[L1519]              revert := false;
[L1520]  COND FALSE  !(__exception)
[L1557]  CALL        call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L4564]              havoc empty_s760;
[L4565]  CALL        call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L5029]              __var_22 := null;
[L5030]  COND FALSE  !(!(from_s1272 != null))
[L5034]              __var_23 := null;
[L5035]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L5035]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5036]  COND FALSE  !(revert)
[L5039]  CALL        call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5039]  RET         call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L5040]  COND FALSE  !(revert)
[L5043]              _totalSupply_ERC777[this] := __var_24;
[L5044]  CALL        call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5044]  RET         call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L5045]  COND FALSE  !(revert)
[L5048]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1272];
[L5049]              _balances_ERC777[this][from_s1272] := __var_25;
[L5050]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1272];
[L5051]              assert { :EventEmitted "Burned_ERC777" } true;
[L5052]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4565]  RET         call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L4566]  COND FALSE  !(revert)
[L1557]  RET         call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1558]              assume !revert && gas >= 0;
[L7667]  RET         call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:41,412 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:41,412 INFO  L82        PathProgramCache]: Analyzing trace with hash -895262815, now seen corresponding path program 1 times
[2020-11-24 22:29:41,413 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:41,430 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:41,587 INFO  L134       CoverageAnalysis]: Checked inductivity of 127 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 123 trivial. 0 not checked.
[2020-11-24 22:29:41,587 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:41,587 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 22:29:41,587 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:41,588 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 22:29:41,588 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-24 22:29:41,588 INFO  L87              Difference]: Start difference. First operand 4455 states and 4816 transitions. cyclomatic complexity: 365 Second operand 16 states.
[2020-11-24 22:29:44,589 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:44,589 INFO  L93              Difference]: Finished difference Result 4514 states and 4886 transitions.
[2020-11-24 22:29:44,590 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-24 22:29:44,590 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4514 states and 4886 transitions.
[2020-11-24 22:29:44,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:44,606 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4514 states to 4514 states and 4886 transitions.
[2020-11-24 22:29:44,606 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1161
[2020-11-24 22:29:44,607 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1161
[2020-11-24 22:29:44,607 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4514 states and 4886 transitions.
[2020-11-24 22:29:44,610 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:44,610 INFO  L728         BuchiCegarLoop]: Abstraction has 4514 states and 4886 transitions.
[2020-11-24 22:29:44,614 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4514 states and 4886 transitions.
[2020-11-24 22:29:44,638 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4514 to 4466.
[2020-11-24 22:29:44,638 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4466 states.
[2020-11-24 22:29:44,642 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4466 states to 4466 states and 4837 transitions.
[2020-11-24 22:29:44,642 INFO  L751         BuchiCegarLoop]: Abstraction has 4466 states and 4837 transitions.
[2020-11-24 22:29:44,642 INFO  L631         BuchiCegarLoop]: Abstraction has 4466 states and 4837 transitions.
[2020-11-24 22:29:44,642 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 22:29:44,642 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4466 states and 4837 transitions.
[2020-11-24 22:29:44,646 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:29:44,647 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:29:44,647 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:29:44,648 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:29:44,648 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC7770 := false;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND TRUE   choice == 8
[L7728]              gas := gas - 21000;
[L7729]  COND TRUE   gas >= 0
[L7730]              assume amount_s1071 >= 0 && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7731]              assume msgvalue_MSG == 0;
[L7732]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((holder_s1071 != recipient_s1071 && ((amount_s1071 > _balances_ERC777[this][holder_s1071] || amount_s1071 > _allowances_ERC777[this][holder_s1071][msgsender_MSG]) || _balances_ERC777[this][recipient_s1071] + amount_s1071 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1071 >= 0) && amount_s1071 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s1071] >= 0) && _balances_ERC777[this][recipient_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][holder_s1071] >= 0) && _balances_ERC777[this][holder_s1071] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] >= 0) && _allowances_ERC777[this][holder_s1071][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC7770 := true;
[L2]                 call_transferFrom_ERC7770 := false;
[L2]                 revert := revert_hold;
[L2271]              havoc __exception;
[L2272]              revert := false;
[L2273]  COND FALSE  !(__exception)
[L2310]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L4839]              __var_13 := null;
[L4840]  COND FALSE  !(!(recipient_s1071 != null))
[L4844]              __var_14 := null;
[L4845]  COND FALSE  !(!(holder_s1071 != null))
[L4849]              spender_s1071 := msgsender_MSG;
[L4850]              havoc empty_s1071;
[L4851]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4851]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4852]  COND FALSE  !(revert)
[L4855]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4855]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071);
[L4856]  COND FALSE  !(revert)
[L4859]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L4859]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC777[this][holder_s1071][spender_s1071], amount_s1071);
[L4860]  COND FALSE  !(revert)
[L4863]  CALL        call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L5113]              __var_28 := null;
[L5114]  COND FALSE  !(!(spender_s1358 != null))
[L5118]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] - _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5119]              _allowances_ERC777[this][holder_s1358][spender_s1358] := value_s1358;
[L5120]              sum__allowances4[holder_s1358] := sum__allowances4[holder_s1358] + _allowances_ERC777[this][holder_s1358][spender_s1358];
[L5121]              assert { :EventEmitted "Approval_ERC777" } true;
[L4863]  RET         call _approve~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, spender_s1071, __var_15);
[L4864]  COND FALSE  !(revert)
[L4867]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4867]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, spender_s1071, holder_s1071, recipient_s1071, amount_s1071, empty_s1071, empty_s1071, false);
[L4868]  COND FALSE  !(revert)
[L4871]              __ret_0_ := true;
[L2310]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L2311]              assume !revert && gas >= 0;
[L7732]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, holder_s1071, recipient_s1071, amount_s1071);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:29:44,652 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:29:44,652 INFO  L82        PathProgramCache]: Analyzing trace with hash 1860464873, now seen corresponding path program 1 times
[2020-11-24 22:29:44,653 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:29:44,691 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:29:45,044 INFO  L134       CoverageAnalysis]: Checked inductivity of 146 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 146 trivial. 0 not checked.
[2020-11-24 22:29:45,044 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:29:45,044 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-24 22:29:45,045 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:29:45,045 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-24 22:29:45,045 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=231, Unknown=0, NotChecked=0, Total=272
[2020-11-24 22:29:45,045 INFO  L87              Difference]: Start difference. First operand 4466 states and 4837 transitions. cyclomatic complexity: 377 Second operand 17 states.
[2020-11-24 22:29:47,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:29:47,784 INFO  L93              Difference]: Finished difference Result 2511 states and 2714 transitions.
[2020-11-24 22:29:47,784 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 22:29:47,784 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2511 states and 2714 transitions.
[2020-11-24 22:29:47,788 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 22:29:47,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2511 states to 0 states and 0 transitions.
[2020-11-24 22:29:47,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 22:29:47,788 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 22:29:47,788 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 22:29:47,788 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:29:47,788 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 22:29:47,788 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 22:29:47,788 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 22:29:47,789 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 22:29:47,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 22:29:47,789 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 22:29:47,789 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 22:29:47,792 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 10:29:47 BasicIcfg
[2020-11-24 22:29:47,792 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 22:29:47,792 INFO  L168              Benchmark]: Toolchain (without parser) took 19306.51 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -557.5 MB). Peak memory consumption was 900.0 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,793 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,794 INFO  L168              Benchmark]: Boogie Preprocessor took 132.05 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,794 INFO  L168              Benchmark]: UtopiaSpecLang took 82.59 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,794 INFO  L168              Benchmark]: Boogie Printer took 22.05 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,794 INFO  L168              Benchmark]: RCFGBuilder took 1032.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 897.6 MB in the beginning and 980.3 MB in the end (delta: -82.7 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,795 INFO  L168              Benchmark]: UtopiaLTL2Aut took 30.77 ms. Allocated memory is still 1.1 GB. Free memory was 980.3 MB in the beginning and 972.7 MB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,795 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1976.25 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 154.7 MB). Free memory was 972.7 MB in the beginning and 757.1 MB in the end (delta: 215.6 MB). Peak memory consumption was 491.6 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,796 INFO  L168              Benchmark]: BlockEncodingV2 took 171.02 ms. Allocated memory is still 1.3 GB. Free memory was 757.1 MB in the beginning and 657.2 MB in the end (delta: 99.9 MB). Peak memory consumption was 99.9 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,796 INFO  L168              Benchmark]: BuchiAutomizer took 15854.73 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 657.2 MB in the beginning and 1.5 GB in the end (delta: -835.5 MB). Peak memory consumption was 397.6 MB. Max. memory is 15.3 GB.
[2020-11-24 22:29:47,798 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6804 locations, 11827 edges
  - StatisticsResult: Encoded RCFG
    6677 locations, 11516 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 132.05 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 82.59 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.05 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1032.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 897.6 MB in the beginning and 980.3 MB in the end (delta: -82.7 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 30.77 ms. Allocated memory is still 1.1 GB. Free memory was 980.3 MB in the beginning and 972.7 MB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1976.25 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 154.7 MB). Free memory was 972.7 MB in the beginning and 757.1 MB in the end (delta: 215.6 MB). Peak memory consumption was 491.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 171.02 ms. Allocated memory is still 1.3 GB. Free memory was 757.1 MB in the beginning and 657.2 MB in the end (delta: 99.9 MB). Peak memory consumption was 99.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15854.73 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 657.2 MB in the beginning and 1.5 GB in the end (delta: -835.5 MB). Peak memory consumption was 397.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2823 locations, 3645 edges
  - StatisticsResult: BuchiProgram size
    6804 locations, 11827 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 15.8s and 9 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.7s. Construction of modules took 9.9s. BÃ¼chi inclusion checks took 3.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 2035 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 4796 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 36183 SDtfs, 30161 SDslu, 57498 SDs, 0 SdLazy, 160545 SolverSat, 4187 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC7770) ==> ( <>(fail_transferFrom_ERC7770) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
