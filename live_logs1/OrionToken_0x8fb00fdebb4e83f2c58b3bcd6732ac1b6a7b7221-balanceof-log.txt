This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:06:14,219 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:06:14,220 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:06:14,231 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:06:14,231 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:06:14,232 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:06:14,233 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:06:14,234 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:06:14,236 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:06:14,237 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:06:14,237 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:06:14,237 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:06:14,238 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:06:14,239 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:06:14,240 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:06:14,240 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:06:14,241 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:06:14,242 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:06:14,243 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:06:14,244 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:06:14,245 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:06:14,246 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:06:14,247 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:06:14,247 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:06:14,247 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:06:14,248 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:06:14,248 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:06:14,249 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:06:14,249 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:06:14,249 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:06:14,250 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:06:14,250 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:06:14,250 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:06:14,251 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:06:14,252 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:06:14,252 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:06:14,252 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:06:14,252 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:06:14,252 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:06:14,253 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:06:14,253 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:06:14,254 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:06:14,261 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:06:14,261 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:06:14,262 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:06:14,262 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:06:14,262 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:06:14,262 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:06:14,262 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:06:14,262 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:06:14,262 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:06:14,263 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:06:14,263 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:06:14,263 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:06:14,264 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:06:14,264 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:06:14,264 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:06:14,264 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:06:14,264 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:06:14,264 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:06:14,264 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:06:14,287 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:06:14,299 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:06:14,302 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:06:14,303 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:06:14,303 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:06:14,304 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl
[2020-11-25 03:06:14,304 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl'
[2020-11-25 03:06:14,404 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:06:14,405 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:06:14,406 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:06:14,406 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:06:14,406 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:06:14,421 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,423 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,462 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,463 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,491 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,509 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,523 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,537 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:06:14,538 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:06:14,538 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:06:14,540 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:06:14,543 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/1) ...
[2020-11-25 03:06:14,562 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:14,568 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:14,575 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:14,581 INFO  L636   opiaSpecLangObserver]: Parsed ( _balances_ERC20[this][account_s258]>=0 && _balances_ERC20[this][account_s258]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],[IdentifierExpression[account_s258,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],[IdentifierExpression[account_s258,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:06:14,584 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==_balances_ERC20[this][account_s258] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,balanceOf~address_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],[IdentifierExpression[account_s258,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]]
[2020-11-25 03:06:14,596 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:14,596 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_ERC200) ==> ( <>AP(success_balanceOf_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:06:14,609 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:14 PropertyContainer
[2020-11-25 03:06:14,610 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:06:14,610 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:06:14,610 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:06:14,610 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:06:14,611 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/2) ...
[2020-11-25 03:06:14,611 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:06:14,611 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:06:14,633 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:14" (2/2) ...
[2020-11-25 03:06:14,633 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:06:14,634 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:06:14,634 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:06:14,634 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:06:14,634 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/2) ...
[2020-11-25 03:06:14,687 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:06:14,687 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:06:14,687 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:06:14,687 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:06:14,687 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:06:14,688 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:06:14,688 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:06:14,689 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:06:14,689 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:06:14,689 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:06:14,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:06:14,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:06:14,690 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:06:14,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:06:14,691 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:06:14,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:06:14,691 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:06:14,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:06:14,691 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:06:14,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:06:14,691 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:06:14,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:06:14,691 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:14,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:14,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:06:14,692 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:06:14,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:06:14,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:06:14,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:06:14,693 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:06:14,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:06:14,694 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:06:14,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:06:14,694 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:06:14,694 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:06:14,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:06:14,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:06:14,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:06:14,694 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:06:14,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:06:14,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:06:14,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:06:14,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:06:14,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:06:14,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken
[2020-11-25 03:06:14,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:06:14,696 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:06:14,697 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:06:14,698 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OrionToken
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:14,699 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:06:14,700 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:06:14,701 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:06:14,702 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:06:14,703 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:06:14,704 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:06:14,705 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:06:14,706 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__success
[2020-11-25 03:06:14,707 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__fail
[2020-11-25 03:06:14,707 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:06:14,707 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:06:14,707 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:06:14,707 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:06:14,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:06:14,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:06:14,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:06:14,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:06:14,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:06:14,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:14,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:06:14,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:06:14,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:06:14,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:06:14,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:06:14,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:06:14,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:06:14,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:06:14,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__fail
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__success
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:06:14,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:06:14,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OrionToken
[2020-11-25 03:06:14,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:06:14,720 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:06:14,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:06:15,461 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:15,461 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:15,461 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:15,769 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:06:15,769 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 03:06:15,771 INFO  L202        PluginConnector]: Adding new model OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:15 BoogieIcfgContainer
[2020-11-25 03:06:15,772 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:14" (2/2) ...
[2020-11-25 03:06:15,772 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:06:15,772 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@364df199 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:15, skipping insertion in model container
[2020-11-25 03:06:15,772 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:06:15,772 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:06:15,772 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:06:15,773 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:06:15,774 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/3) ...
[2020-11-25 03:06:15,774 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@48441a82 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:15, skipping insertion in model container
[2020-11-25 03:06:15,774 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:14" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:06:15,798 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:15 NWAContainer
[2020-11-25 03:06:15,798 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:06:15,798 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:06:15,798 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:06:15,798 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:06:15,799 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:15" (3/4) ...
[2020-11-25 03:06:15,799 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3bbf3cfa and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:15, skipping insertion in model container
[2020-11-25 03:06:15,799 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:15" (4/4) ...
[2020-11-25 03:06:15,802 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:06:15,806 INFO  L110   BuchiProductObserver]: Initial RCFG 2932 locations, 4569 edges
[2020-11-25 03:06:15,806 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:06:15,815 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:06:17,868 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:06:17,879 INFO  L110   BuchiProductObserver]: BuchiProgram size 7816 locations, 15032 edges
[2020-11-25 03:06:17,879 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:17 BoogieIcfgContainer
[2020-11-25 03:06:17,879 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:06:17,879 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:06:17,879 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:06:17,881 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:06:17,881 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:17" (1/1) ...
[2020-11-25 03:06:18,019 INFO  L313           BlockEncoder]: Initial Icfg 7816 locations, 15032 edges
[2020-11-25 03:06:18,019 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:06:18,020 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:06:18,020 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:06:18,020 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:06:18,037 INFO  L70    emoveInfeasibleEdges]: Removed 246 edges and 23 locations because of local infeasibility
[2020-11-25 03:06:18,054 INFO  L70        RemoveSinkStates]: Removed 164 edges and 109 locations by removing sink states
[2020-11-25 03:06:18,072 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:06:18,077 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:06:18,082 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:06:18,082 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:06:18,085 INFO  L313           BlockEncoder]: Encoded RCFG 7652 locations, 14575 edges
[2020-11-25 03:06:18,086 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:18 BasicIcfg
[2020-11-25 03:06:18,086 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:06:18,086 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:06:18,086 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:06:18,088 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:06:18,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:18,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:14" (1/6) ...
[2020-11-25 03:06:18,090 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5ab1f3 and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:18, skipping insertion in model container
[2020-11-25 03:06:18,090 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:18,090 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:14" (2/6) ...
[2020-11-25 03:06:18,090 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5ab1f3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:18, skipping insertion in model container
[2020-11-25 03:06:18,090 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:18,090 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:15" (3/6) ...
[2020-11-25 03:06:18,090 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5ab1f3 and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:18, skipping insertion in model container
[2020-11-25 03:06:18,090 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:18,090 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:15" (4/6) ...
[2020-11-25 03:06:18,090 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5ab1f3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:18, skipping insertion in model container
[2020-11-25 03:06:18,091 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:18,091 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:17" (5/6) ...
[2020-11-25 03:06:18,091 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5ab1f3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:06:18, skipping insertion in model container
[2020-11-25 03:06:18,091 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:18,091 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:18" (6/6) ...
[2020-11-25 03:06:18,092 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_balanceof.bpl_BEv2
[2020-11-25 03:06:18,122 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:06:18,122 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:06:18,122 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:06:18,122 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:06:18,122 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:06:18,122 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:06:18,122 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:06:18,122 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:06:18,122 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:06:18,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states.
[2020-11-25 03:06:18,245 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:18,245 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:18,245 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:18,252 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:18,252 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:18,252 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:06:18,252 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states.
[2020-11-25 03:06:18,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:18,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:18,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:18,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:18,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:18,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:18,298 INFO  L82        PathProgramCache]: Analyzing trace with hash 2039598139, now seen corresponding path program 1 times
[2020-11-25 03:06:18,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:18,328 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:18,371 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:06:18,373 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:18,373 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:18,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:18,688 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:18,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:18,690 INFO  L87              Difference]: Start difference. First operand 7652 states. Second operand 3 states.
[2020-11-25 03:06:19,043 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:19,043 INFO  L93              Difference]: Finished difference Result 6216 states and 10652 transitions.
[2020-11-25 03:06:19,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:19,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6216 states and 10652 transitions.
[2020-11-25 03:06:19,086 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:19,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6216 states to 6216 states and 10652 transitions.
[2020-11-25 03:06:19,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 03:06:19,148 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1173
[2020-11-25 03:06:19,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6216 states and 10652 transitions.
[2020-11-25 03:06:19,169 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:19,169 INFO  L728         BuchiCegarLoop]: Abstraction has 6216 states and 10652 transitions.
[2020-11-25 03:06:19,187 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6216 states and 10652 transitions.
[2020-11-25 03:06:19,288 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6216 to 5604.
[2020-11-25 03:06:19,289 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5604 states.
[2020-11-25 03:06:19,300 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5604 states to 5604 states and 9603 transitions.
[2020-11-25 03:06:19,301 INFO  L751         BuchiCegarLoop]: Abstraction has 5604 states and 9603 transitions.
[2020-11-25 03:06:19,301 INFO  L631         BuchiCegarLoop]: Abstraction has 5604 states and 9603 transitions.
[2020-11-25 03:06:19,301 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:06:19,301 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5604 states and 9603 transitions.
[2020-11-25 03:06:19,315 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:19,315 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:19,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:19,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:19,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND FALSE  !(DType[this] == ERC20Capped)
[L4390]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4395]  COND TRUE   DType[this] == MinterRole
[L4396]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4396]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4397]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:19,322 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:19,322 INFO  L82        PathProgramCache]: Analyzing trace with hash 683736998, now seen corresponding path program 1 times
[2020-11-25 03:06:19,323 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:19,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:19,368 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 19 trivial. 0 not checked.
[2020-11-25 03:06:19,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:19,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 03:06:19,369 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:19,369 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:06:19,369 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:06:19,370 INFO  L87              Difference]: Start difference. First operand 5604 states and 9603 transitions. cyclomatic complexity: 4001 Second operand 4 states.
[2020-11-25 03:06:20,005 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:20,005 INFO  L93              Difference]: Finished difference Result 5032 states and 6261 transitions.
[2020-11-25 03:06:20,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:06:20,006 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:20,020 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,041 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5032 states to 5032 states and 6261 transitions.
[2020-11-25 03:06:20,041 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 915
[2020-11-25 03:06:20,042 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 954
[2020-11-25 03:06:20,042 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:20,046 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:20,046 INFO  L728         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:06:20,050 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:20,093 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5032 to 5032.
[2020-11-25 03:06:20,093 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5032 states.
[2020-11-25 03:06:20,100 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5032 states to 5032 states and 6261 transitions.
[2020-11-25 03:06:20,100 INFO  L751         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:06:20,100 INFO  L631         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:06:20,100 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:06:20,101 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:20,109 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,109 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:20,109 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:20,111 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:20,112 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND FALSE  !(DType[this] == ERC20Capped)
[L4390]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4395]  COND TRUE   DType[this] == MinterRole
[L4396]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4396]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4397]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:20,116 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:20,116 INFO  L82        PathProgramCache]: Analyzing trace with hash -1368881340, now seen corresponding path program 1 times
[2020-11-25 03:06:20,117 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:20,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:20,214 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:20,215 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:20,215 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:20,215 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:20,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:20,216 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:20,216 INFO  L87              Difference]: Start difference. First operand 5032 states and 6261 transitions. cyclomatic complexity: 1231 Second operand 3 states.
[2020-11-25 03:06:20,299 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:20,299 INFO  L93              Difference]: Finished difference Result 5038 states and 6267 transitions.
[2020-11-25 03:06:20,299 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:20,299 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5038 states and 6267 transitions.
[2020-11-25 03:06:20,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5038 states to 5038 states and 6267 transitions.
[2020-11-25 03:06:20,324 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 954
[2020-11-25 03:06:20,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 954
[2020-11-25 03:06:20,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5038 states and 6267 transitions.
[2020-11-25 03:06:20,328 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:20,328 INFO  L728         BuchiCegarLoop]: Abstraction has 5038 states and 6267 transitions.
[2020-11-25 03:06:20,332 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5038 states and 6267 transitions.
[2020-11-25 03:06:20,370 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5038 to 5034.
[2020-11-25 03:06:20,370 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5034 states.
[2020-11-25 03:06:20,378 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5034 states to 5034 states and 6263 transitions.
[2020-11-25 03:06:20,378 INFO  L751         BuchiCegarLoop]: Abstraction has 5034 states and 6263 transitions.
[2020-11-25 03:06:20,378 INFO  L631         BuchiCegarLoop]: Abstraction has 5034 states and 6263 transitions.
[2020-11-25 03:06:20,378 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:06:20,378 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5034 states and 6263 transitions.
[2020-11-25 03:06:20,385 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,385 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:20,385 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:20,387 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:20,387 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND FALSE  !(DType[this] == ERC20Capped)
[L4390]  COND TRUE   DType[this] == ERC20Mintable
[L4391]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4391]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4392]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:20,390 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:20,390 INFO  L82        PathProgramCache]: Analyzing trace with hash -2087007784, now seen corresponding path program 1 times
[2020-11-25 03:06:20,391 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:20,399 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:20,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:20,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:20,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:20,434 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:20,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:20,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:20,434 INFO  L87              Difference]: Start difference. First operand 5034 states and 6263 transitions. cyclomatic complexity: 1231 Second operand 3 states.
[2020-11-25 03:06:20,480 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:20,480 INFO  L93              Difference]: Finished difference Result 5039 states and 6268 transitions.
[2020-11-25 03:06:20,480 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:20,481 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:20,489 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,500 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5039 states to 5039 states and 6268 transitions.
[2020-11-25 03:06:20,501 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 954
[2020-11-25 03:06:20,501 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 954
[2020-11-25 03:06:20,501 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:20,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:20,505 INFO  L728         BuchiCegarLoop]: Abstraction has 5039 states and 6268 transitions.
[2020-11-25 03:06:20,509 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:20,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5039 to 5035.
[2020-11-25 03:06:20,537 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5035 states.
[2020-11-25 03:06:20,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5035 states to 5035 states and 6264 transitions.
[2020-11-25 03:06:20,542 INFO  L751         BuchiCegarLoop]: Abstraction has 5035 states and 6264 transitions.
[2020-11-25 03:06:20,542 INFO  L631         BuchiCegarLoop]: Abstraction has 5035 states and 6264 transitions.
[2020-11-25 03:06:20,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:06:20,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5035 states and 6264 transitions.
[2020-11-25 03:06:20,547 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:20,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:20,549 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:20,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:20,552 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:20,552 INFO  L82        PathProgramCache]: Analyzing trace with hash 480492299, now seen corresponding path program 1 times
[2020-11-25 03:06:20,553 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:20,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:20,614 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:06:20,614 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:20,614 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:06:20,615 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:20,615 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:06:20,615 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:06:20,615 INFO  L87              Difference]: Start difference. First operand 5035 states and 6264 transitions. cyclomatic complexity: 1231 Second operand 12 states.
[2020-11-25 03:06:20,815 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:20,816 INFO  L93              Difference]: Finished difference Result 5095 states and 6355 transitions.
[2020-11-25 03:06:20,816 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:06:20,816 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:20,826 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5095 states to 5095 states and 6355 transitions.
[2020-11-25 03:06:20,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 970
[2020-11-25 03:06:20,840 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 970
[2020-11-25 03:06:20,840 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:20,845 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:20,845 INFO  L728         BuchiCegarLoop]: Abstraction has 5095 states and 6355 transitions.
[2020-11-25 03:06:20,849 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:20,880 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5095 to 5079.
[2020-11-25 03:06:20,881 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5079 states.
[2020-11-25 03:06:20,886 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5079 states to 5079 states and 6331 transitions.
[2020-11-25 03:06:20,886 INFO  L751         BuchiCegarLoop]: Abstraction has 5079 states and 6331 transitions.
[2020-11-25 03:06:20,886 INFO  L631         BuchiCegarLoop]: Abstraction has 5079 states and 6331 transitions.
[2020-11-25 03:06:20,886 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:06:20,886 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5079 states and 6331 transitions.
[2020-11-25 03:06:20,891 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:20,891 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:20,891 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:20,892 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:20,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND TRUE   !!__var_27
[L4223]              revert := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:20,896 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:20,896 INFO  L82        PathProgramCache]: Analyzing trace with hash -1655169515, now seen corresponding path program 1 times
[2020-11-25 03:06:20,897 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:20,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:20,949 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:20,949 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:20,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:20,950 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:20,950 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:20,950 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:20,950 INFO  L87              Difference]: Start difference. First operand 5079 states and 6331 transitions. cyclomatic complexity: 1254 Second operand 3 states.
[2020-11-25 03:06:21,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:21,031 INFO  L93              Difference]: Finished difference Result 5649 states and 6738 transitions.
[2020-11-25 03:06:21,032 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:21,032 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5649 states and 6738 transitions.
[2020-11-25 03:06:21,042 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:21,054 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5649 states to 5179 states and 6152 transitions.
[2020-11-25 03:06:21,054 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 963
[2020-11-25 03:06:21,055 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-25 03:06:21,055 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5179 states and 6152 transitions.
[2020-11-25 03:06:21,059 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:21,059 INFO  L728         BuchiCegarLoop]: Abstraction has 5179 states and 6152 transitions.
[2020-11-25 03:06:21,062 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5179 states and 6152 transitions.
[2020-11-25 03:06:21,089 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5179 to 4836.
[2020-11-25 03:06:21,089 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4836 states.
[2020-11-25 03:06:21,094 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4836 states to 4836 states and 5723 transitions.
[2020-11-25 03:06:21,094 INFO  L751         BuchiCegarLoop]: Abstraction has 4836 states and 5723 transitions.
[2020-11-25 03:06:21,094 INFO  L631         BuchiCegarLoop]: Abstraction has 4836 states and 5723 transitions.
[2020-11-25 03:06:21,094 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:06:21,094 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4836 states and 5723 transitions.
[2020-11-25 03:06:21,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:21,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:21,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:21,102 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:21,102 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND FALSE  !(__exception)
[L449]   CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2995]              __ret_0_ := _balances_ERC20[this][account_s258];
[L449]   RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L450]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _balances_ERC20[this][account_s258] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:21,108 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:21,108 INFO  L82        PathProgramCache]: Analyzing trace with hash -1360600922, now seen corresponding path program 1 times
[2020-11-25 03:06:21,109 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:21,135 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:21,323 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:06:21,324 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:21,324 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:06:21,324 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:21,325 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:06:21,325 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:06:21,325 INFO  L87              Difference]: Start difference. First operand 4836 states and 5723 transitions. cyclomatic complexity: 889 Second operand 4 states.
[2020-11-25 03:06:21,379 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:21,379 INFO  L93              Difference]: Finished difference Result 4837 states and 5722 transitions.
[2020-11-25 03:06:21,379 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:06:21,379 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4837 states and 5722 transitions.
[2020-11-25 03:06:21,387 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:21,399 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4837 states to 4827 states and 5712 transitions.
[2020-11-25 03:06:21,399 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 970
[2020-11-25 03:06:21,400 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 970
[2020-11-25 03:06:21,401 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4827 states and 5712 transitions.
[2020-11-25 03:06:21,407 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:21,407 INFO  L728         BuchiCegarLoop]: Abstraction has 4827 states and 5712 transitions.
[2020-11-25 03:06:21,414 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4827 states and 5712 transitions.
[2020-11-25 03:06:21,452 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4827 to 4825.
[2020-11-25 03:06:21,452 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4825 states.
[2020-11-25 03:06:21,459 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4825 states to 4825 states and 5710 transitions.
[2020-11-25 03:06:21,459 INFO  L751         BuchiCegarLoop]: Abstraction has 4825 states and 5710 transitions.
[2020-11-25 03:06:21,459 INFO  L631         BuchiCegarLoop]: Abstraction has 4825 states and 5710 transitions.
[2020-11-25 03:06:21,459 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:06:21,460 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4825 states and 5710 transitions.
[2020-11-25 03:06:21,467 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:21,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:21,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:21,470 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:21,470 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND TRUE   __exception
[L424]               __tmp__Balance := Balance;
[L425]               __tmp__DType := DType;
[L426]               __tmp__Alloc := Alloc;
[L427]               __tmp__balance_ADDR := balance_ADDR;
[L428]               __tmp__M_Ref_int := M_Ref_int;
[L429]               __tmp__sum__balances0 := sum__balances0;
[L430]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L431]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L432]               __tmp__sum__allowances1 := sum__allowances1;
[L433]               __tmp__M_Ref_bool := M_Ref_bool;
[L434]               __tmp__sum := sum;
[L435]               __tmp__Length := Length;
[L436]               __tmp__now := now;
[L437]               __tmp___balances_ERC20 := _balances_ERC20;
[L438]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L439]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L440]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L441]               __tmp___minters_MinterRole := _minters_MinterRole;
[L442]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L443]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L444]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L445]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L446]   CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2989]              __ret_0_ := __tmp___balances_ERC20[this][account_s258];
[L446]   RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L447]               assume revert || gas < 0;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND TRUE   __exception
[L424]               __tmp__Balance := Balance;
[L425]               __tmp__DType := DType;
[L426]               __tmp__Alloc := Alloc;
[L427]               __tmp__balance_ADDR := balance_ADDR;
[L428]               __tmp__M_Ref_int := M_Ref_int;
[L429]               __tmp__sum__balances0 := sum__balances0;
[L430]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L431]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L432]               __tmp__sum__allowances1 := sum__allowances1;
[L433]               __tmp__M_Ref_bool := M_Ref_bool;
[L434]               __tmp__sum := sum;
[L435]               __tmp__Length := Length;
[L436]               __tmp__now := now;
[L437]               __tmp___balances_ERC20 := _balances_ERC20;
[L438]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L439]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L440]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L441]               __tmp___minters_MinterRole := _minters_MinterRole;
[L442]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L443]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L444]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L445]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L446]   CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2989]              __ret_0_ := __tmp___balances_ERC20[this][account_s258];
[L446]   RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L447]               assume revert || gas < 0;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:21,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:21,477 INFO  L82        PathProgramCache]: Analyzing trace with hash -1843747915, now seen corresponding path program 1 times
[2020-11-25 03:06:21,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:21,495 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:21,721 INFO  L134       CoverageAnalysis]: Checked inductivity of 1568 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1526 trivial. 0 not checked.
[2020-11-25 03:06:21,721 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:21,721 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 03:06:21,722 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:21,722 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:06:21,722 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:06:21,722 INFO  L87              Difference]: Start difference. First operand 4825 states and 5710 transitions. cyclomatic complexity: 887 Second operand 7 states.
[2020-11-25 03:06:21,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:21,859 INFO  L93              Difference]: Finished difference Result 4848 states and 5737 transitions.
[2020-11-25 03:06:21,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:06:21,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4848 states and 5737 transitions.
[2020-11-25 03:06:21,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:21,879 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4848 states to 4831 states and 5717 transitions.
[2020-11-25 03:06:21,880 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 970
[2020-11-25 03:06:21,880 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 970
[2020-11-25 03:06:21,880 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4831 states and 5717 transitions.
[2020-11-25 03:06:21,883 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:21,883 INFO  L728         BuchiCegarLoop]: Abstraction has 4831 states and 5717 transitions.
[2020-11-25 03:06:21,886 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4831 states and 5717 transitions.
[2020-11-25 03:06:21,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4831 to 4831.
[2020-11-25 03:06:21,911 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4831 states.
[2020-11-25 03:06:21,915 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4831 states to 4831 states and 5717 transitions.
[2020-11-25 03:06:21,915 INFO  L751         BuchiCegarLoop]: Abstraction has 4831 states and 5717 transitions.
[2020-11-25 03:06:21,915 INFO  L631         BuchiCegarLoop]: Abstraction has 4831 states and 5717 transitions.
[2020-11-25 03:06:21,915 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:06:21,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4831 states and 5717 transitions.
[2020-11-25 03:06:21,920 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:21,920 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:21,920 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:21,922 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:21,922 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_balanceOf_ERC200 := false;
[L2]                 call_balanceOf_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND TRUE   __exception
[L424]               __tmp__Balance := Balance;
[L425]               __tmp__DType := DType;
[L426]               __tmp__Alloc := Alloc;
[L427]               __tmp__balance_ADDR := balance_ADDR;
[L428]               __tmp__M_Ref_int := M_Ref_int;
[L429]               __tmp__sum__balances0 := sum__balances0;
[L430]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L431]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L432]               __tmp__sum__allowances1 := sum__allowances1;
[L433]               __tmp__M_Ref_bool := M_Ref_bool;
[L434]               __tmp__sum := sum;
[L435]               __tmp__Length := Length;
[L436]               __tmp__now := now;
[L437]               __tmp___balances_ERC20 := _balances_ERC20;
[L438]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L439]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L440]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L441]               __tmp___minters_MinterRole := _minters_MinterRole;
[L442]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L443]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L444]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L445]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L446]   CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2989]              __ret_0_ := __tmp___balances_ERC20[this][account_s258];
[L446]   RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L447]               assume revert || gas < 0;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND TRUE   choice == 15
[L7742]              gas := gas - 21000;
[L7743]  COND TRUE   gas >= 0
[L7744]              assume msgvalue_MSG == 0;
[L7745]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _balances_ERC20[this][account_s258] >= 0 && _balances_ERC20[this][account_s258] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_balanceOf_ERC200 := true;
[L2]                 call_balanceOf_ERC200 := false;
[L2]                 revert := revert_hold;
[L421]               havoc __exception;
[L422]               revert := false;
[L423]   COND TRUE   __exception
[L424]               __tmp__Balance := Balance;
[L425]               __tmp__DType := DType;
[L426]               __tmp__Alloc := Alloc;
[L427]               __tmp__balance_ADDR := balance_ADDR;
[L428]               __tmp__M_Ref_int := M_Ref_int;
[L429]               __tmp__sum__balances0 := sum__balances0;
[L430]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L431]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L432]               __tmp__sum__allowances1 := sum__allowances1;
[L433]               __tmp__M_Ref_bool := M_Ref_bool;
[L434]               __tmp__sum := sum;
[L435]               __tmp__Length := Length;
[L436]               __tmp__now := now;
[L437]               __tmp___balances_ERC20 := _balances_ERC20;
[L438]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L439]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L440]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L441]               __tmp___minters_MinterRole := _minters_MinterRole;
[L442]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L443]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L444]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L445]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L446]   CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L2989]              __ret_0_ := __tmp___balances_ERC20[this][account_s258];
[L446]   RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L447]               assume revert || gas < 0;
[L7745]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s258);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:21,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:21,927 INFO  L82        PathProgramCache]: Analyzing trace with hash 1611272885, now seen corresponding path program 1 times
[2020-11-25 03:06:21,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:21,945 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:22,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:06:22,097 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:22,097 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 03:06:22,097 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:22,097 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:06:22,097 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:06:22,098 INFO  L87              Difference]: Start difference. First operand 4831 states and 5717 transitions. cyclomatic complexity: 888 Second operand 5 states.
[2020-11-25 03:06:22,477 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:22,477 INFO  L93              Difference]: Finished difference Result 3038 states and 3536 transitions.
[2020-11-25 03:06:22,477 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:06:22,477 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3038 states and 3536 transitions.
[2020-11-25 03:06:22,484 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:06:22,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3038 states to 0 states and 0 transitions.
[2020-11-25 03:06:22,484 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:06:22,484 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:06:22,484 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:06:22,484 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:22,485 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:06:22,485 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:06:22,485 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:06:22,485 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:06:22,485 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:06:22,485 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:06:22,485 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:06:22,488 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:22 BasicIcfg
[2020-11-25 03:06:22,488 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:06:22,488 INFO  L168              Benchmark]: Toolchain (without parser) took 8083.61 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 929.8 MB in the beginning and 846.4 MB in the end (delta: 83.5 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,489 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,489 INFO  L168              Benchmark]: Boogie Preprocessor took 131.88 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,489 INFO  L168              Benchmark]: UtopiaSpecLang took 71.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,490 INFO  L168              Benchmark]: Boogie Printer took 23.55 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,490 INFO  L168              Benchmark]: RCFGBuilder took 1138.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.1 MB). Free memory was 897.6 MB in the beginning and 920.4 MB in the end (delta: -22.8 MB). Peak memory consumption was 186.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,490 INFO  L168              Benchmark]: UtopiaLTL2Aut took 25.71 ms. Allocated memory is still 1.1 GB. Free memory was 920.4 MB in the beginning and 913.7 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,491 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2081.22 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 199.2 MB). Free memory was 913.7 MB in the beginning and 1.0 GB in the end (delta: -134.8 MB). Peak memory consumption was 488.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,491 INFO  L168              Benchmark]: BlockEncodingV2 took 206.65 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 922.7 MB in the end (delta: 125.7 MB). Peak memory consumption was 125.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,492 INFO  L168              Benchmark]: BuchiAutomizer took 4401.62 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 825.2 MB). Free memory was 922.7 MB in the beginning and 846.4 MB in the end (delta: 76.4 MB). Peak memory consumption was 901.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:22,494 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7816 locations, 15032 edges
  - StatisticsResult: Encoded RCFG
    7652 locations, 14575 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 131.88 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.55 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1138.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.1 MB). Free memory was 897.6 MB in the beginning and 920.4 MB in the end (delta: -22.8 MB). Peak memory consumption was 186.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 25.71 ms. Allocated memory is still 1.1 GB. Free memory was 920.4 MB in the beginning and 913.7 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2081.22 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 199.2 MB). Free memory was 913.7 MB in the beginning and 1.0 GB in the end (delta: -134.8 MB). Peak memory consumption was 488.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 206.65 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 922.7 MB in the end (delta: 125.7 MB). Peak memory consumption was 125.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4401.62 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 825.2 MB). Free memory was 922.7 MB in the beginning and 846.4 MB in the end (delta: 76.4 MB). Peak memory consumption was 901.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2932 locations, 4569 edges
  - StatisticsResult: BuchiProgram size
    7816 locations, 15032 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.3s and 10 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.3s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 8 MinimizatonAttempts, 981 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5604 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 49616 SDtfs, 18937 SDslu, 112077 SDs, 0 SdLazy, 9206 SolverSat, 4803 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_balanceOf_ERC200) ==> ( <>(success_balanceOf_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
