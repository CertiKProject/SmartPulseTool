This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:45:02,922 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:45:02,924 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:45:02,934 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:45:02,934 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:45:02,935 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:45:02,936 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:45:02,937 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:45:02,939 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:45:02,939 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:45:02,940 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:45:02,940 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:45:02,941 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:45:02,941 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:45:02,942 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:45:02,943 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:45:02,943 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:45:02,944 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:45:02,946 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:45:02,947 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:45:02,948 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:45:02,948 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:45:02,950 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:45:02,950 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:45:02,950 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:45:02,951 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:45:02,951 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:45:02,952 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:45:02,952 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:45:02,952 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:45:02,952 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:45:02,953 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:45:02,953 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:45:02,954 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:45:02,954 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:45:02,954 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:45:02,955 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:45:02,955 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:45:02,955 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:45:02,956 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:45:02,956 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:45:02,957 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:45:02,964 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:45:02,964 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:45:02,965 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:45:02,965 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:45:02,965 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:45:02,965 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:45:02,965 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:45:02,965 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:45:02,965 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:45:02,966 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:45:02,966 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:45:02,966 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:45:02,967 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:45:02,967 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:45:02,967 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:45:02,967 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:45:02,967 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:45:02,967 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:45:02,967 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:45:02,990 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:45:03,002 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:45:03,004 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:45:03,006 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:45:03,006 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:45:03,006 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl
[2020-11-25 00:45:03,007 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl'
[2020-11-25 00:45:03,141 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:45:03,143 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:45:03,143 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:45:03,143 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:45:03,143 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:45:03,159 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,160 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,203 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,204 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,240 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,263 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,278 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,297 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:45:03,298 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:45:03,298 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:45:03,300 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:45:03,304 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/1) ...
[2020-11-25 00:45:03,330 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HxERC20.allowance(owner, spender), _allowed_HxERC20[this][owner][spender] >= 0 && _allowed_HxERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HxERC20.allowance(owner, spender), return == _allowed_HxERC20[this][owner][spender] &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:03,336 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HxERC20.allowance(owner, spender), _allowed_HxERC20[this][owner][spender] >= 0 && _allowed_HxERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HxERC20.allowance(owner, spender), return == _allowed_HxERC20[this][owner][spender] &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:03,343 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HxERC20.allowance(owner, spender), _allowed_HxERC20[this][owner][spender] >= 0 && _allowed_HxERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HxERC20.allowance(owner, spender), return == _allowed_HxERC20[this][owner][spender] &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:03,351 INFO  L636   opiaSpecLangObserver]: Parsed ( _allowed_HxERC20[this][owner_s656][spender_s656]>=0 && _allowed_HxERC20[this][owner_s656][spender_s656]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],[IdentifierExpression[owner_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],[IdentifierExpression[spender_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],[IdentifierExpression[owner_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],[IdentifierExpression[spender_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:45:03,355 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==_allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this]==( old(_totalSupply_HxERC20[this]) ) ) && _balances_HxERC20[this]==( old(_balances_HxERC20[this]) ) ) && _allowed_HxERC20[this]==( old(_allowed_HxERC20[this]) ) ) && implementation_BLY[this]==( old(implementation_BLY[this]) ) ) && M_Ref_Ref[timelockList_BLY[this]]==( old(M_Ref_Ref[timelockList_BLY[this]]) ) ) && frozenAccount_BLY[this]==( old(frozenAccount_BLY[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_HxOwnable[this]==( old(owner_HxOwnable[this]) ) ) && newOwner_HxOwnable[this]==( old(newOwner_HxOwnable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,allowance~address~address_HxERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],[IdentifierExpression[owner_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],[IdentifierExpression[spender_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_HxERC20>]]]]]]
[2020-11-25 00:45:03,363 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HxERC20.allowance(owner, spender), _allowed_HxERC20[this][owner][spender] >= 0 && _allowed_HxERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HxERC20.allowance(owner, spender), return == _allowed_HxERC20[this][owner][spender] &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:03,363 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_allowance_HxERC200) ==> ( <>AP(success_allowance_HxERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:45:03,385 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:03 PropertyContainer
[2020-11-25 00:45:03,385 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:45:03,385 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:45:03,385 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:45:03,386 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:45:03,386 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/2) ...
[2020-11-25 00:45:03,387 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:45:03,387 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:45:03,417 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:03" (2/2) ...
[2020-11-25 00:45:03,417 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:45:03,418 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:45:03,418 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:45:03,418 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:45:03,419 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/2) ...
[2020-11-25 00:45:03,471 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:45:03,471 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:45:03,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,472 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,473 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,473 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:45:03,473 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 00:45:03,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 00:45:03,473 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 00:45:03,473 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 00:45:03,474 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 00:45:03,474 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:45:03,474 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 00:45:03,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 00:45:03,474 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 00:45:03,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 00:45:03,474 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:45:03,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:45:03,475 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 00:45:03,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 00:45:03,475 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 00:45:03,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 00:45:03,475 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 00:45:03,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 00:45:03,475 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:45:03,475 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 00:45:03,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 00:45:03,476 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 00:45:03,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 00:45:03,476 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 00:45:03,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 00:45:03,476 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 00:45:03,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 00:45:03,476 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 00:45:03,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 00:45:03,476 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:45:03,477 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:45:03,477 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:45:03,477 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 00:45:03,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 00:45:03,477 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 00:45:03,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 00:45:03,477 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 00:45:03,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 00:45:03,477 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 00:45:03,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 00:45:03,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:45:03,478 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 00:45:03,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 00:45:03,479 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 00:45:03,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 00:45:03,479 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 00:45:03,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 00:45:03,479 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 00:45:03,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 00:45:03,479 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:45:03,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:45:03,479 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:03,480 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:45:03,480 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:45:03,480 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:45:03,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:45:03,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:45:03,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:45:03,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:45:03,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 00:45:03,482 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:45:03,482 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 00:45:03,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 00:45:03,482 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 00:45:03,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 00:45:03,483 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 00:45:03,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 00:45:03,483 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:45:03,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:45:03,483 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 00:45:03,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 00:45:03,483 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 00:45:03,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 00:45:03,483 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:45:03,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:45:03,484 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:45:03,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:45:03,484 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 00:45:03,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 00:45:03,484 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 00:45:03,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 00:45:03,484 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:03,484 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:45:03,484 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 00:45:03,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 00:45:03,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 00:45:03,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:45:03,485 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 00:45:03,486 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 00:45:03,487 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:45:03,488 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 00:45:03,489 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:45:03,490 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:45:03,491 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 00:45:03,492 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:45:03,493 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,494 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:45:03,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 00:45:03,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:03,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:45:03,498 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 00:45:03,499 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 00:45:03,500 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 00:45:03,500 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 00:45:03,500 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:45:03,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:03,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:45:03,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:45:03,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:45:03,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 00:45:03,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:45:03,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:45:03,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:45:03,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:03,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:45:03,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 00:45:03,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 00:45:03,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:45:03,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:45:03,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:45:04,582 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:04,582 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:04,582 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:04,724 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:45:04,724 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 00:45:04,726 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:04 BoogieIcfgContainer
[2020-11-25 00:45:04,726 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:03" (2/2) ...
[2020-11-25 00:45:04,727 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:45:04,727 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@63e23ab5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:04, skipping insertion in model container
[2020-11-25 00:45:04,727 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:45:04,727 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:45:04,727 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:45:04,728 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:45:04,728 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/3) ...
[2020-11-25 00:45:04,728 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5017a71f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:04, skipping insertion in model container
[2020-11-25 00:45:04,729 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:03" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:45:04,760 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:04 NWAContainer
[2020-11-25 00:45:04,761 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:45:04,761 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:45:04,761 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:45:04,761 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:45:04,762 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:04" (3/4) ...
[2020-11-25 00:45:04,762 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@312d414a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:04, skipping insertion in model container
[2020-11-25 00:45:04,763 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:04" (4/4) ...
[2020-11-25 00:45:04,765 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:45:04,772 INFO  L110   BuchiProductObserver]: Initial RCFG 4605 locations, 6368 edges
[2020-11-25 00:45:04,772 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:45:04,786 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:45:07,937 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:45:07,951 INFO  L110   BuchiProductObserver]: BuchiProgram size 11434 locations, 20718 edges
[2020-11-25 00:45:07,951 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:07 BoogieIcfgContainer
[2020-11-25 00:45:07,951 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:45:07,951 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:45:07,952 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:45:07,953 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:45:07,953 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:07" (1/1) ...
[2020-11-25 00:45:08,188 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:45:08,192 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:45:08,209 INFO  L313           BlockEncoder]: Initial Icfg 11434 locations, 20718 edges
[2020-11-25 00:45:08,209 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:45:08,210 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:45:08,210 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:45:08,210 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:45:08,232 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 00:45:08,253 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 00:45:08,273 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:45:08,281 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:45:08,288 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:45:08,288 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:45:08,293 INFO  L313           BlockEncoder]: Encoded RCFG 11292 locations, 20327 edges
[2020-11-25 00:45:08,293 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:45:08 BasicIcfg
[2020-11-25 00:45:08,293 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:45:08,294 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:45:08,294 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:45:08,295 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:45:08,296 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:08,296 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:03" (1/6) ...
[2020-11-25 00:45:08,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dcffcfc and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:45:08, skipping insertion in model container
[2020-11-25 00:45:08,297 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:08,297 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:03" (2/6) ...
[2020-11-25 00:45:08,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dcffcfc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:45:08, skipping insertion in model container
[2020-11-25 00:45:08,298 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:08,298 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:04" (3/6) ...
[2020-11-25 00:45:08,298 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dcffcfc and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:45:08, skipping insertion in model container
[2020-11-25 00:45:08,298 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:08,298 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:04" (4/6) ...
[2020-11-25 00:45:08,298 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dcffcfc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:45:08, skipping insertion in model container
[2020-11-25 00:45:08,298 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:08,299 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:07" (5/6) ...
[2020-11-25 00:45:08,299 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dcffcfc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:45:08, skipping insertion in model container
[2020-11-25 00:45:08,299 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:08,299 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:45:08" (6/6) ...
[2020-11-25 00:45:08,300 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_allowance.bpl_BEv2
[2020-11-25 00:45:08,335 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:45:08,335 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:45:08,335 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:45:08,335 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:45:08,335 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:45:08,335 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:45:08,335 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:45:08,335 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:45:08,335 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:45:08,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11292 states.
[2020-11-25 00:45:08,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:08,543 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:08,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:08,551 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:08,551 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:08,551 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:45:08,551 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11292 states.
[2020-11-25 00:45:08,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:08,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:08,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:08,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:08,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:08,608 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:08,608 INFO  L82        PathProgramCache]: Analyzing trace with hash -740120511, now seen corresponding path program 1 times
[2020-11-25 00:45:08,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:08,633 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:08,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:45:08,672 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:08,672 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:45:09,091 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:09,099 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:45:09,100 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:45:09,101 INFO  L87              Difference]: Start difference. First operand 11292 states. Second operand 4 states.
[2020-11-25 00:45:10,210 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:10,210 INFO  L93              Difference]: Finished difference Result 7165 states and 8389 transitions.
[2020-11-25 00:45:10,210 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:45:10,211 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7165 states and 8389 transitions.
[2020-11-25 00:45:10,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:10,279 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7165 states to 7165 states and 8389 transitions.
[2020-11-25 00:45:10,280 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 00:45:10,283 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1323
[2020-11-25 00:45:10,283 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7165 states and 8389 transitions.
[2020-11-25 00:45:10,298 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:10,299 INFO  L728         BuchiCegarLoop]: Abstraction has 7165 states and 8389 transitions.
[2020-11-25 00:45:10,319 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7165 states and 8389 transitions.
[2020-11-25 00:45:10,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7165 to 7165.
[2020-11-25 00:45:10,404 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7165 states.
[2020-11-25 00:45:10,416 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7165 states to 7165 states and 8389 transitions.
[2020-11-25 00:45:10,416 INFO  L751         BuchiCegarLoop]: Abstraction has 7165 states and 8389 transitions.
[2020-11-25 00:45:10,417 INFO  L631         BuchiCegarLoop]: Abstraction has 7165 states and 8389 transitions.
[2020-11-25 00:45:10,417 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:45:10,417 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7165 states and 8389 transitions.
[2020-11-25 00:45:10,427 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:10,428 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:10,428 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:10,430 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:10,430 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:10,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:10,434 INFO  L82        PathProgramCache]: Analyzing trace with hash 171930977, now seen corresponding path program 1 times
[2020-11-25 00:45:10,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:10,445 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:10,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:45:10,471 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:10,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:45:10,472 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:10,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:45:10,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:45:10,472 INFO  L87              Difference]: Start difference. First operand 7165 states and 8389 transitions. cyclomatic complexity: 1234 Second operand 3 states.
[2020-11-25 00:45:10,668 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:10,669 INFO  L93              Difference]: Finished difference Result 9125 states and 10660 transitions.
[2020-11-25 00:45:10,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:45:10,669 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9125 states and 10660 transitions.
[2020-11-25 00:45:10,692 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:10,728 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9125 states to 9125 states and 10660 transitions.
[2020-11-25 00:45:10,728 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1839
[2020-11-25 00:45:10,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1839
[2020-11-25 00:45:10,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9125 states and 10660 transitions.
[2020-11-25 00:45:10,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:10,740 INFO  L728         BuchiCegarLoop]: Abstraction has 9125 states and 10660 transitions.
[2020-11-25 00:45:10,748 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9125 states and 10660 transitions.
[2020-11-25 00:45:10,833 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9125 to 7967.
[2020-11-25 00:45:10,833 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7967 states.
[2020-11-25 00:45:10,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7967 states to 7967 states and 9258 transitions.
[2020-11-25 00:45:10,846 INFO  L751         BuchiCegarLoop]: Abstraction has 7967 states and 9258 transitions.
[2020-11-25 00:45:10,846 INFO  L631         BuchiCegarLoop]: Abstraction has 7967 states and 9258 transitions.
[2020-11-25 00:45:10,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:45:10,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7967 states and 9258 transitions.
[2020-11-25 00:45:10,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:10,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:10,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:10,859 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:10,859 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND TRUE   !(account_s164 != null)
[L5739]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:10,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:10,863 INFO  L82        PathProgramCache]: Analyzing trace with hash -1364309403, now seen corresponding path program 1 times
[2020-11-25 00:45:10,864 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:10,876 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:10,938 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:45:10,938 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:10,938 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:45:10,939 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:10,939 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:45:10,939 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:45:10,939 INFO  L87              Difference]: Start difference. First operand 7967 states and 9258 transitions. cyclomatic complexity: 1301 Second operand 9 states.
[2020-11-25 00:45:11,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:11,142 INFO  L93              Difference]: Finished difference Result 8013 states and 9333 transitions.
[2020-11-25 00:45:11,142 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:45:11,142 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8013 states and 9333 transitions.
[2020-11-25 00:45:11,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:11,198 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8013 states to 8013 states and 9333 transitions.
[2020-11-25 00:45:11,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1540
[2020-11-25 00:45:11,199 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1540
[2020-11-25 00:45:11,199 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8013 states and 9333 transitions.
[2020-11-25 00:45:11,208 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:11,208 INFO  L728         BuchiCegarLoop]: Abstraction has 8013 states and 9333 transitions.
[2020-11-25 00:45:11,217 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8013 states and 9333 transitions.
[2020-11-25 00:45:11,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8013 to 8004.
[2020-11-25 00:45:11,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8004 states.
[2020-11-25 00:45:11,304 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8004 states to 8004 states and 9317 transitions.
[2020-11-25 00:45:11,305 INFO  L751         BuchiCegarLoop]: Abstraction has 8004 states and 9317 transitions.
[2020-11-25 00:45:11,305 INFO  L631         BuchiCegarLoop]: Abstraction has 8004 states and 9317 transitions.
[2020-11-25 00:45:11,305 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:45:11,305 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8004 states and 9317 transitions.
[2020-11-25 00:45:11,318 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:11,319 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:11,319 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:11,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:11,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND TRUE   !(account_s218 != null)
[L5810]               revert := true;
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND TRUE   revert
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:11,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:11,326 INFO  L82        PathProgramCache]: Analyzing trace with hash 1636232383, now seen corresponding path program 1 times
[2020-11-25 00:45:11,327 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:11,339 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:11,439 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:45:11,439 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:11,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 00:45:11,440 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:11,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 00:45:11,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 00:45:11,440 INFO  L87              Difference]: Start difference. First operand 8004 states and 9317 transitions. cyclomatic complexity: 1323 Second operand 10 states.
[2020-11-25 00:45:11,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:11,559 INFO  L93              Difference]: Finished difference Result 8064 states and 9408 transitions.
[2020-11-25 00:45:11,559 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:45:11,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8064 states and 9408 transitions.
[2020-11-25 00:45:11,575 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:11,593 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8064 states to 8064 states and 9408 transitions.
[2020-11-25 00:45:11,593 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1547
[2020-11-25 00:45:11,594 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1547
[2020-11-25 00:45:11,594 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8064 states and 9408 transitions.
[2020-11-25 00:45:11,599 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:11,599 INFO  L728         BuchiCegarLoop]: Abstraction has 8064 states and 9408 transitions.
[2020-11-25 00:45:11,605 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8064 states and 9408 transitions.
[2020-11-25 00:45:11,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8064 to 8011.
[2020-11-25 00:45:11,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8011 states.
[2020-11-25 00:45:11,659 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8011 states to 8011 states and 9325 transitions.
[2020-11-25 00:45:11,659 INFO  L751         BuchiCegarLoop]: Abstraction has 8011 states and 9325 transitions.
[2020-11-25 00:45:11,659 INFO  L631         BuchiCegarLoop]: Abstraction has 8011 states and 9325 transitions.
[2020-11-25 00:45:11,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:45:11,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8011 states and 9325 transitions.
[2020-11-25 00:45:11,667 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:11,667 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:11,667 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:11,669 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:11,669 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND TRUE   !!__var_2
[L5747]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:11,673 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:11,673 INFO  L82        PathProgramCache]: Analyzing trace with hash 852771792, now seen corresponding path program 1 times
[2020-11-25 00:45:11,674 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:11,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:11,718 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 00:45:11,718 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:11,718 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:45:11,719 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:11,719 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:45:11,719 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:45:11,719 INFO  L87              Difference]: Start difference. First operand 8011 states and 9325 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 00:45:11,834 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:11,834 INFO  L93              Difference]: Finished difference Result 9139 states and 10336 transitions.
[2020-11-25 00:45:11,835 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:45:11,835 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9139 states and 10336 transitions.
[2020-11-25 00:45:11,852 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:11,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9139 states to 8461 states and 9532 transitions.
[2020-11-25 00:45:11,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1638
[2020-11-25 00:45:11,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1720
[2020-11-25 00:45:11,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8461 states and 9532 transitions.
[2020-11-25 00:45:11,878 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:11,878 INFO  L728         BuchiCegarLoop]: Abstraction has 8461 states and 9532 transitions.
[2020-11-25 00:45:11,885 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8461 states and 9532 transitions.
[2020-11-25 00:45:11,924 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8461 to 7798.
[2020-11-25 00:45:11,924 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7798 states.
[2020-11-25 00:45:11,931 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7798 states to 7798 states and 8697 transitions.
[2020-11-25 00:45:11,931 INFO  L751         BuchiCegarLoop]: Abstraction has 7798 states and 8697 transitions.
[2020-11-25 00:45:11,931 INFO  L631         BuchiCegarLoop]: Abstraction has 7798 states and 8697 transitions.
[2020-11-25 00:45:11,931 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:45:11,932 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7798 states and 8697 transitions.
[2020-11-25 00:45:11,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:11,939 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:11,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:11,942 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:11,942 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:11,948 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:11,948 INFO  L82        PathProgramCache]: Analyzing trace with hash -1451480676, now seen corresponding path program 1 times
[2020-11-25 00:45:11,949 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:11,962 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:12,124 INFO  L134       CoverageAnalysis]: Checked inductivity of 936 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 00:45:12,124 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:12,124 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:45:12,125 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:12,125 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:45:12,125 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:45:12,125 INFO  L87              Difference]: Start difference. First operand 7798 states and 8697 transitions. cyclomatic complexity: 909 Second operand 7 states.
[2020-11-25 00:45:12,245 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:12,245 INFO  L93              Difference]: Finished difference Result 7821 states and 8724 transitions.
[2020-11-25 00:45:12,245 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:45:12,246 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7821 states and 8724 transitions.
[2020-11-25 00:45:12,259 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:12,275 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7821 states to 7804 states and 8704 transitions.
[2020-11-25 00:45:12,276 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1659
[2020-11-25 00:45:12,276 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1659
[2020-11-25 00:45:12,276 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7804 states and 8704 transitions.
[2020-11-25 00:45:12,281 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:12,281 INFO  L728         BuchiCegarLoop]: Abstraction has 7804 states and 8704 transitions.
[2020-11-25 00:45:12,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7804 states and 8704 transitions.
[2020-11-25 00:45:12,323 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7804 to 7804.
[2020-11-25 00:45:12,323 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7804 states.
[2020-11-25 00:45:12,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7804 states to 7804 states and 8704 transitions.
[2020-11-25 00:45:12,331 INFO  L751         BuchiCegarLoop]: Abstraction has 7804 states and 8704 transitions.
[2020-11-25 00:45:12,331 INFO  L631         BuchiCegarLoop]: Abstraction has 7804 states and 8704 transitions.
[2020-11-25 00:45:12,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:45:12,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7804 states and 8704 transitions.
[2020-11-25 00:45:12,339 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:12,339 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:12,339 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:12,341 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:12,341 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6532]               __ret_0_ := _allowed_HxERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_HxERC20[this][owner_s656][spender_s656] && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:12,346 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:12,346 INFO  L82        PathProgramCache]: Analyzing trace with hash -1950215992, now seen corresponding path program 1 times
[2020-11-25 00:45:12,347 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:12,367 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:12,516 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:45:12,516 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:12,516 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:45:12,516 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:12,517 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:45:12,517 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:45:12,517 INFO  L87              Difference]: Start difference. First operand 7804 states and 8704 transitions. cyclomatic complexity: 910 Second operand 4 states.
[2020-11-25 00:45:12,576 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:12,576 INFO  L93              Difference]: Finished difference Result 7805 states and 8703 transitions.
[2020-11-25 00:45:12,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:45:12,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7805 states and 8703 transitions.
[2020-11-25 00:45:12,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:12,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7805 states to 7795 states and 8693 transitions.
[2020-11-25 00:45:12,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1648
[2020-11-25 00:45:12,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1648
[2020-11-25 00:45:12,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7795 states and 8693 transitions.
[2020-11-25 00:45:12,613 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:12,613 INFO  L728         BuchiCegarLoop]: Abstraction has 7795 states and 8693 transitions.
[2020-11-25 00:45:12,618 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7795 states and 8693 transitions.
[2020-11-25 00:45:12,654 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7795 to 7793.
[2020-11-25 00:45:12,654 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7793 states.
[2020-11-25 00:45:12,662 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7793 states to 7793 states and 8691 transitions.
[2020-11-25 00:45:12,662 INFO  L751         BuchiCegarLoop]: Abstraction has 7793 states and 8691 transitions.
[2020-11-25 00:45:12,662 INFO  L631         BuchiCegarLoop]: Abstraction has 7793 states and 8691 transitions.
[2020-11-25 00:45:12,662 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:45:12,662 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7793 states and 8691 transitions.
[2020-11-25 00:45:12,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:12,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:12,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:12,675 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:12,675 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:12,681 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:12,681 INFO  L82        PathProgramCache]: Analyzing trace with hash -1278399754, now seen corresponding path program 1 times
[2020-11-25 00:45:12,682 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:12,697 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:12,900 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 00:45:12,901 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:12,901 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:45:12,901 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:12,901 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:45:12,901 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:45:12,902 INFO  L87              Difference]: Start difference. First operand 7793 states and 8691 transitions. cyclomatic complexity: 908 Second operand 7 states.
[2020-11-25 00:45:13,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:13,017 INFO  L93              Difference]: Finished difference Result 7816 states and 8718 transitions.
[2020-11-25 00:45:13,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:45:13,019 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7816 states and 8718 transitions.
[2020-11-25 00:45:13,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:13,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7816 states to 7799 states and 8698 transitions.
[2020-11-25 00:45:13,053 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1648
[2020-11-25 00:45:13,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1648
[2020-11-25 00:45:13,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7799 states and 8698 transitions.
[2020-11-25 00:45:13,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:13,058 INFO  L728         BuchiCegarLoop]: Abstraction has 7799 states and 8698 transitions.
[2020-11-25 00:45:13,064 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7799 states and 8698 transitions.
[2020-11-25 00:45:13,100 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7799 to 7793.
[2020-11-25 00:45:13,100 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7793 states.
[2020-11-25 00:45:13,107 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7793 states to 7793 states and 8691 transitions.
[2020-11-25 00:45:13,107 INFO  L751         BuchiCegarLoop]: Abstraction has 7793 states and 8691 transitions.
[2020-11-25 00:45:13,107 INFO  L631         BuchiCegarLoop]: Abstraction has 7793 states and 8691 transitions.
[2020-11-25 00:45:13,108 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:45:13,108 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7793 states and 8691 transitions.
[2020-11-25 00:45:13,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:13,115 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:13,115 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:13,117 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:13,117 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:13,122 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:13,123 INFO  L82        PathProgramCache]: Analyzing trace with hash 1392015474, now seen corresponding path program 1 times
[2020-11-25 00:45:13,123 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:13,138 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:13,312 INFO  L134       CoverageAnalysis]: Checked inductivity of 921 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:45:13,312 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:13,312 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:45:13,313 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:13,313 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:45:13,313 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:45:13,313 INFO  L87              Difference]: Start difference. First operand 7793 states and 8691 transitions. cyclomatic complexity: 908 Second operand 8 states.
[2020-11-25 00:45:13,439 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:13,440 INFO  L93              Difference]: Finished difference Result 7820 states and 8722 transitions.
[2020-11-25 00:45:13,440 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:45:13,440 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7820 states and 8722 transitions.
[2020-11-25 00:45:13,453 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:13,467 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7820 states to 7806 states and 8706 transitions.
[2020-11-25 00:45:13,467 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1648
[2020-11-25 00:45:13,467 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1648
[2020-11-25 00:45:13,468 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7806 states and 8706 transitions.
[2020-11-25 00:45:13,471 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:13,472 INFO  L728         BuchiCegarLoop]: Abstraction has 7806 states and 8706 transitions.
[2020-11-25 00:45:13,477 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7806 states and 8706 transitions.
[2020-11-25 00:45:13,524 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7806 to 7806.
[2020-11-25 00:45:13,524 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7806 states.
[2020-11-25 00:45:13,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7806 states to 7806 states and 8706 transitions.
[2020-11-25 00:45:13,534 INFO  L751         BuchiCegarLoop]: Abstraction has 7806 states and 8706 transitions.
[2020-11-25 00:45:13,534 INFO  L631         BuchiCegarLoop]: Abstraction has 7806 states and 8706 transitions.
[2020-11-25 00:45:13,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:45:13,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7806 states and 8706 transitions.
[2020-11-25 00:45:13,545 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:13,545 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:13,545 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:13,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:13,548 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:13,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:13,556 INFO  L82        PathProgramCache]: Analyzing trace with hash -478672407, now seen corresponding path program 1 times
[2020-11-25 00:45:13,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:13,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:13,768 INFO  L134       CoverageAnalysis]: Checked inductivity of 900 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 873 trivial. 0 not checked.
[2020-11-25 00:45:13,769 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:13,769 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:45:13,769 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:13,769 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:45:13,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:45:13,769 INFO  L87              Difference]: Start difference. First operand 7806 states and 8706 transitions. cyclomatic complexity: 910 Second operand 8 states.
[2020-11-25 00:45:15,105 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:15,105 INFO  L93              Difference]: Finished difference Result 9286 states and 10436 transitions.
[2020-11-25 00:45:15,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:45:15,106 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9286 states and 10436 transitions.
[2020-11-25 00:45:15,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:15,148 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9286 states to 9269 states and 10416 transitions.
[2020-11-25 00:45:15,148 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1655
[2020-11-25 00:45:15,149 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1655
[2020-11-25 00:45:15,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9269 states and 10416 transitions.
[2020-11-25 00:45:15,154 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:15,154 INFO  L728         BuchiCegarLoop]: Abstraction has 9269 states and 10416 transitions.
[2020-11-25 00:45:15,160 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9269 states and 10416 transitions.
[2020-11-25 00:45:15,242 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9269 to 9198.
[2020-11-25 00:45:15,242 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9198 states.
[2020-11-25 00:45:15,251 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9198 states to 9198 states and 10345 transitions.
[2020-11-25 00:45:15,251 INFO  L751         BuchiCegarLoop]: Abstraction has 9198 states and 10345 transitions.
[2020-11-25 00:45:15,251 INFO  L631         BuchiCegarLoop]: Abstraction has 9198 states and 10345 transitions.
[2020-11-25 00:45:15,251 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:45:15,251 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9198 states and 10345 transitions.
[2020-11-25 00:45:15,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:15,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:15,260 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:15,262 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:15,262 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:15,277 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:15,278 INFO  L82        PathProgramCache]: Analyzing trace with hash 1801103977, now seen corresponding path program 1 times
[2020-11-25 00:45:15,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:15,289 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:15,453 INFO  L134       CoverageAnalysis]: Checked inductivity of 912 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 876 trivial. 0 not checked.
[2020-11-25 00:45:15,453 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:15,453 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:45:15,453 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:15,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:45:15,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:45:15,454 INFO  L87              Difference]: Start difference. First operand 9198 states and 10345 transitions. cyclomatic complexity: 1160 Second operand 8 states.
[2020-11-25 00:45:16,690 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:16,690 INFO  L93              Difference]: Finished difference Result 9292 states and 10443 transitions.
[2020-11-25 00:45:16,690 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:45:16,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9292 states and 10443 transitions.
[2020-11-25 00:45:16,708 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:16,726 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9292 states to 9275 states and 10423 transitions.
[2020-11-25 00:45:16,726 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1655
[2020-11-25 00:45:16,726 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1655
[2020-11-25 00:45:16,726 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9275 states and 10423 transitions.
[2020-11-25 00:45:16,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:16,731 INFO  L728         BuchiCegarLoop]: Abstraction has 9275 states and 10423 transitions.
[2020-11-25 00:45:16,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9275 states and 10423 transitions.
[2020-11-25 00:45:16,776 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9275 to 9198.
[2020-11-25 00:45:16,776 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9198 states.
[2020-11-25 00:45:16,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9198 states to 9198 states and 10345 transitions.
[2020-11-25 00:45:16,786 INFO  L751         BuchiCegarLoop]: Abstraction has 9198 states and 10345 transitions.
[2020-11-25 00:45:16,786 INFO  L631         BuchiCegarLoop]: Abstraction has 9198 states and 10345 transitions.
[2020-11-25 00:45:16,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 00:45:16,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9198 states and 10345 transitions.
[2020-11-25 00:45:16,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:16,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:16,795 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:16,797 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:16,797 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:16,802 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:16,802 INFO  L82        PathProgramCache]: Analyzing trace with hash 326054931, now seen corresponding path program 1 times
[2020-11-25 00:45:16,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:16,816 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:16,999 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:45:16,999 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:16,999 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:45:17,000 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:17,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:45:17,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:45:17,001 INFO  L87              Difference]: Start difference. First operand 9198 states and 10345 transitions. cyclomatic complexity: 1160 Second operand 8 states.
[2020-11-25 00:45:17,135 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:17,135 INFO  L93              Difference]: Finished difference Result 9219 states and 10369 transitions.
[2020-11-25 00:45:17,135 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:45:17,135 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9219 states and 10369 transitions.
[2020-11-25 00:45:17,149 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:17,164 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9219 states to 9205 states and 10353 transitions.
[2020-11-25 00:45:17,165 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1648
[2020-11-25 00:45:17,165 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1648
[2020-11-25 00:45:17,165 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9205 states and 10353 transitions.
[2020-11-25 00:45:17,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:17,170 INFO  L728         BuchiCegarLoop]: Abstraction has 9205 states and 10353 transitions.
[2020-11-25 00:45:17,175 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9205 states and 10353 transitions.
[2020-11-25 00:45:17,213 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9205 to 9192.
[2020-11-25 00:45:17,213 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9192 states.
[2020-11-25 00:45:17,223 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9192 states to 9192 states and 10338 transitions.
[2020-11-25 00:45:17,223 INFO  L751         BuchiCegarLoop]: Abstraction has 9192 states and 10338 transitions.
[2020-11-25 00:45:17,223 INFO  L631         BuchiCegarLoop]: Abstraction has 9192 states and 10338 transitions.
[2020-11-25 00:45:17,223 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 00:45:17,223 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9192 states and 10338 transitions.
[2020-11-25 00:45:17,232 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:17,232 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:17,232 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:17,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:17,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:17,239 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:17,239 INFO  L82        PathProgramCache]: Analyzing trace with hash 1849744788, now seen corresponding path program 1 times
[2020-11-25 00:45:17,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:17,253 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:17,418 INFO  L134       CoverageAnalysis]: Checked inductivity of 891 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 854 trivial. 0 not checked.
[2020-11-25 00:45:17,418 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:17,418 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:45:17,418 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:17,419 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:45:17,419 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:45:17,419 INFO  L87              Difference]: Start difference. First operand 9192 states and 10338 transitions. cyclomatic complexity: 1159 Second operand 9 states.
[2020-11-25 00:45:18,607 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:18,607 INFO  L93              Difference]: Finished difference Result 9284 states and 10433 transitions.
[2020-11-25 00:45:18,607 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:45:18,607 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9284 states and 10433 transitions.
[2020-11-25 00:45:18,623 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:18,638 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9284 states to 9270 states and 10417 transitions.
[2020-11-25 00:45:18,638 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1655
[2020-11-25 00:45:18,639 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1655
[2020-11-25 00:45:18,639 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9270 states and 10417 transitions.
[2020-11-25 00:45:18,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:18,643 INFO  L728         BuchiCegarLoop]: Abstraction has 9270 states and 10417 transitions.
[2020-11-25 00:45:18,649 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9270 states and 10417 transitions.
[2020-11-25 00:45:18,684 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9270 to 9199.
[2020-11-25 00:45:18,684 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9199 states.
[2020-11-25 00:45:18,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9199 states to 9199 states and 10346 transitions.
[2020-11-25 00:45:18,694 INFO  L751         BuchiCegarLoop]: Abstraction has 9199 states and 10346 transitions.
[2020-11-25 00:45:18,694 INFO  L631         BuchiCegarLoop]: Abstraction has 9199 states and 10346 transitions.
[2020-11-25 00:45:18,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 00:45:18,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9199 states and 10346 transitions.
[2020-11-25 00:45:18,702 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:18,702 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:18,702 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:18,704 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:18,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_HxERC200 := false;
[L2]                  call_allowance_HxERC200 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND TRUE   choice == 15
[L12083]              gas := gas - 21000;
[L12084]  COND TRUE   gas >= 0
[L12085]              assume msgvalue_MSG == 0;
[L12086]  CALL        call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_HxERC20[this][owner_s656][spender_s656] >= 0 && _allowed_HxERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_HxERC200 := true;
[L2]                  call_allowance_HxERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L1895]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L1899]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L1900]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L1905]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L1906]               __tmp__implementation_BLY := implementation_BLY;
[L1907]               __tmp__timelockList_BLY := timelockList_BLY;
[L1908]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L1909]   CALL        call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6526]               __ret_0_ := __tmp___allowed_HxERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12086]  RET         call __ret_0_allowance := allowance~address~address_HxERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:18,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:18,709 INFO  L82        PathProgramCache]: Analyzing trace with hash -572181854, now seen corresponding path program 1 times
[2020-11-25 00:45:18,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:18,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:18,867 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:45:18,868 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:18,868 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 00:45:18,868 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:18,868 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 00:45:18,868 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 00:45:18,868 INFO  L87              Difference]: Start difference. First operand 9199 states and 10346 transitions. cyclomatic complexity: 1160 Second operand 5 states.
[2020-11-25 00:45:19,672 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:19,672 INFO  L93              Difference]: Finished difference Result 6664 states and 7544 transitions.
[2020-11-25 00:45:19,672 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:45:19,672 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6664 states and 7544 transitions.
[2020-11-25 00:45:19,685 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:45:19,685 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6664 states to 0 states and 0 transitions.
[2020-11-25 00:45:19,685 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 00:45:19,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 00:45:19,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 00:45:19,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:19,686 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:45:19,686 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:45:19,686 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:45:19,686 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 00:45:19,686 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 00:45:19,686 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:45:19,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 00:45:19,689 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:45:19 BasicIcfg
[2020-11-25 00:45:19,689 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:45:19,689 INFO  L168              Benchmark]: Toolchain (without parser) took 16547.17 ms. Allocated memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: 2.0 GB). Free memory was 919.1 MB in the beginning and 1.4 GB in the end (delta: -485.2 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,690 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,690 INFO  L168              Benchmark]: Boogie Preprocessor took 154.90 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,690 INFO  L168              Benchmark]: UtopiaSpecLang took 87.05 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,690 INFO  L168              Benchmark]: Boogie Printer took 32.27 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,691 INFO  L168              Benchmark]: RCFGBuilder took 1309.00 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.6 MB). Free memory was 870.8 MB in the beginning and 767.8 MB in the end (delta: 103.0 MB). Peak memory consumption was 170.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,691 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.60 ms. Allocated memory is still 1.1 GB. Free memory was 767.8 MB in the beginning and 754.6 MB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,691 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3190.51 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 448.3 MB). Free memory was 754.6 MB in the beginning and 832.2 MB in the end (delta: -77.6 MB). Peak memory consumption was 370.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,692 INFO  L168              Benchmark]: BlockEncodingV2 took 342.02 ms. Allocated memory is still 1.5 GB. Free memory was 832.2 MB in the beginning and 676.8 MB in the end (delta: 155.4 MB). Peak memory consumption was 155.4 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,692 INFO  L168              Benchmark]: BuchiAutomizer took 11395.01 ms. Allocated memory was 1.5 GB in the beginning and 3.0 GB in the end (delta: 1.5 GB). Free memory was 676.8 MB in the beginning and 1.4 GB in the end (delta: -727.5 MB). Peak memory consumption was 742.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:45:19,694 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11434 locations, 20718 edges
  - StatisticsResult: Encoded RCFG
    11292 locations, 20327 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 154.90 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 87.05 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 32.27 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1309.00 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.6 MB). Free memory was 870.8 MB in the beginning and 767.8 MB in the end (delta: 103.0 MB). Peak memory consumption was 170.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.60 ms. Allocated memory is still 1.1 GB. Free memory was 767.8 MB in the beginning and 754.6 MB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3190.51 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 448.3 MB). Free memory was 754.6 MB in the beginning and 832.2 MB in the end (delta: -77.6 MB). Peak memory consumption was 370.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 342.02 ms. Allocated memory is still 1.5 GB. Free memory was 832.2 MB in the beginning and 676.8 MB in the end (delta: 155.4 MB). Peak memory consumption was 155.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 11395.01 ms. Allocated memory was 1.5 GB in the beginning and 3.0 GB in the end (delta: 1.5 GB). Free memory was 676.8 MB in the beginning and 1.4 GB in the end (delta: -727.5 MB). Peak memory consumption was 742.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4605 locations, 6368 edges
  - StatisticsResult: BuchiProgram size
    11434 locations, 20718 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 14 terminating modules (14 trivial, 0 deterministic, 0 nondeterministic). 14 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 11.3s and 15 iterations.  TraceHistogramMax:8. Analysis of lassos took 2.5s. Construction of modules took 4.8s. BÃ¼chi inclusion checks took 2.0s. Highest rank in rank-based complementation 0. Minimization of det autom 14. Minimization of nondet autom 0. Automata minimization 0.8s AutomataMinimizationTime, 13 MinimizatonAttempts, 2123 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.5s Buchi closure took 0.0s. Biggest automaton had 9199 states and ocurred in iteration 13.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 115109 SDtfs, 48567 SDslu, 463964 SDs, 0 SdLazy, 37808 SolverSat, 6344 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU14 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_allowance_HxERC200) ==> ( <>(success_allowance_HxERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
