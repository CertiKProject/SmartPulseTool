This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:03:12,726 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:03:12,728 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:03:12,739 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:03:12,739 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:03:12,739 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:03:12,740 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:03:12,742 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:03:12,743 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:03:12,744 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:03:12,745 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:03:12,745 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:03:12,746 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:03:12,746 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:03:12,747 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:03:12,748 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:03:12,748 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:03:12,750 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:03:12,751 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:03:12,752 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:03:12,753 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:03:12,754 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:03:12,756 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:03:12,756 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:03:12,756 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:03:12,757 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:03:12,757 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:03:12,758 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:03:12,758 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:03:12,758 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:03:12,759 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:03:12,759 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:03:12,760 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:03:12,760 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:03:12,761 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:03:12,761 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:03:12,762 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:03:12,762 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:03:12,762 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:03:12,763 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:03:12,763 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:03:12,763 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:03:12,771 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:03:12,771 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:03:12,772 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:03:12,773 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:03:12,773 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:03:12,773 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:03:12,773 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:03:12,773 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:03:12,773 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:03:12,774 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:03:12,774 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:03:12,774 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:03:12,775 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:03:12,775 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:03:12,798 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:03:12,811 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:03:12,813 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:03:12,814 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:03:12,815 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:03:12,815 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl
[2020-11-24 20:03:12,816 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl'
[2020-11-24 20:03:12,911 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:03:12,912 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:03:12,913 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:03:12,913 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:03:12,913 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:03:12,930 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:12,932 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:12,973 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:12,974 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:13,004 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:13,024 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:13,035 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:13,047 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:03:13,048 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:03:13,048 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:03:13,050 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:03:13,054 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/1) ...
[2020-11-24 20:03:13,073 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:03:13,079 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:03:13,086 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:03:13,094 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s726 && value_s726<=_balances_ERC20[this][msg.sender] ) && value_s726>=0 ) && value_s726<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s726]>=0 ) && _balances_ERC20[this][to_s726]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:03:13,097 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-24 20:03:13,102 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:03:13,102 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:03:13,115 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:03:13 PropertyContainer
[2020-11-24 20:03:13,115 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:03:13,115 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:03:13,116 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:03:13,116 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:03:13,116 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/2) ...
[2020-11-24 20:03:13,117 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:03:13,117 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:03:13,136 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:03:13" (2/2) ...
[2020-11-24 20:03:13,137 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:03:13,137 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:03:13,137 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:03:13,137 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:03:13,138 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/2) ...
[2020-11-24 20:03:13,193 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:03:13,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,194 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:03:13,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:03:13,195 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:03:13,196 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:03:13,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:03:13,196 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:03:13,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:03:13,196 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:03:13,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:03:13,196 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:03:13,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:03:13,196 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:03:13,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:03:13,197 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:03:13,197 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:03:13,197 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:03:13,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:03:13,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:03:13,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:03:13,198 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:03:13,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:03:13,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:03:13,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:03:13,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:03:13,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:03:13,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:03:13,199 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:03:13,200 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:03:13,200 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken
[2020-11-24 20:03:13,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:03:13,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KardiachainToken
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:03:13,203 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:03:13,204 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:03:13,205 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:03:13,206 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:03:13,207 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:03:13,208 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,209 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__success
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__fail
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__success
[2020-11-24 20:03:13,210 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__success
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:03:13,211 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:03:13,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:03:13,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:03:13,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:03:13,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:03:13,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:03:13,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:03:13,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:03:13,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:03:13,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__fail
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__success
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__fail
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__success
[2020-11-24 20:03:13,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__fail
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__success
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:03:13,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:03:13,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KardiachainToken
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:03:13,222 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:03:13,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:03:13,829 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:03:13,829 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:03:13,829 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:03:14,163 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:03:14,164 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-24 20:03:14,166 INFO  L202        PluginConnector]: Adding new model KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:03:14 BoogieIcfgContainer
[2020-11-24 20:03:14,166 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:03:13" (2/2) ...
[2020-11-24 20:03:14,166 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:03:14,167 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6b8fb8bf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:03:14, skipping insertion in model container
[2020-11-24 20:03:14,167 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:03:14,167 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:03:14,167 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:03:14,169 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:03:14,169 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/3) ...
[2020-11-24 20:03:14,169 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6f8d1ef1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:03:14, skipping insertion in model container
[2020-11-24 20:03:14,170 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:03:13" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:03:14,211 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:03:14 NWAContainer
[2020-11-24 20:03:14,211 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:03:14,211 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:03:14,211 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:03:14,212 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:03:14,213 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:03:14" (3/4) ...
[2020-11-24 20:03:14,214 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@40f91d5c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:03:14, skipping insertion in model container
[2020-11-24 20:03:14,214 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:03:14" (4/4) ...
[2020-11-24 20:03:14,217 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:03:14,222 INFO  L110   BuchiProductObserver]: Initial RCFG 2374 locations, 3408 edges
[2020-11-24 20:03:14,222 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:03:14,234 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:03:16,079 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:03:16,090 INFO  L110   BuchiProductObserver]: BuchiProgram size 6096 locations, 11198 edges
[2020-11-24 20:03:16,090 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:03:16 BoogieIcfgContainer
[2020-11-24 20:03:16,091 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:03:16,091 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:03:16,091 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:03:16,093 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:03:16,093 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:03:16" (1/1) ...
[2020-11-24 20:03:16,213 INFO  L313           BlockEncoder]: Initial Icfg 6096 locations, 11198 edges
[2020-11-24 20:03:16,213 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:03:16,213 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:03:16,213 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:03:16,214 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:03:16,227 INFO  L70    emoveInfeasibleEdges]: Removed 174 edges and 17 locations because of local infeasibility
[2020-11-24 20:03:16,239 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-24 20:03:16,251 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:03:16,254 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:03:16,258 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:03:16,258 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:03:16,261 INFO  L313           BlockEncoder]: Encoded RCFG 5980 locations, 10876 edges
[2020-11-24 20:03:16,262 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:03:16 BasicIcfg
[2020-11-24 20:03:16,262 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:03:16,262 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:03:16,262 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:03:16,264 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:03:16,264 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:03:16,264 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:03:12" (1/6) ...
[2020-11-24 20:03:16,265 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3489aae4 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:03:16, skipping insertion in model container
[2020-11-24 20:03:16,265 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:03:16,265 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:03:13" (2/6) ...
[2020-11-24 20:03:16,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3489aae4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:03:16, skipping insertion in model container
[2020-11-24 20:03:16,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:03:16,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:03:14" (3/6) ...
[2020-11-24 20:03:16,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3489aae4 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:03:16, skipping insertion in model container
[2020-11-24 20:03:16,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:03:16,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:03:14" (4/6) ...
[2020-11-24 20:03:16,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3489aae4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:03:16, skipping insertion in model container
[2020-11-24 20:03:16,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:03:16,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:03:16" (5/6) ...
[2020-11-24 20:03:16,267 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3489aae4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:03:16, skipping insertion in model container
[2020-11-24 20:03:16,267 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:03:16,267 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:03:16" (6/6) ...
[2020-11-24 20:03:16,268 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self.bpl_BEv2
[2020-11-24 20:03:16,298 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:03:16,298 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:03:16,298 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:03:16,298 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:03:16,298 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:03:16,298 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:03:16,298 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:03:16,298 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:03:16,298 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:03:16,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5980 states.
[2020-11-24 20:03:16,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:16,393 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:16,393 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:16,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:16,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:16,400 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:03:16,400 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5980 states.
[2020-11-24 20:03:16,423 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:16,424 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:16,424 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:16,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:16,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND TRUE   revert
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:16,439 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:16,439 INFO  L82        PathProgramCache]: Analyzing trace with hash -1796698780, now seen corresponding path program 1 times
[2020-11-24 20:03:16,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:16,463 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:16,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:03:16,503 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:16,503 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:03:16,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:16,853 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:03:16,854 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:03:16,855 INFO  L87              Difference]: Start difference. First operand 5980 states. Second operand 3 states.
[2020-11-24 20:03:17,147 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:17,147 INFO  L93              Difference]: Finished difference Result 3722 states and 4455 transitions.
[2020-11-24 20:03:17,147 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:03:17,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3722 states and 4455 transitions.
[2020-11-24 20:03:17,169 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:17,194 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3722 states to 3722 states and 4455 transitions.
[2020-11-24 20:03:17,195 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:03:17,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 894
[2020-11-24 20:03:17,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3722 states and 4455 transitions.
[2020-11-24 20:03:17,208 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:17,208 INFO  L728         BuchiCegarLoop]: Abstraction has 3722 states and 4455 transitions.
[2020-11-24 20:03:17,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3722 states and 4455 transitions.
[2020-11-24 20:03:17,286 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3722 to 3722.
[2020-11-24 20:03:17,286 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3722 states.
[2020-11-24 20:03:17,293 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3722 states to 3722 states and 4455 transitions.
[2020-11-24 20:03:17,294 INFO  L751         BuchiCegarLoop]: Abstraction has 3722 states and 4455 transitions.
[2020-11-24 20:03:17,294 INFO  L631         BuchiCegarLoop]: Abstraction has 3722 states and 4455 transitions.
[2020-11-24 20:03:17,294 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:03:17,294 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3722 states and 4455 transitions.
[2020-11-24 20:03:17,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:17,303 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:17,303 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:17,304 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:17,305 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND TRUE   revert
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:17,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:17,308 INFO  L82        PathProgramCache]: Analyzing trace with hash 1451799014, now seen corresponding path program 1 times
[2020-11-24 20:03:17,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:17,320 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:17,340 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:03:17,340 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:17,340 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:03:17,341 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:17,341 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:03:17,341 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:03:17,341 INFO  L87              Difference]: Start difference. First operand 3722 states and 4455 transitions. cyclomatic complexity: 735 Second operand 3 states.
[2020-11-24 20:03:17,442 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:17,442 INFO  L93              Difference]: Finished difference Result 4968 states and 5967 transitions.
[2020-11-24 20:03:17,442 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:03:17,443 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4968 states and 5967 transitions.
[2020-11-24 20:03:17,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:03:17,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4968 states to 4968 states and 5967 transitions.
[2020-11-24 20:03:17,484 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1267
[2020-11-24 20:03:17,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1267
[2020-11-24 20:03:17,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4968 states and 5967 transitions.
[2020-11-24 20:03:17,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:17,493 INFO  L728         BuchiCegarLoop]: Abstraction has 4968 states and 5967 transitions.
[2020-11-24 20:03:17,497 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4968 states and 5967 transitions.
[2020-11-24 20:03:17,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4968 to 4290.
[2020-11-24 20:03:17,539 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4290 states.
[2020-11-24 20:03:17,544 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4290 states to 4290 states and 5139 transitions.
[2020-11-24 20:03:17,544 INFO  L751         BuchiCegarLoop]: Abstraction has 4290 states and 5139 transitions.
[2020-11-24 20:03:17,544 INFO  L631         BuchiCegarLoop]: Abstraction has 4290 states and 5139 transitions.
[2020-11-24 20:03:17,544 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:03:17,544 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4290 states and 5139 transitions.
[2020-11-24 20:03:17,550 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:17,550 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:17,550 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:17,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:17,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND TRUE   !(account_s453 != null)
[L3393]              revert := true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND TRUE   revert
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:17,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:17,557 INFO  L82        PathProgramCache]: Analyzing trace with hash -953364383, now seen corresponding path program 1 times
[2020-11-24 20:03:17,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:17,572 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:17,645 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-24 20:03:17,645 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:03:17,646 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 20:03:17,646 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:17,646 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:03:17,646 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:03:17,646 INFO  L87              Difference]: Start difference. First operand 4290 states and 5139 transitions. cyclomatic complexity: 851 Second operand 7 states.
[2020-11-24 20:03:17,702 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:17,702 INFO  L93              Difference]: Finished difference Result 4298 states and 5146 transitions.
[2020-11-24 20:03:17,702 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:03:17,703 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4298 states and 5146 transitions.
[2020-11-24 20:03:17,715 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:17,730 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4298 states to 4289 states and 5137 transitions.
[2020-11-24 20:03:17,730 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1082
[2020-11-24 20:03:17,731 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1082
[2020-11-24 20:03:17,731 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4289 states and 5137 transitions.
[2020-11-24 20:03:17,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:17,741 INFO  L728         BuchiCegarLoop]: Abstraction has 4289 states and 5137 transitions.
[2020-11-24 20:03:17,750 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4289 states and 5137 transitions.
[2020-11-24 20:03:17,808 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4289 to 4289.
[2020-11-24 20:03:17,809 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4289 states.
[2020-11-24 20:03:17,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4289 states to 4289 states and 5137 transitions.
[2020-11-24 20:03:17,817 INFO  L751         BuchiCegarLoop]: Abstraction has 4289 states and 5137 transitions.
[2020-11-24 20:03:17,817 INFO  L631         BuchiCegarLoop]: Abstraction has 4289 states and 5137 transitions.
[2020-11-24 20:03:17,817 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:03:17,817 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4289 states and 5137 transitions.
[2020-11-24 20:03:17,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:17,824 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:17,824 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:17,827 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:17,827 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND TRUE   !(c_s26 >= a_s26)
[L2790]              revert := true;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND TRUE   revert
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND TRUE   revert
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:17,833 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:17,833 INFO  L82        PathProgramCache]: Analyzing trace with hash 543717548, now seen corresponding path program 1 times
[2020-11-24 20:03:17,834 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:17,849 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:17,921 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-11-24 20:03:17,922 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:17,922 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:03:17,922 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:17,923 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:03:17,923 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:03:17,923 INFO  L87              Difference]: Start difference. First operand 4289 states and 5137 transitions. cyclomatic complexity: 850 Second operand 3 states.
[2020-11-24 20:03:18,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:18,024 INFO  L93              Difference]: Finished difference Result 4967 states and 5719 transitions.
[2020-11-24 20:03:18,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:03:18,025 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4967 states and 5719 transitions.
[2020-11-24 20:03:18,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:03:18,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4967 states to 4556 states and 5223 transitions.
[2020-11-24 20:03:18,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1129
[2020-11-24 20:03:18,059 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1178
[2020-11-24 20:03:18,059 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4556 states and 5223 transitions.
[2020-11-24 20:03:18,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:18,063 INFO  L728         BuchiCegarLoop]: Abstraction has 4556 states and 5223 transitions.
[2020-11-24 20:03:18,067 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4556 states and 5223 transitions.
[2020-11-24 20:03:18,096 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4556 to 3970.
[2020-11-24 20:03:18,096 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3970 states.
[2020-11-24 20:03:18,100 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3970 states to 3970 states and 4487 transitions.
[2020-11-24 20:03:18,101 INFO  L751         BuchiCegarLoop]: Abstraction has 3970 states and 4487 transitions.
[2020-11-24 20:03:18,101 INFO  L631         BuchiCegarLoop]: Abstraction has 3970 states and 4487 transitions.
[2020-11-24 20:03:18,101 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:03:18,101 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3970 states and 4487 transitions.
[2020-11-24 20:03:18,106 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:18,106 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:18,106 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:18,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:18,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:18,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:18,112 INFO  L82        PathProgramCache]: Analyzing trace with hash -191876973, now seen corresponding path program 1 times
[2020-11-24 20:03:18,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:18,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:18,209 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:03:18,210 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:18,210 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 20:03:18,210 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:18,210 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:03:18,210 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:03:18,210 INFO  L87              Difference]: Start difference. First operand 3970 states and 4487 transitions. cyclomatic complexity: 519 Second operand 14 states.
[2020-11-24 20:03:21,615 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:21,615 INFO  L93              Difference]: Finished difference Result 6324 states and 7206 transitions.
[2020-11-24 20:03:21,615 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:03:21,615 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6324 states and 7206 transitions.
[2020-11-24 20:03:21,628 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 20:03:21,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6324 states to 6321 states and 7203 transitions.
[2020-11-24 20:03:21,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1631
[2020-11-24 20:03:21,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1631
[2020-11-24 20:03:21,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6321 states and 7203 transitions.
[2020-11-24 20:03:21,652 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:21,652 INFO  L728         BuchiCegarLoop]: Abstraction has 6321 states and 7203 transitions.
[2020-11-24 20:03:21,656 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6321 states and 7203 transitions.
[2020-11-24 20:03:21,700 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6321 to 5640.
[2020-11-24 20:03:21,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5640 states.
[2020-11-24 20:03:21,708 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5640 states to 5640 states and 6500 transitions.
[2020-11-24 20:03:21,708 INFO  L751         BuchiCegarLoop]: Abstraction has 5640 states and 6500 transitions.
[2020-11-24 20:03:21,708 INFO  L631         BuchiCegarLoop]: Abstraction has 5640 states and 6500 transitions.
[2020-11-24 20:03:21,708 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:03:21,708 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5640 states and 6500 transitions.
[2020-11-24 20:03:21,716 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:03:21,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:21,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:21,718 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:21,718 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND TRUE   __exception
[L1608]              __tmp__Balance := Balance;
[L1609]              __tmp__DType := DType;
[L1610]              __tmp__Alloc := Alloc;
[L1611]              __tmp__balance_ADDR := balance_ADDR;
[L1612]              __tmp__M_Ref_int := M_Ref_int;
[L1613]              __tmp__sum__balances0 := sum__balances0;
[L1614]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1615]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1616]              __tmp__sum__allowances1 := sum__allowances1;
[L1617]              __tmp__Length := Length;
[L1618]              __tmp__now := now;
[L1619]              __tmp___balances_ERC20 := _balances_ERC20;
[L1620]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1621]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1622]              __tmp___owner_Ownable := _owner_Ownable;
[L1623]              __tmp__paused_Pausable := paused_Pausable;
[L1624]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1625]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1626]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1627]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1628]  CALL        call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L4150]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2933]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L2933]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  COND FALSE  !(revert)
[L2937]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2908]              assume msgsender_MSG != null;
[L2909]              __tmp__Balance[this] := 0;
[L2910]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2911]              __tmp__sum__balances0[this] := 0;
[L2912]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2913]              __tmp__sum__allowances1[this] := 0;
[L2914]              __tmp___totalSupply_ERC20[this] := 0;
[L2937]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2938]  COND FALSE  !(revert)
[L4154]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L4158]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L4162]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3701]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3701]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3684]              assume msgsender_MSG != null;
[L3685]              __tmp__Balance[this] := 0;
[L3686]              __tmp__paused_Pausable[this] := false;
[L3705]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L4162]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4163]  COND FALSE  !(revert)
[L4166]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3807]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L3807]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3808]  COND FALSE  !(revert)
[L3811]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2933]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L2933]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  COND FALSE  !(revert)
[L2937]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2908]              assume msgsender_MSG != null;
[L2909]              __tmp__Balance[this] := 0;
[L2910]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2911]              __tmp__sum__balances0[this] := 0;
[L2912]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2913]              __tmp__sum__allowances1[this] := 0;
[L2914]              __tmp___totalSupply_ERC20[this] := 0;
[L2937]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2938]  COND FALSE  !(revert)
[L3811]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3812]  COND FALSE  !(revert)
[L3815]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3815]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3816]  COND FALSE  !(revert)
[L3819]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3701]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3701]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3684]              assume msgsender_MSG != null;
[L3685]              __tmp__Balance[this] := 0;
[L3686]              __tmp__paused_Pausable[this] := false;
[L3705]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3819]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3820]  COND FALSE  !(revert)
[L3823]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3792]              assume msgsender_MSG != null;
[L3793]              __tmp__Balance[this] := 0;
[L3823]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3824]  COND FALSE  !(revert)
[L4166]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4167]  COND FALSE  !(revert)
[L4170]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4107]              assume msgsender_MSG != null;
[L4108]              __tmp__Balance[this] := 0;
[L4109]              __tmp__name_KardiachainToken[this] := -505187484;
[L4110]              __tmp__symbol_KardiachainToken[this] := 1585535741;
[L4111]              __tmp__decimals_KardiachainToken[this] := 18;
[L4112]              __var_29 := __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4113]              __tmp__initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4115]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L4116]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L3367]              __var_8 := null;
[L3368]  COND FALSE  !(!(account_s453 != null))
[L3372]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND FALSE  !(!(c_s26 >= a_s26))
[L2781]              __ret_0_ := c_s26;
[L3372]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L3373]  COND FALSE  !(revert)
[L3376]              __tmp___totalSupply_ERC20[this] := __var_9;
[L3377]  CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND FALSE  !(!(c_s26 >= a_s26))
[L2781]              __ret_0_ := c_s26;
[L3377]  RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L3378]  COND FALSE  !(revert)
[L3381]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s453];
[L3382]              __tmp___balances_ERC20[this][account_s453] := __var_10;
[L3383]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s453];
[L4116]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L4117]  COND FALSE  !(revert)
[L4170]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4171]  COND FALSE  !(revert)
[L1628]  RET         call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1629]              assume revert || gas < 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND FALSE  !(__tmp__DType[this] == KardiachainToken)
[L3866]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3867]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND TRUE   !(sender_s410 != null)
[L3305]              revert := true;
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3867]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3868]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:21,722 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:21,723 INFO  L82        PathProgramCache]: Analyzing trace with hash 1253087242, now seen corresponding path program 1 times
[2020-11-24 20:03:21,723 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:21,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:21,786 INFO  L134       CoverageAnalysis]: Checked inductivity of 171 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:03:21,786 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:21,786 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:03:21,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:21,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:03:21,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:03:21,787 INFO  L87              Difference]: Start difference. First operand 5640 states and 6500 transitions. cyclomatic complexity: 864 Second operand 4 states.
[2020-11-24 20:03:22,310 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:22,311 INFO  L93              Difference]: Finished difference Result 6934 states and 8316 transitions.
[2020-11-24 20:03:22,311 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:03:22,311 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6934 states and 8316 transitions.
[2020-11-24 20:03:22,329 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 24
[2020-11-24 20:03:22,351 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6934 states to 6720 states and 8096 transitions.
[2020-11-24 20:03:22,351 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1743
[2020-11-24 20:03:22,352 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1743
[2020-11-24 20:03:22,352 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6720 states and 8096 transitions.
[2020-11-24 20:03:22,358 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:22,358 INFO  L728         BuchiCegarLoop]: Abstraction has 6720 states and 8096 transitions.
[2020-11-24 20:03:22,361 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6720 states and 8096 transitions.
[2020-11-24 20:03:22,409 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6720 to 6120.
[2020-11-24 20:03:22,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6120 states.
[2020-11-24 20:03:22,417 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6120 states to 6120 states and 7227 transitions.
[2020-11-24 20:03:22,418 INFO  L751         BuchiCegarLoop]: Abstraction has 6120 states and 7227 transitions.
[2020-11-24 20:03:22,418 INFO  L631         BuchiCegarLoop]: Abstraction has 6120 states and 7227 transitions.
[2020-11-24 20:03:22,418 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:03:22,418 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6120 states and 7227 transitions.
[2020-11-24 20:03:22,425 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:03:22,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:22,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:22,426 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:22,426 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND TRUE   !(sender_s410 != null)
[L3305]              revert := true;
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND TRUE   !(sender_s410 != null)
[L3305]              revert := true;
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:22,430 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:22,430 INFO  L82        PathProgramCache]: Analyzing trace with hash 2033540011, now seen corresponding path program 1 times
[2020-11-24 20:03:22,431 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:22,442 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:22,521 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:03:22,521 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:22,521 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:03:22,521 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:22,521 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:03:22,522 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:03:22,522 INFO  L87              Difference]: Start difference. First operand 6120 states and 7227 transitions. cyclomatic complexity: 1111 Second operand 7 states.
[2020-11-24 20:03:22,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:22,578 INFO  L93              Difference]: Finished difference Result 6160 states and 7277 transitions.
[2020-11-24 20:03:22,578 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:03:22,578 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6160 states and 7277 transitions.
[2020-11-24 20:03:22,591 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:03:22,606 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6160 states to 6124 states and 7235 transitions.
[2020-11-24 20:03:22,606 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1635
[2020-11-24 20:03:22,607 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1635
[2020-11-24 20:03:22,607 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6124 states and 7235 transitions.
[2020-11-24 20:03:22,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:22,611 INFO  L728         BuchiCegarLoop]: Abstraction has 6124 states and 7235 transitions.
[2020-11-24 20:03:22,615 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6124 states and 7235 transitions.
[2020-11-24 20:03:22,659 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6124 to 6124.
[2020-11-24 20:03:22,660 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6124 states.
[2020-11-24 20:03:22,667 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6124 states to 6124 states and 7235 transitions.
[2020-11-24 20:03:22,667 INFO  L751         BuchiCegarLoop]: Abstraction has 6124 states and 7235 transitions.
[2020-11-24 20:03:22,667 INFO  L631         BuchiCegarLoop]: Abstraction has 6124 states and 7235 transitions.
[2020-11-24 20:03:22,667 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:03:22,667 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6124 states and 7235 transitions.
[2020-11-24 20:03:22,673 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:03:22,673 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:22,674 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:22,675 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:22,675 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND TRUE   !(recipient_s410 != null)
[L3310]              revert := true;
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND TRUE   !(recipient_s410 != null)
[L3310]              revert := true;
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:22,678 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:22,678 INFO  L82        PathProgramCache]: Analyzing trace with hash 403332152, now seen corresponding path program 1 times
[2020-11-24 20:03:22,679 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:22,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:22,742 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:03:22,743 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:22,743 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 20:03:22,743 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:22,743 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 20:03:22,743 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-24 20:03:22,743 INFO  L87              Difference]: Start difference. First operand 6124 states and 7235 transitions. cyclomatic complexity: 1115 Second operand 8 states.
[2020-11-24 20:03:22,804 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:22,804 INFO  L93              Difference]: Finished difference Result 6282 states and 7427 transitions.
[2020-11-24 20:03:22,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:03:22,805 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6282 states and 7427 transitions.
[2020-11-24 20:03:22,818 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:03:22,832 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6282 states to 6274 states and 7419 transitions.
[2020-11-24 20:03:22,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1679
[2020-11-24 20:03:22,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1679
[2020-11-24 20:03:22,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6274 states and 7419 transitions.
[2020-11-24 20:03:22,838 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:22,838 INFO  L728         BuchiCegarLoop]: Abstraction has 6274 states and 7419 transitions.
[2020-11-24 20:03:22,842 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6274 states and 7419 transitions.
[2020-11-24 20:03:22,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6274 to 6242.
[2020-11-24 20:03:22,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6242 states.
[2020-11-24 20:03:22,886 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6242 states to 6242 states and 7380 transitions.
[2020-11-24 20:03:22,886 INFO  L751         BuchiCegarLoop]: Abstraction has 6242 states and 7380 transitions.
[2020-11-24 20:03:22,886 INFO  L631         BuchiCegarLoop]: Abstraction has 6242 states and 7380 transitions.
[2020-11-24 20:03:22,886 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:03:22,886 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6242 states and 7380 transitions.
[2020-11-24 20:03:22,892 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:03:22,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:22,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:22,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:22,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND TRUE   !(b_s47 <= a_s47)
[L2800]              revert := true;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND TRUE   revert
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND TRUE   !(b_s47 <= a_s47)
[L2800]              revert := true;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND TRUE   revert
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:22,897 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:22,897 INFO  L82        PathProgramCache]: Analyzing trace with hash 1328309542, now seen corresponding path program 1 times
[2020-11-24 20:03:22,898 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:22,909 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:23,012 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:03:23,012 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:23,012 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 20:03:23,012 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:23,012 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 20:03:23,012 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-24 20:03:23,013 INFO  L87              Difference]: Start difference. First operand 6242 states and 7380 transitions. cyclomatic complexity: 1142 Second operand 9 states.
[2020-11-24 20:03:24,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:24,418 INFO  L93              Difference]: Finished difference Result 6364 states and 7606 transitions.
[2020-11-24 20:03:24,418 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 20:03:24,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6364 states and 7606 transitions.
[2020-11-24 20:03:24,433 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-24 20:03:24,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6364 states to 6364 states and 7606 transitions.
[2020-11-24 20:03:24,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1734
[2020-11-24 20:03:24,450 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1734
[2020-11-24 20:03:24,451 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6364 states and 7606 transitions.
[2020-11-24 20:03:24,458 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:24,458 INFO  L728         BuchiCegarLoop]: Abstraction has 6364 states and 7606 transitions.
[2020-11-24 20:03:24,464 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6364 states and 7606 transitions.
[2020-11-24 20:03:24,501 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6364 to 5964.
[2020-11-24 20:03:24,501 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5964 states.
[2020-11-24 20:03:24,509 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5964 states to 5964 states and 6981 transitions.
[2020-11-24 20:03:24,509 INFO  L751         BuchiCegarLoop]: Abstraction has 5964 states and 6981 transitions.
[2020-11-24 20:03:24,509 INFO  L631         BuchiCegarLoop]: Abstraction has 5964 states and 6981 transitions.
[2020-11-24 20:03:24,509 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:03:24,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5964 states and 6981 transitions.
[2020-11-24 20:03:24,515 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:03:24,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:24,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:24,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:24,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND TRUE   DType[this] == KardiachainToken
[L3887]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3887]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3888]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND TRUE   DType[this] == KardiachainToken
[L3887]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3887]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3888]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:24,520 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:24,520 INFO  L82        PathProgramCache]: Analyzing trace with hash -407086042, now seen corresponding path program 1 times
[2020-11-24 20:03:24,520 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:24,587 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:25,286 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 66 DAG size of output: 44
[2020-11-24 20:03:26,906 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 163 trivial. 0 not checked.
[2020-11-24 20:03:26,906 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:26,907 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [40] imperfect sequences [] total 40
[2020-11-24 20:03:26,908 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:26,908 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-24 20:03:26,908 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1521, Unknown=0, NotChecked=0, Total=1640
[2020-11-24 20:03:26,909 INFO  L87              Difference]: Start difference. First operand 5964 states and 6981 transitions. cyclomatic complexity: 1021 Second operand 41 states.
[2020-11-24 20:03:40,408 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:40,408 INFO  L93              Difference]: Finished difference Result 6058 states and 7182 transitions.
[2020-11-24 20:03:40,409 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-24 20:03:40,409 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6058 states and 7182 transitions.
[2020-11-24 20:03:40,421 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:03:40,436 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6058 states to 6058 states and 7182 transitions.
[2020-11-24 20:03:40,436 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1716
[2020-11-24 20:03:40,437 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1716
[2020-11-24 20:03:40,437 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6058 states and 7182 transitions.
[2020-11-24 20:03:40,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:40,440 INFO  L728         BuchiCegarLoop]: Abstraction has 6058 states and 7182 transitions.
[2020-11-24 20:03:40,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6058 states and 7182 transitions.
[2020-11-24 20:03:40,482 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6058 to 5856.
[2020-11-24 20:03:40,482 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5856 states.
[2020-11-24 20:03:40,490 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5856 states to 5856 states and 6868 transitions.
[2020-11-24 20:03:40,490 INFO  L751         BuchiCegarLoop]: Abstraction has 5856 states and 6868 transitions.
[2020-11-24 20:03:40,490 INFO  L631         BuchiCegarLoop]: Abstraction has 5856 states and 6868 transitions.
[2020-11-24 20:03:40,490 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:03:40,490 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5856 states and 6868 transitions.
[2020-11-24 20:03:40,496 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-24 20:03:40,496 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:40,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:40,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:40,498 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND FALSE  !(__tmp__DType[this] == KardiachainToken)
[L3866]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3867]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND FALSE  !(!(b_s47 <= a_s47))
[L2803]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND FALSE  !(revert)
[L3317]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s410];
[L3318]              __tmp___balances_ERC20[this][sender_s410] := __var_6;
[L3319]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s410];
[L3320]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND TRUE   !(c_s26 >= a_s26)
[L2778]              revert := true;
[L3320]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L3321]  COND TRUE   revert
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3867]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3868]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:40,500 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:40,500 INFO  L82        PathProgramCache]: Analyzing trace with hash -1192989217, now seen corresponding path program 1 times
[2020-11-24 20:03:40,501 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:40,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:40,564 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:03:40,564 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:40,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:03:40,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:40,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:03:40,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:03:40,565 INFO  L87              Difference]: Start difference. First operand 5856 states and 6868 transitions. cyclomatic complexity: 1020 Second operand 4 states.
[2020-11-24 20:03:40,607 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:40,608 INFO  L93              Difference]: Finished difference Result 5880 states and 6894 transitions.
[2020-11-24 20:03:40,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:03:40,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5880 states and 6894 transitions.
[2020-11-24 20:03:40,619 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-24 20:03:40,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5880 states to 5880 states and 6894 transitions.
[2020-11-24 20:03:40,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1632
[2020-11-24 20:03:40,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1632
[2020-11-24 20:03:40,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5880 states and 6894 transitions.
[2020-11-24 20:03:40,636 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:40,636 INFO  L728         BuchiCegarLoop]: Abstraction has 5880 states and 6894 transitions.
[2020-11-24 20:03:40,639 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5880 states and 6894 transitions.
[2020-11-24 20:03:40,672 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5880 to 5870.
[2020-11-24 20:03:40,672 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5870 states.
[2020-11-24 20:03:40,680 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5870 states to 5870 states and 6882 transitions.
[2020-11-24 20:03:40,680 INFO  L751         BuchiCegarLoop]: Abstraction has 5870 states and 6882 transitions.
[2020-11-24 20:03:40,680 INFO  L631         BuchiCegarLoop]: Abstraction has 5870 states and 6882 transitions.
[2020-11-24 20:03:40,680 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:03:40,680 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5870 states and 6882 transitions.
[2020-11-24 20:03:40,687 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-24 20:03:40,687 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:40,687 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:40,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:40,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND FALSE  !(!(b_s47 <= a_s47))
[L2803]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND FALSE  !(revert)
[L3317]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s410];
[L3318]              __tmp___balances_ERC20[this][sender_s410] := __var_6;
[L3319]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s410];
[L3320]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND TRUE   !(c_s26 >= a_s26)
[L2778]              revert := true;
[L3320]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L3321]  COND TRUE   revert
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND FALSE  !(!(b_s47 <= a_s47))
[L2803]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND FALSE  !(revert)
[L3317]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s410];
[L3318]              __tmp___balances_ERC20[this][sender_s410] := __var_6;
[L3319]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s410];
[L3320]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND TRUE   !(c_s26 >= a_s26)
[L2778]              revert := true;
[L3320]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L3321]  COND TRUE   revert
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND TRUE   revert
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:40,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:40,691 INFO  L82        PathProgramCache]: Analyzing trace with hash 219369828, now seen corresponding path program 1 times
[2020-11-24 20:03:40,692 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:40,705 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:40,815 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:03:40,815 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:40,815 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:03:40,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:40,816 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:03:40,816 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:03:40,816 INFO  L87              Difference]: Start difference. First operand 5870 states and 6882 transitions. cyclomatic complexity: 1020 Second operand 14 states.
[2020-11-24 20:03:43,058 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:43,058 INFO  L93              Difference]: Finished difference Result 5942 states and 7024 transitions.
[2020-11-24 20:03:43,058 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-24 20:03:43,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5942 states and 7024 transitions.
[2020-11-24 20:03:43,071 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 28
[2020-11-24 20:03:43,085 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5942 states to 5942 states and 7024 transitions.
[2020-11-24 20:03:43,085 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1659
[2020-11-24 20:03:43,086 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1659
[2020-11-24 20:03:43,086 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5942 states and 7024 transitions.
[2020-11-24 20:03:43,089 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:43,089 INFO  L728         BuchiCegarLoop]: Abstraction has 5942 states and 7024 transitions.
[2020-11-24 20:03:43,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5942 states and 7024 transitions.
[2020-11-24 20:03:43,124 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5942 to 5838.
[2020-11-24 20:03:43,124 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5838 states.
[2020-11-24 20:03:43,131 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5838 states to 5838 states and 6838 transitions.
[2020-11-24 20:03:43,131 INFO  L751         BuchiCegarLoop]: Abstraction has 5838 states and 6838 transitions.
[2020-11-24 20:03:43,131 INFO  L631         BuchiCegarLoop]: Abstraction has 5838 states and 6838 transitions.
[2020-11-24 20:03:43,131 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:03:43,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5838 states and 6838 transitions.
[2020-11-24 20:03:43,137 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-24 20:03:43,137 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:43,137 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:43,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:43,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND FALSE  !(!(b_s47 <= a_s47))
[L2803]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND FALSE  !(revert)
[L3317]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s410];
[L3318]              __tmp___balances_ERC20[this][sender_s410] := __var_6;
[L3319]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s410];
[L3320]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND FALSE  !(!(c_s26 >= a_s26))
[L2781]              __ret_0_ := c_s26;
[L3320]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L3321]  COND FALSE  !(revert)
[L3324]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s410];
[L3325]              __tmp___balances_ERC20[this][recipient_s410] := __var_7;
[L3326]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s410];
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND FALSE  !(revert)
[L2999]              __ret_0_ := true;
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND FALSE  !(revert)
[L3874]              __ret_0_ := __var_19;
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND FALSE  !(revert)
[L3861]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3862]  CALL        call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2981]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L2982]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3303]              __var_4 := null;
[L3304]  COND FALSE  !(!(sender_s410 != null))
[L3308]              __var_5 := null;
[L3309]  COND FALSE  !(!(recipient_s410 != null))
[L3313]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L2799]  COND FALSE  !(!(b_s47 <= a_s47))
[L2803]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3313]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s410], amount_s410);
[L3314]  COND FALSE  !(revert)
[L3317]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s410];
[L3318]              __tmp___balances_ERC20[this][sender_s410] := __var_6;
[L3319]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s410];
[L3320]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND FALSE  !(!(c_s26 >= a_s26))
[L2781]              __ret_0_ := c_s26;
[L3320]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s410], amount_s410);
[L3321]  COND FALSE  !(revert)
[L3324]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s410];
[L3325]              __tmp___balances_ERC20[this][recipient_s410] := __var_7;
[L3326]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s410];
[L2982]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L2983]  COND FALSE  !(revert)
[L2999]              __ret_0_ := true;
[L3862]  RET         call __var_19 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3863]  COND FALSE  !(revert)
[L3874]              __ret_0_ := __var_19;
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:43,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:43,142 INFO  L82        PathProgramCache]: Analyzing trace with hash -2069406033, now seen corresponding path program 1 times
[2020-11-24 20:03:43,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:43,164 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:43,245 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:03:43,245 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:43,245 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:03:43,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:43,246 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:03:43,246 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:03:43,246 INFO  L87              Difference]: Start difference. First operand 5838 states and 6838 transitions. cyclomatic complexity: 1008 Second operand 5 states.
[2020-11-24 20:03:44,176 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:44,176 INFO  L93              Difference]: Finished difference Result 6991 states and 8440 transitions.
[2020-11-24 20:03:44,176 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:03:44,176 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6991 states and 8440 transitions.
[2020-11-24 20:03:44,194 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-24 20:03:44,215 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6991 states to 6177 states and 7569 transitions.
[2020-11-24 20:03:44,215 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1371
[2020-11-24 20:03:44,215 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1371
[2020-11-24 20:03:44,215 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6177 states and 7569 transitions.
[2020-11-24 20:03:44,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:44,220 INFO  L728         BuchiCegarLoop]: Abstraction has 6177 states and 7569 transitions.
[2020-11-24 20:03:44,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6177 states and 7569 transitions.
[2020-11-24 20:03:44,252 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6177 to 5129.
[2020-11-24 20:03:44,252 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5129 states.
[2020-11-24 20:03:44,258 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5129 states to 5129 states and 6032 transitions.
[2020-11-24 20:03:44,258 INFO  L751         BuchiCegarLoop]: Abstraction has 5129 states and 6032 transitions.
[2020-11-24 20:03:44,258 INFO  L631         BuchiCegarLoop]: Abstraction has 5129 states and 6032 transitions.
[2020-11-24 20:03:44,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:03:44,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5129 states and 6032 transitions.
[2020-11-24 20:03:44,263 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:03:44,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:44,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:44,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:44,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND FALSE  !(choice == 7)
[L6430]  COND FALSE  !(choice == 6)
[L6436]  COND FALSE  !(choice == 5)
[L6442]  COND FALSE  !(choice == 4)
[L6448]  COND FALSE  !(choice == 3)
[L6454]  COND TRUE   choice == 2
[L6455]              gas := gas - 21000;
[L6456]  COND TRUE   gas >= 0
[L6457]              assume amount_s850 >= 0 && amount_s850 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6458]              assume msgvalue_MSG == 0;
[L6459]  CALL        call burn~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, amount_s850);
[L1664]              havoc __exception;
[L1665]              revert := false;
[L1666]  COND FALSE  !(__exception)
[L1690]  CALL        call burn~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, amount_s850);
[L4219]  COND TRUE   DType[this] == KardiachainToken
[L4220]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s850);
[L3440]              __var_11 := null;
[L3441]  COND FALSE  !(!(account_s496 != null))
[L3445]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3445]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L3446]  COND FALSE  !(revert)
[L3449]              _totalSupply_ERC20[this] := __var_12;
[L3450]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3450]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L3451]  COND FALSE  !(revert)
[L3454]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s496];
[L3455]              _balances_ERC20[this][account_s496] := __var_13;
[L3456]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s496];
[L3457]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4220]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s850);
[L4221]  COND FALSE  !(revert)
[L1690]  RET         call burn~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, amount_s850);
[L1691]              assume !revert && gas >= 0;
[L6459]  RET         call burn~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, amount_s850);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND TRUE   DType[this] == KardiachainToken
[L3887]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3887]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3888]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:44,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:44,268 INFO  L82        PathProgramCache]: Analyzing trace with hash -168624429, now seen corresponding path program 1 times
[2020-11-24 20:03:44,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:44,324 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:44,578 INFO  L134       CoverageAnalysis]: Checked inductivity of 237 backedges. 55 proven. 0 refuted. 0 times theorem prover too weak. 182 trivial. 0 not checked.
[2020-11-24 20:03:44,578 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:44,578 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 20:03:44,578 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:44,579 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 20:03:44,579 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=263, Unknown=0, NotChecked=0, Total=306
[2020-11-24 20:03:44,579 INFO  L87              Difference]: Start difference. First operand 5129 states and 6032 transitions. cyclomatic complexity: 913 Second operand 18 states.
[2020-11-24 20:03:48,623 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:48,623 INFO  L93              Difference]: Finished difference Result 5109 states and 5977 transitions.
[2020-11-24 20:03:48,623 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:03:48,623 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5109 states and 5977 transitions.
[2020-11-24 20:03:48,633 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 20:03:48,644 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5109 states to 5097 states and 5963 transitions.
[2020-11-24 20:03:48,644 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1183
[2020-11-24 20:03:48,645 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1183
[2020-11-24 20:03:48,645 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5097 states and 5963 transitions.
[2020-11-24 20:03:48,647 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:48,647 INFO  L728         BuchiCegarLoop]: Abstraction has 5097 states and 5963 transitions.
[2020-11-24 20:03:48,650 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5097 states and 5963 transitions.
[2020-11-24 20:03:48,665 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5097 to 3215.
[2020-11-24 20:03:48,665 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3215 states.
[2020-11-24 20:03:48,668 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3215 states to 3215 states and 3656 transitions.
[2020-11-24 20:03:48,668 INFO  L751         BuchiCegarLoop]: Abstraction has 3215 states and 3656 transitions.
[2020-11-24 20:03:48,668 INFO  L631         BuchiCegarLoop]: Abstraction has 3215 states and 3656 transitions.
[2020-11-24 20:03:48,668 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:03:48,668 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3215 states and 3656 transitions.
[2020-11-24 20:03:48,671 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:48,671 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:48,671 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:48,672 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:48,672 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND TRUE   choice == 7
[L6425]              gas := gas - 21000;
[L6426]  COND TRUE   gas >= 0
[L6427]              assume msgvalue_MSG == 0;
[L6428]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1109]              havoc __exception;
[L1110]              revert := false;
[L1111]  COND FALSE  !(__exception)
[L1135]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3765]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5610]  COND TRUE   DType[this] == KardiachainToken
[L5611]  CALL        call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L5611]  RET         call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5612]  COND FALSE  !(revert)
[L5633]  COND FALSE  !(!__var_17)
[L3765]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5665]  COND FALSE  !(!paused_Pausable[this])
[L3769]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]              paused_Pausable[this] := false;
[L3774]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L1135]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1136]              assume !revert && gas >= 0;
[L6428]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:48,676 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:48,676 INFO  L82        PathProgramCache]: Analyzing trace with hash -1125065006, now seen corresponding path program 1 times
[2020-11-24 20:03:48,676 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:48,687 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:48,768 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 7 proven. 55 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:03:48,768 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:03:48,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-24 20:03:48,769 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:48,769 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:03:48,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:03:48,769 INFO  L87              Difference]: Start difference. First operand 3215 states and 3656 transitions. cyclomatic complexity: 444 Second operand 14 states.
[2020-11-24 20:03:50,219 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:50,220 INFO  L93              Difference]: Finished difference Result 3227 states and 3668 transitions.
[2020-11-24 20:03:50,220 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 20:03:50,220 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3227 states and 3668 transitions.
[2020-11-24 20:03:50,225 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:50,231 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3227 states to 3227 states and 3668 transitions.
[2020-11-24 20:03:50,231 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 720
[2020-11-24 20:03:50,232 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 720
[2020-11-24 20:03:50,232 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3227 states and 3668 transitions.
[2020-11-24 20:03:50,233 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:50,234 INFO  L728         BuchiCegarLoop]: Abstraction has 3227 states and 3668 transitions.
[2020-11-24 20:03:50,236 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3227 states and 3668 transitions.
[2020-11-24 20:03:50,247 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3227 to 3215.
[2020-11-24 20:03:50,247 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3215 states.
[2020-11-24 20:03:50,250 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3215 states to 3215 states and 3656 transitions.
[2020-11-24 20:03:50,250 INFO  L751         BuchiCegarLoop]: Abstraction has 3215 states and 3656 transitions.
[2020-11-24 20:03:50,250 INFO  L631         BuchiCegarLoop]: Abstraction has 3215 states and 3656 transitions.
[2020-11-24 20:03:50,250 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 20:03:50,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3215 states and 3656 transitions.
[2020-11-24 20:03:50,253 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:50,253 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:50,253 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:50,254 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:50,254 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND TRUE   choice == 8
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume msgvalue_MSG == 0;
[L6422]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1052]              havoc __exception;
[L1053]              revert := false;
[L1054]  COND FALSE  !(__exception)
[L1078]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3738]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5610]  COND FALSE  !(DType[this] == KardiachainToken)
[L5615]  COND TRUE   DType[this] == ERC20Pausable
[L5616]  CALL        call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L5616]  RET         call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5617]  COND FALSE  !(revert)
[L5633]  COND FALSE  !(!__var_17)
[L3738]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3739]  COND FALSE  !(revert)
[L3742]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3742]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]  COND FALSE  !(revert)
[L3746]              paused_Pausable[this] := true;
[L3747]              assert { :EventEmitted "Paused_Pausable" } true;
[L1078]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume !revert && gas >= 0;
[L6422]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:50,257 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:50,257 INFO  L82        PathProgramCache]: Analyzing trace with hash 1349590974, now seen corresponding path program 1 times
[2020-11-24 20:03:50,258 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:50,268 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:50,338 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 232 trivial. 0 not checked.
[2020-11-24 20:03:50,338 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:50,338 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:03:50,339 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:50,339 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:03:50,339 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:03:50,339 INFO  L87              Difference]: Start difference. First operand 3215 states and 3656 transitions. cyclomatic complexity: 444 Second operand 7 states.
[2020-11-24 20:03:50,406 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:50,406 INFO  L93              Difference]: Finished difference Result 3253 states and 3698 transitions.
[2020-11-24 20:03:50,406 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:03:50,406 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3253 states and 3698 transitions.
[2020-11-24 20:03:50,412 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:50,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3253 states to 3221 states and 3664 transitions.
[2020-11-24 20:03:50,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 710
[2020-11-24 20:03:50,418 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 715
[2020-11-24 20:03:50,418 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3221 states and 3664 transitions.
[2020-11-24 20:03:50,420 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:50,420 INFO  L728         BuchiCegarLoop]: Abstraction has 3221 states and 3664 transitions.
[2020-11-24 20:03:50,422 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3221 states and 3664 transitions.
[2020-11-24 20:03:50,433 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3221 to 3221.
[2020-11-24 20:03:50,433 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3221 states.
[2020-11-24 20:03:50,436 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3221 states to 3221 states and 3664 transitions.
[2020-11-24 20:03:50,436 INFO  L751         BuchiCegarLoop]: Abstraction has 3221 states and 3664 transitions.
[2020-11-24 20:03:50,436 INFO  L631         BuchiCegarLoop]: Abstraction has 3221 states and 3664 transitions.
[2020-11-24 20:03:50,436 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 20:03:50,436 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3221 states and 3664 transitions.
[2020-11-24 20:03:50,439 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:50,439 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:50,439 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:50,440 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:50,440 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND TRUE   choice == 8
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume msgvalue_MSG == 0;
[L6422]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1052]              havoc __exception;
[L1053]              revert := false;
[L1054]  COND FALSE  !(__exception)
[L1078]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3738]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5610]  COND FALSE  !(DType[this] == KardiachainToken)
[L5615]  COND FALSE  !(DType[this] == ERC20Pausable)
[L5620]  COND TRUE   DType[this] == Pausable
[L5621]  CALL        call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L5621]  RET         call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5622]  COND FALSE  !(revert)
[L5633]  COND FALSE  !(!__var_17)
[L3738]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3739]  COND FALSE  !(revert)
[L3742]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3742]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]  COND FALSE  !(revert)
[L3746]              paused_Pausable[this] := true;
[L3747]              assert { :EventEmitted "Paused_Pausable" } true;
[L1078]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume !revert && gas >= 0;
[L6422]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:50,443 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:50,444 INFO  L82        PathProgramCache]: Analyzing trace with hash 2003300825, now seen corresponding path program 1 times
[2020-11-24 20:03:50,444 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:50,454 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:03:50,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 232 trivial. 0 not checked.
[2020-11-24 20:03:50,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:03:50,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:03:50,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:03:50,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:03:50,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:03:50,527 INFO  L87              Difference]: Start difference. First operand 3221 states and 3664 transitions. cyclomatic complexity: 446 Second operand 7 states.
[2020-11-24 20:03:50,603 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:03:50,603 INFO  L93              Difference]: Finished difference Result 3259 states and 3706 transitions.
[2020-11-24 20:03:50,603 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:03:50,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3259 states and 3706 transitions.
[2020-11-24 20:03:50,608 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:50,613 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3259 states to 3227 states and 3672 transitions.
[2020-11-24 20:03:50,613 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 715
[2020-11-24 20:03:50,614 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 720
[2020-11-24 20:03:50,614 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3227 states and 3672 transitions.
[2020-11-24 20:03:50,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:03:50,615 INFO  L728         BuchiCegarLoop]: Abstraction has 3227 states and 3672 transitions.
[2020-11-24 20:03:50,617 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3227 states and 3672 transitions.
[2020-11-24 20:03:50,628 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3227 to 3221.
[2020-11-24 20:03:50,628 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3221 states.
[2020-11-24 20:03:50,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3221 states to 3221 states and 3664 transitions.
[2020-11-24 20:03:50,631 INFO  L751         BuchiCegarLoop]: Abstraction has 3221 states and 3664 transitions.
[2020-11-24 20:03:50,631 INFO  L631         BuchiCegarLoop]: Abstraction has 3221 states and 3664 transitions.
[2020-11-24 20:03:50,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 20:03:50,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3221 states and 3664 transitions.
[2020-11-24 20:03:50,634 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:03:50,634 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:03:50,634 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:03:50,635 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:03:50,635 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND TRUE   choice == 8
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume msgvalue_MSG == 0;
[L6422]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1052]              havoc __exception;
[L1053]              revert := false;
[L1054]  COND FALSE  !(__exception)
[L1078]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3738]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5610]  COND TRUE   DType[this] == KardiachainToken
[L5611]  CALL        call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L5611]  RET         call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5612]  COND FALSE  !(revert)
[L5633]  COND FALSE  !(!__var_17)
[L3738]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3739]  COND FALSE  !(revert)
[L3742]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3742]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]  COND FALSE  !(revert)
[L3746]              paused_Pausable[this] := true;
[L3747]              assert { :EventEmitted "Paused_Pausable" } true;
[L1078]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume !revert && gas >= 0;
[L6422]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND TRUE   __exception
[L1292]              __tmp__Balance := Balance;
[L1293]              __tmp__DType := DType;
[L1294]              __tmp__Alloc := Alloc;
[L1295]              __tmp__balance_ADDR := balance_ADDR;
[L1296]              __tmp__M_Ref_int := M_Ref_int;
[L1297]              __tmp__sum__balances0 := sum__balances0;
[L1298]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]              __tmp__sum__allowances1 := sum__allowances1;
[L1301]              __tmp__Length := Length;
[L1302]              __tmp__now := now;
[L1303]              __tmp___balances_ERC20 := _balances_ERC20;
[L1304]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]              __tmp___owner_Ownable := _owner_Ownable;
[L1307]              __tmp__paused_Pausable := paused_Pausable;
[L1308]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5642]              revert := true;
[L3857]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE   revert
[L1312]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]              assume revert || gas < 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:03:50,639 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:50,639 INFO  L82        PathProgramCache]: Analyzing trace with hash 842615510, now seen corresponding path program 1 times
[2020-11-24 20:03:50,639 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:50,652 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:50,665 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:50,769 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:50,769 INFO  L82        PathProgramCache]: Analyzing trace with hash 927626811, now seen corresponding path program 1 times
[2020-11-24 20:03:50,770 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:50,775 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:50,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:50,790 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:03:50,790 INFO  L82        PathProgramCache]: Analyzing trace with hash 1277870790, now seen corresponding path program 1 times
[2020-11-24 20:03:50,791 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:03:50,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:50,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
[2020-11-24 20:03:51,159 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification that was a NOOP. DAG size: 231
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
[2020-11-24 20:03:51,535 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification. DAG size of input: 240 DAG size of output: 230
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-24 20:03:51,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:03:52,585 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 238
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 20:03:52,855 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 251
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-24 20:03:52,978 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 225
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 20:03:53,656 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 240 DAG size of output: 231
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 20:03:53,846 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 297
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 20:03:55,311 WARN  L188               SmtUtils]: Spent 1.36 s on a formula simplification. DAG size of input: 614 DAG size of output: 600
Garbage collection #1: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #2: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #3: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #4: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #5: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #6: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #7: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 20:03:55,490 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification. DAG size of input: 206 DAG size of output: 203
[2020-11-24 20:03:55,644 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 304
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
[2020-11-24 20:03:55,771 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 203
[2020-11-24 20:03:56,061 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification. DAG size of input: 306 DAG size of output: 305
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 20:03:56,210 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification that was a NOOP. DAG size: 301
[2020-11-24 20:03:56,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:56,250 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:03:56,259 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:03:56 BasicIcfg
[2020-11-24 20:03:56,259 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:03:56,260 INFO  L168              Benchmark]: Toolchain (without parser) took 43347.89 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 1.2 GB in the end (delta: -286.2 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,260 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,260 INFO  L168              Benchmark]: Boogie Preprocessor took 134.67 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,260 INFO  L168              Benchmark]: UtopiaSpecLang took 67.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,261 INFO  L168              Benchmark]: Boogie Printer took 21.50 ms. Allocated memory is still 1.0 GB. Free memory is still 908.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,261 INFO  L168              Benchmark]: RCFGBuilder took 1029.81 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 908.3 MB in the beginning and 1.0 GB in the end (delta: -120.9 MB). Peak memory consumption was 196.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,261 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.90 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,261 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1879.43 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.4 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -52.2 MB). Peak memory consumption was 529.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,262 INFO  L168              Benchmark]: BlockEncodingV2 took 170.92 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 983.3 MB in the end (delta: 85.1 MB). Peak memory consumption was 85.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,262 INFO  L168              Benchmark]: BuchiAutomizer took 39997.13 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 983.3 MB in the beginning and 1.2 GB in the end (delta: -232.7 MB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-11-24 20:03:56,264 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6096 locations, 11198 edges
  - StatisticsResult: Encoded RCFG
    5980 locations, 10876 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 134.67 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.50 ms. Allocated memory is still 1.0 GB. Free memory is still 908.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 1029.81 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 908.3 MB in the beginning and 1.0 GB in the end (delta: -120.9 MB). Peak memory consumption was 196.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.90 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1879.43 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.4 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -52.2 MB). Peak memory consumption was 529.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 170.92 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 983.3 MB in the end (delta: 85.1 MB). Peak memory consumption was 85.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 39997.13 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 983.3 MB in the beginning and 1.2 GB in the end (delta: -232.7 MB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2374 locations, 3408 edges
  - StatisticsResult: BuchiProgram size
    6096 locations, 11198 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 17 terminating modules (17 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.17 modules have a trivial ranking function, the largest among these consists of 41 locations. The remainder module has 3221 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 39.9s and 18 iterations.  TraceHistogramMax:4. Analysis of lassos took 9.9s. Construction of modules took 22.6s. BÃ¼chi inclusion checks took 5.7s. Highest rank in rank-based complementation 0. Minimization of det autom 17. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 17 MinimizatonAttempts, 6241 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 6242 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 69039 SDtfs, 45991 SDslu, 207802 SDs, 0 SdLazy, 235186 SolverSat, 9120 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 22.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU17 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639953) = (new KardiachainToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639945});
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
Pausable(115792089237316195423570985008687907853269984665640564039457584007913129639953).pause.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639945});
[L1052]              havoc __exception;
[L1053]              revert := false;
[L1054]  COND FALSE  !(__exception)
[L1078]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3738]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5610]  COND TRUE   DType[this] == KardiachainToken
[L5611]  CALL        call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L5611]  RET         call __var_17 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5612]  COND FALSE  !(revert)
[L5633]  COND FALSE  !(!__var_17)
[L3738]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3739]  COND FALSE  !(revert)
[L3742]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3742]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]  COND FALSE  !(revert)
[L3746]              paused_Pausable[this] := true;
[L3747]              assert { :EventEmitted "Paused_Pausable" } true;
[L1078]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume !revert && gas >= 0;
[L6422]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(115792089237316195423570985008687907853269984665640564039457584007913129639953).transfer~address~uint256.gas(3979003)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639948, to : 115792089237316195423570985008687907853269984665640564039457584007913129639948, value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1289]             havoc __exception;
[L1290]             revert := false;
[L1291]  COND TRUE  __exception
[L1292]             __tmp__Balance := Balance;
[L1293]             __tmp__DType := DType;
[L1294]             __tmp__Alloc := Alloc;
[L1295]             __tmp__balance_ADDR := balance_ADDR;
[L1296]             __tmp__M_Ref_int := M_Ref_int;
[L1297]             __tmp__sum__balances0 := sum__balances0;
[L1298]             __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]             __tmp__sum__allowances1 := sum__allowances1;
[L1301]             __tmp__Length := Length;
[L1302]             __tmp__now := now;
[L1303]             __tmp___balances_ERC20 := _balances_ERC20;
[L1304]             __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]             __tmp___owner_Ownable := _owner_Ownable;
[L1307]             __tmp__paused_Pausable := paused_Pausable;
[L1308]             __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]             __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]             __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]             __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE  !!__tmp__paused_Pausable[this]
[L5642]             revert := true;
[L3857]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE  revert
[L1312]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]             assume revert || gas < 0;
[L6358]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);

Loop:
ERC20Pausable(115792089237316195423570985008687907853269984665640564039457584007913129639953).transfer~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639945, to : 115792089237316195423570985008687907853269984665640564039457584007913129639945, value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s726 && value_s726 <= _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1289]             havoc __exception;
[L1290]             revert := false;
[L1291]  COND TRUE  __exception
[L1292]             __tmp__Balance := Balance;
[L1293]             __tmp__DType := DType;
[L1294]             __tmp__Alloc := Alloc;
[L1295]             __tmp__balance_ADDR := balance_ADDR;
[L1296]             __tmp__M_Ref_int := M_Ref_int;
[L1297]             __tmp__sum__balances0 := sum__balances0;
[L1298]             __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1299]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1300]             __tmp__sum__allowances1 := sum__allowances1;
[L1301]             __tmp__Length := Length;
[L1302]             __tmp__now := now;
[L1303]             __tmp___balances_ERC20 := _balances_ERC20;
[L1304]             __tmp___allowances_ERC20 := _allowances_ERC20;
[L1305]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1306]             __tmp___owner_Ownable := _owner_Ownable;
[L1307]             __tmp__paused_Pausable := paused_Pausable;
[L1308]             __tmp__name_KardiachainToken := name_KardiachainToken;
[L1309]             __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1310]             __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1311]             __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1312]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3857]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5641]  COND TRUE  !!__tmp__paused_Pausable[this]
[L5642]             revert := true;
[L3857]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3858]  COND TRUE  revert
[L1312]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1313]             assume revert || gas < 0;
[L6358]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
