This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:46:05,619 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:46:05,620 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:46:05,631 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:46:05,632 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:46:05,632 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:46:05,633 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:46:05,635 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:46:05,636 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:46:05,637 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:46:05,638 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:46:05,638 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:46:05,639 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:46:05,640 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:46:05,640 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:46:05,641 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:46:05,642 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:46:05,643 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:46:05,644 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:46:05,645 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:46:05,646 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:46:05,647 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:46:05,648 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:46:05,649 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:46:05,649 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:46:05,650 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:46:05,650 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:46:05,650 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:46:05,651 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:46:05,651 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:46:05,651 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:46:05,652 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:46:05,652 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:46:05,653 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:46:05,654 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:46:05,654 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:46:05,654 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:46:05,655 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:46:05,655 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:46:05,655 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:46:05,656 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:46:05,656 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:46:05,664 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:46:05,664 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:46:05,665 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:46:05,665 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:46:05,665 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:46:05,665 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:46:05,665 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:46:05,665 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:46:05,665 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:46:05,666 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:46:05,666 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:46:05,666 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:46:05,667 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:46:05,667 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:46:05,667 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:46:05,667 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:46:05,667 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:46:05,667 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:46:05,667 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:46:05,689 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:46:05,700 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:46:05,702 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:46:05,703 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:46:05,704 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:46:05,704 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl
[2020-11-25 00:46:05,705 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl'
[2020-11-25 00:46:05,839 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:46:05,840 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:46:05,840 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:46:05,841 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:46:05,841 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:46:05,857 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:05,859 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:05,913 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:05,915 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:05,955 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:05,987 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:06,004 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:06,026 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:46:06,027 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:46:06,027 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:46:06,029 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:46:06,033 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/1) ...
[2020-11-25 00:46:06,062 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_HxERC20[this][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _balances_HxERC20[this][msg.sender] == old(_balances_HxERC20[this][msg.sender]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:46:06,068 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_HxERC20[this][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _balances_HxERC20[this][msg.sender] == old(_balances_HxERC20[this][msg.sender]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:46:06,077 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_HxERC20[this][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _balances_HxERC20[this][msg.sender] == old(_balances_HxERC20[this][msg.sender]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:46:06,088 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s1288 ) && msg.sender!=to_s1288 ) && value_s1288<=_balances_HxERC20[this][msg.sender] ) && ( _balances_HxERC20[this][to_s1288] + value_s1288 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1288]>=0 ) && _balances_HxERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][msg.sender]>=0 ) && _balances_HxERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:46:06,093 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_HxERC20[this][msg.sender]==( ( old(_balances_HxERC20[this][msg.sender]) ) - value_s1288 ) ) && _balances_HxERC20[this][to_s1288]==( ( old(_balances_HxERC20[this][to_s1288]) ) + value_s1288 ) ) && _totalSupply_HxERC20[this]==( old(_totalSupply_HxERC20[this]) ) ) && _allowed_HxERC20[this]==( old(_allowed_HxERC20[this]) ) ) && _balances_HxERC20[this][p1]==( old(_balances_HxERC20[this][p1]) ) ) && implementation_BLY[this]==( old(implementation_BLY[this]) ) ) && M_Ref_Ref[timelockList_BLY[this]]==( old(M_Ref_Ref[timelockList_BLY[this]]) ) ) && frozenAccount_BLY[this]==( old(frozenAccount_BLY[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_HxOwnable[this]==( old(owner_HxOwnable[this]) ) ) && newOwner_HxOwnable[this]==( old(newOwner_HxOwnable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BLY>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]]
[2020-11-25 00:46:06,100 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_HxERC20[this][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _balances_HxERC20[this][msg.sender] == old(_balances_HxERC20[this][msg.sender]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:46:06,100 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BLY0) ==> ( <>AP(success_transfer_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:46:06,122 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:46:06 PropertyContainer
[2020-11-25 00:46:06,122 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:46:06,122 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:46:06,122 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:46:06,122 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:46:06,123 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/2) ...
[2020-11-25 00:46:06,124 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:46:06,124 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:46:06,158 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:46:06" (2/2) ...
[2020-11-25 00:46:06,158 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:46:06,159 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:46:06,159 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:46:06,160 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:46:06,164 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/2) ...
[2020-11-25 00:46:06,221 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:46:06,221 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 00:46:06,221 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:46:06,221 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:46:06,221 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:46:06,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:46:06,222 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 00:46:06,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 00:46:06,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 00:46:06,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 00:46:06,223 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:46:06,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:46:06,224 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 00:46:06,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 00:46:06,224 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 00:46:06,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 00:46:06,224 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 00:46:06,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 00:46:06,224 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:46:06,224 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 00:46:06,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 00:46:06,225 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 00:46:06,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 00:46:06,225 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 00:46:06,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 00:46:06,225 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 00:46:06,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 00:46:06,225 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 00:46:06,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 00:46:06,225 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:46:06,225 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:46:06,226 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:46:06,226 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 00:46:06,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 00:46:06,226 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 00:46:06,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 00:46:06,226 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 00:46:06,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 00:46:06,226 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 00:46:06,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 00:46:06,226 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 00:46:06,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:46:06,227 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 00:46:06,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 00:46:06,228 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 00:46:06,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 00:46:06,228 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 00:46:06,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 00:46:06,228 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 00:46:06,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 00:46:06,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:46:06,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:46:06,228 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 00:46:06,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:46:06,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:46:06,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:46:06,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:46:06,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:46:06,230 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:46:06,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:46:06,230 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:46:06,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:46:06,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:46:06,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 00:46:06,231 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:46:06,231 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 00:46:06,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 00:46:06,232 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 00:46:06,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 00:46:06,232 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 00:46:06,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 00:46:06,232 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:46:06,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:46:06,232 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 00:46:06,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 00:46:06,232 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 00:46:06,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 00:46:06,233 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:46:06,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:46:06,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:46:06,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:46:06,233 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 00:46:06,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 00:46:06,233 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 00:46:06,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 00:46:06,233 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:46:06,233 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 00:46:06,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 00:46:06,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 00:46:06,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 00:46:06,234 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 00:46:06,235 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 00:46:06,236 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:46:06,237 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,238 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:46:06,239 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 00:46:06,240 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 00:46:06,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 00:46:06,242 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:46:06,243 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:46:06,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:46:06,245 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 00:46:06,246 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:46:06,247 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:46:06,248 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 00:46:06,249 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 00:46:06,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:46:06,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:46:06,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 00:46:06,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 00:46:06,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:46:06,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:46:06,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 00:46:06,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 00:46:06,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:46:06,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:46:06,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 00:46:06,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:46:06,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 00:46:06,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:46:06,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 00:46:06,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:46:06,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:46:06,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 00:46:06,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:46:06,265 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:46:06,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:46:06,731 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:46:06,731 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:46:06,731 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:46:07,299 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:46:07,529 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:46:07,530 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 00:46:07,532 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:46:07 BoogieIcfgContainer
[2020-11-25 00:46:07,532 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:46:06" (2/2) ...
[2020-11-25 00:46:07,532 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:46:07,533 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@a9da308 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:46:07, skipping insertion in model container
[2020-11-25 00:46:07,533 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:46:07,533 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:46:07,533 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:46:07,534 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:46:07,534 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/3) ...
[2020-11-25 00:46:07,534 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@232afbec and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:46:07, skipping insertion in model container
[2020-11-25 00:46:07,534 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:46:06" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:46:07,565 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:46:07 NWAContainer
[2020-11-25 00:46:07,565 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:46:07,566 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:46:07,566 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:46:07,566 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:46:07,567 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:46:07" (3/4) ...
[2020-11-25 00:46:07,567 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7a403ba9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:46:07, skipping insertion in model container
[2020-11-25 00:46:07,567 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:46:07" (4/4) ...
[2020-11-25 00:46:07,569 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:46:07,575 INFO  L110   BuchiProductObserver]: Initial RCFG 4606 locations, 6369 edges
[2020-11-25 00:46:07,576 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:46:07,590 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:46:10,864 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:46:10,878 INFO  L110   BuchiProductObserver]: BuchiProgram size 11436 locations, 20721 edges
[2020-11-25 00:46:10,878 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:46:10 BoogieIcfgContainer
[2020-11-25 00:46:10,878 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:46:10,879 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:46:10,879 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:46:10,880 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:46:10,880 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:46:10" (1/1) ...
[2020-11-25 00:46:11,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:46:11,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:46:11,144 INFO  L313           BlockEncoder]: Initial Icfg 11436 locations, 20721 edges
[2020-11-25 00:46:11,145 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:46:11,145 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:46:11,146 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:46:11,146 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:46:11,176 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 00:46:11,198 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 00:46:11,222 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:46:11,230 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:46:11,237 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:46:11,237 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:46:11,241 INFO  L313           BlockEncoder]: Encoded RCFG 11294 locations, 20330 edges
[2020-11-25 00:46:11,242 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:46:11 BasicIcfg
[2020-11-25 00:46:11,242 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:46:11,242 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:46:11,242 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:46:11,244 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:46:11,244 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:46:11,244 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:46:05" (1/6) ...
[2020-11-25 00:46:11,245 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26df5c8d and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:46:11, skipping insertion in model container
[2020-11-25 00:46:11,245 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:46:11,245 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:46:06" (2/6) ...
[2020-11-25 00:46:11,245 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26df5c8d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:46:11, skipping insertion in model container
[2020-11-25 00:46:11,246 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:46:11,246 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:46:07" (3/6) ...
[2020-11-25 00:46:11,246 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26df5c8d and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:46:11, skipping insertion in model container
[2020-11-25 00:46:11,246 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:46:11,246 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:46:07" (4/6) ...
[2020-11-25 00:46:11,246 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26df5c8d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:46:11, skipping insertion in model container
[2020-11-25 00:46:11,246 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:46:11,247 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:46:10" (5/6) ...
[2020-11-25 00:46:11,247 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26df5c8d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:46:11, skipping insertion in model container
[2020-11-25 00:46:11,247 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:46:11,247 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:46:11" (6/6) ...
[2020-11-25 00:46:11,248 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-normal.bpl_BEv2
[2020-11-25 00:46:11,282 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:46:11,283 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:46:11,283 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:46:11,283 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:46:11,283 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:46:11,283 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:46:11,283 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:46:11,283 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:46:11,283 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:46:11,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11294 states.
[2020-11-25 00:46:11,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:11,440 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:11,440 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:11,448 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:11,448 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:11,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:46:11,448 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11294 states.
[2020-11-25 00:46:11,497 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:11,497 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:11,497 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:11,499 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:11,499 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:11,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:11,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -1086841655, now seen corresponding path program 1 times
[2020-11-25 00:46:11,521 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:11,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:11,616 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:46:11,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:11,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:46:12,065 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:12,074 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:46:12,074 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:46:12,075 INFO  L87              Difference]: Start difference. First operand 11294 states. Second operand 3 states.
[2020-11-25 00:46:12,547 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:12,548 INFO  L93              Difference]: Finished difference Result 9730 states and 16055 transitions.
[2020-11-25 00:46:12,548 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:46:12,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9730 states and 16055 transitions.
[2020-11-25 00:46:12,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:46:12,694 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9730 states to 9730 states and 16055 transitions.
[2020-11-25 00:46:12,695 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 00:46:12,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1897
[2020-11-25 00:46:12,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9730 states and 16055 transitions.
[2020-11-25 00:46:12,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:12,732 INFO  L728         BuchiCegarLoop]: Abstraction has 9730 states and 16055 transitions.
[2020-11-25 00:46:12,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9730 states and 16055 transitions.
[2020-11-25 00:46:12,905 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9730 to 8566.
[2020-11-25 00:46:12,905 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8566 states.
[2020-11-25 00:46:12,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8566 states to 8566 states and 14052 transitions.
[2020-11-25 00:46:12,925 INFO  L751         BuchiCegarLoop]: Abstraction has 8566 states and 14052 transitions.
[2020-11-25 00:46:12,925 INFO  L631         BuchiCegarLoop]: Abstraction has 8566 states and 14052 transitions.
[2020-11-25 00:46:12,925 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:46:12,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8566 states and 14052 transitions.
[2020-11-25 00:46:12,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:12,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:12,941 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:12,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:12,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND TRUE   !(account_s164 != null)
[L5740]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:12,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:12,946 INFO  L82        PathProgramCache]: Analyzing trace with hash 71026967, now seen corresponding path program 1 times
[2020-11-25 00:46:12,948 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:12,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:12,986 INFO  L134       CoverageAnalysis]: Checked inductivity of 25 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 00:46:12,986 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:12,986 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 00:46:12,987 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:12,987 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:46:12,987 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:46:12,988 INFO  L87              Difference]: Start difference. First operand 8566 states and 14052 transitions. cyclomatic complexity: 5496 Second operand 4 states.
[2020-11-25 00:46:13,897 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:13,897 INFO  L93              Difference]: Finished difference Result 7968 states and 9259 transitions.
[2020-11-25 00:46:13,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:46:13,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7968 states and 9259 transitions.
[2020-11-25 00:46:13,915 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:13,937 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7968 states to 7968 states and 9259 transitions.
[2020-11-25 00:46:13,938 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1496
[2020-11-25 00:46:13,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1537
[2020-11-25 00:46:13,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7968 states and 9259 transitions.
[2020-11-25 00:46:13,944 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:13,944 INFO  L728         BuchiCegarLoop]: Abstraction has 7968 states and 9259 transitions.
[2020-11-25 00:46:13,951 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7968 states and 9259 transitions.
[2020-11-25 00:46:14,011 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7968 to 7968.
[2020-11-25 00:46:14,011 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7968 states.
[2020-11-25 00:46:14,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7968 states to 7968 states and 9259 transitions.
[2020-11-25 00:46:14,020 INFO  L751         BuchiCegarLoop]: Abstraction has 7968 states and 9259 transitions.
[2020-11-25 00:46:14,020 INFO  L631         BuchiCegarLoop]: Abstraction has 7968 states and 9259 transitions.
[2020-11-25 00:46:14,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:46:14,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7968 states and 9259 transitions.
[2020-11-25 00:46:14,030 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:14,030 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:14,030 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:14,033 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:14,033 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND TRUE   !(account_s164 != null)
[L5740]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7562]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7562]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7563]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_HxERC20[this][msgsender_MSG] == old(_balances_HxERC20[this][msgsender_MSG]) - value_s1288) && _balances_HxERC20[this][to_s1288] == old(_balances_HxERC20[this][to_s1288]) + value_s1288) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7562]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7562]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7563]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_HxERC20[this][msgsender_MSG] == old(_balances_HxERC20[this][msgsender_MSG]) - value_s1288) && _balances_HxERC20[this][to_s1288] == old(_balances_HxERC20[this][to_s1288]) + value_s1288) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:14,037 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:14,038 INFO  L82        PathProgramCache]: Analyzing trace with hash -953026718, now seen corresponding path program 1 times
[2020-11-25 00:46:14,039 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:14,050 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:14,124 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:46:14,124 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:14,124 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:46:14,125 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:14,125 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:46:14,125 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:46:14,125 INFO  L87              Difference]: Start difference. First operand 7968 states and 9259 transitions. cyclomatic complexity: 1301 Second operand 9 states.
[2020-11-25 00:46:14,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:14,289 INFO  L93              Difference]: Finished difference Result 8014 states and 9334 transitions.
[2020-11-25 00:46:14,289 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:46:14,289 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8014 states and 9334 transitions.
[2020-11-25 00:46:14,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:14,332 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8014 states to 8014 states and 9334 transitions.
[2020-11-25 00:46:14,332 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1546
[2020-11-25 00:46:14,333 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1546
[2020-11-25 00:46:14,333 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8014 states and 9334 transitions.
[2020-11-25 00:46:14,340 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:14,340 INFO  L728         BuchiCegarLoop]: Abstraction has 8014 states and 9334 transitions.
[2020-11-25 00:46:14,348 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8014 states and 9334 transitions.
[2020-11-25 00:46:14,401 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8014 to 8005.
[2020-11-25 00:46:14,401 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8005 states.
[2020-11-25 00:46:14,411 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8005 states to 8005 states and 9318 transitions.
[2020-11-25 00:46:14,411 INFO  L751         BuchiCegarLoop]: Abstraction has 8005 states and 9318 transitions.
[2020-11-25 00:46:14,411 INFO  L631         BuchiCegarLoop]: Abstraction has 8005 states and 9318 transitions.
[2020-11-25 00:46:14,411 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:46:14,411 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8005 states and 9318 transitions.
[2020-11-25 00:46:14,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:14,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:14,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:14,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:14,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND TRUE   !(account_s218 != null)
[L5811]               revert := true;
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND TRUE   revert
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7562]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7562]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7563]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_HxERC20[this][msgsender_MSG] == old(_balances_HxERC20[this][msgsender_MSG]) - value_s1288) && _balances_HxERC20[this][to_s1288] == old(_balances_HxERC20[this][to_s1288]) + value_s1288) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7562]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7562]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7563]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_HxERC20[this][msgsender_MSG] == old(_balances_HxERC20[this][msgsender_MSG]) - value_s1288) && _balances_HxERC20[this][to_s1288] == old(_balances_HxERC20[this][to_s1288]) + value_s1288) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:14,428 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:14,429 INFO  L82        PathProgramCache]: Analyzing trace with hash -2133951203, now seen corresponding path program 1 times
[2020-11-25 00:46:14,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:14,440 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:14,537 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:46:14,537 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:14,537 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 00:46:14,537 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:14,537 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 00:46:14,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 00:46:14,538 INFO  L87              Difference]: Start difference. First operand 8005 states and 9318 transitions. cyclomatic complexity: 1323 Second operand 10 states.
[2020-11-25 00:46:14,644 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:14,645 INFO  L93              Difference]: Finished difference Result 8065 states and 9409 transitions.
[2020-11-25 00:46:14,645 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:46:14,645 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8065 states and 9409 transitions.
[2020-11-25 00:46:14,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:14,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8065 states to 8065 states and 9409 transitions.
[2020-11-25 00:46:14,677 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1553
[2020-11-25 00:46:14,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1553
[2020-11-25 00:46:14,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8065 states and 9409 transitions.
[2020-11-25 00:46:14,683 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:14,683 INFO  L728         BuchiCegarLoop]: Abstraction has 8065 states and 9409 transitions.
[2020-11-25 00:46:14,690 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8065 states and 9409 transitions.
[2020-11-25 00:46:14,731 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8065 to 8012.
[2020-11-25 00:46:14,731 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8012 states.
[2020-11-25 00:46:14,739 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8012 states to 8012 states and 9326 transitions.
[2020-11-25 00:46:14,739 INFO  L751         BuchiCegarLoop]: Abstraction has 8012 states and 9326 transitions.
[2020-11-25 00:46:14,739 INFO  L631         BuchiCegarLoop]: Abstraction has 8012 states and 9326 transitions.
[2020-11-25 00:46:14,739 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:46:14,739 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8012 states and 9326 transitions.
[2020-11-25 00:46:14,747 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:14,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:14,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:14,748 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:14,748 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND TRUE   !!__var_2
[L5748]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7562]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7562]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7563]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_HxERC20[this][msgsender_MSG] == old(_balances_HxERC20[this][msgsender_MSG]) - value_s1288) && _balances_HxERC20[this][to_s1288] == old(_balances_HxERC20[this][to_s1288]) + value_s1288) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7562]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7562]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7563]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_HxERC20[this][msgsender_MSG] == old(_balances_HxERC20[this][msgsender_MSG]) - value_s1288) && _balances_HxERC20[this][to_s1288] == old(_balances_HxERC20[this][to_s1288]) + value_s1288) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:14,752 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:14,752 INFO  L82        PathProgramCache]: Analyzing trace with hash -1761781753, now seen corresponding path program 1 times
[2020-11-25 00:46:14,753 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:14,762 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:14,796 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 00:46:14,796 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:14,796 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:46:14,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:14,797 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:46:14,797 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:46:14,797 INFO  L87              Difference]: Start difference. First operand 8012 states and 9326 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 00:46:14,912 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:14,912 INFO  L93              Difference]: Finished difference Result 9140 states and 10341 transitions.
[2020-11-25 00:46:14,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:46:14,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9140 states and 10341 transitions.
[2020-11-25 00:46:14,930 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:46:14,950 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9140 states to 8462 states and 9537 transitions.
[2020-11-25 00:46:14,950 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1652
[2020-11-25 00:46:14,951 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1734
[2020-11-25 00:46:14,951 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8462 states and 9537 transitions.
[2020-11-25 00:46:14,956 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:14,956 INFO  L728         BuchiCegarLoop]: Abstraction has 8462 states and 9537 transitions.
[2020-11-25 00:46:14,962 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8462 states and 9537 transitions.
[2020-11-25 00:46:15,003 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8462 to 7478.
[2020-11-25 00:46:15,003 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7478 states.
[2020-11-25 00:46:15,011 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7478 states to 7478 states and 8311 transitions.
[2020-11-25 00:46:15,011 INFO  L751         BuchiCegarLoop]: Abstraction has 7478 states and 8311 transitions.
[2020-11-25 00:46:15,011 INFO  L631         BuchiCegarLoop]: Abstraction has 7478 states and 8311 transitions.
[2020-11-25 00:46:15,011 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:46:15,011 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7478 states and 8311 transitions.
[2020-11-25 00:46:15,020 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:46:15,020 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:15,020 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:15,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:15,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:15,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:15,029 INFO  L82        PathProgramCache]: Analyzing trace with hash -346607773, now seen corresponding path program 1 times
[2020-11-25 00:46:15,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:15,055 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:15,263 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:46:15,263 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:15,264 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 00:46:15,264 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:15,264 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 00:46:15,264 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 00:46:15,265 INFO  L87              Difference]: Start difference. First operand 7478 states and 8311 transitions. cyclomatic complexity: 843 Second operand 12 states.
[2020-11-25 00:46:21,615 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:21,615 INFO  L93              Difference]: Finished difference Result 12342 states and 13726 transitions.
[2020-11-25 00:46:21,616 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 00:46:21,616 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12342 states and 13726 transitions.
[2020-11-25 00:46:21,638 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 00:46:21,663 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12342 states to 12339 states and 13723 transitions.
[2020-11-25 00:46:21,663 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2473
[2020-11-25 00:46:21,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2473
[2020-11-25 00:46:21,664 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12339 states and 13723 transitions.
[2020-11-25 00:46:21,670 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:21,670 INFO  L728         BuchiCegarLoop]: Abstraction has 12339 states and 13723 transitions.
[2020-11-25 00:46:21,677 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12339 states and 13723 transitions.
[2020-11-25 00:46:21,753 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12339 to 10267.
[2020-11-25 00:46:21,753 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10267 states.
[2020-11-25 00:46:21,766 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10267 states to 10267 states and 11630 transitions.
[2020-11-25 00:46:21,766 INFO  L751         BuchiCegarLoop]: Abstraction has 10267 states and 11630 transitions.
[2020-11-25 00:46:21,766 INFO  L631         BuchiCegarLoop]: Abstraction has 10267 states and 11630 transitions.
[2020-11-25 00:46:21,766 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:46:21,766 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10267 states and 11630 transitions.
[2020-11-25 00:46:21,777 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:21,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:21,778 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:21,781 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:21,781 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:21,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:21,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 612627597, now seen corresponding path program 1 times
[2020-11-25 00:46:21,788 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:21,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:21,962 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-11-25 00:46:21,962 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:21,962 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:46:21,962 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:21,963 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:46:21,963 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:46:21,963 INFO  L87              Difference]: Start difference. First operand 10267 states and 11630 transitions. cyclomatic complexity: 1379 Second operand 7 states.
[2020-11-25 00:46:22,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:22,090 INFO  L93              Difference]: Finished difference Result 10290 states and 11657 transitions.
[2020-11-25 00:46:22,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:46:22,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10290 states and 11657 transitions.
[2020-11-25 00:46:22,107 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:22,141 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10290 states to 10273 states and 11637 transitions.
[2020-11-25 00:46:22,141 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2077
[2020-11-25 00:46:22,142 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2077
[2020-11-25 00:46:22,143 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10273 states and 11637 transitions.
[2020-11-25 00:46:22,150 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:22,150 INFO  L728         BuchiCegarLoop]: Abstraction has 10273 states and 11637 transitions.
[2020-11-25 00:46:22,158 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10273 states and 11637 transitions.
[2020-11-25 00:46:22,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10273 to 10273.
[2020-11-25 00:46:22,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10273 states.
[2020-11-25 00:46:22,250 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10273 states to 10273 states and 11637 transitions.
[2020-11-25 00:46:22,250 INFO  L751         BuchiCegarLoop]: Abstraction has 10273 states and 11637 transitions.
[2020-11-25 00:46:22,250 INFO  L631         BuchiCegarLoop]: Abstraction has 10273 states and 11637 transitions.
[2020-11-25 00:46:22,250 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:46:22,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10273 states and 11637 transitions.
[2020-11-25 00:46:22,265 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:22,265 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:22,265 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:22,269 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:22,269 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:22,277 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:22,277 INFO  L82        PathProgramCache]: Analyzing trace with hash 1303909685, now seen corresponding path program 1 times
[2020-11-25 00:46:22,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:22,296 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:22,557 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 00:46:22,557 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:22,557 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:46:22,557 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:22,558 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:46:22,558 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:46:22,558 INFO  L87              Difference]: Start difference. First operand 10273 states and 11637 transitions. cyclomatic complexity: 1380 Second operand 7 states.
[2020-11-25 00:46:22,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:22,714 INFO  L93              Difference]: Finished difference Result 10296 states and 11664 transitions.
[2020-11-25 00:46:22,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:46:22,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10296 states and 11664 transitions.
[2020-11-25 00:46:22,739 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:22,765 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10296 states to 10279 states and 11644 transitions.
[2020-11-25 00:46:22,765 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2077
[2020-11-25 00:46:22,766 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2077
[2020-11-25 00:46:22,766 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10279 states and 11644 transitions.
[2020-11-25 00:46:22,772 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:22,772 INFO  L728         BuchiCegarLoop]: Abstraction has 10279 states and 11644 transitions.
[2020-11-25 00:46:22,779 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10279 states and 11644 transitions.
[2020-11-25 00:46:22,840 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10279 to 10273.
[2020-11-25 00:46:22,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10273 states.
[2020-11-25 00:46:22,875 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10273 states to 10273 states and 11637 transitions.
[2020-11-25 00:46:22,875 INFO  L751         BuchiCegarLoop]: Abstraction has 10273 states and 11637 transitions.
[2020-11-25 00:46:22,875 INFO  L631         BuchiCegarLoop]: Abstraction has 10273 states and 11637 transitions.
[2020-11-25 00:46:22,875 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:46:22,876 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10273 states and 11637 transitions.
[2020-11-25 00:46:22,892 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:22,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:22,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:22,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:22,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:22,901 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:22,901 INFO  L82        PathProgramCache]: Analyzing trace with hash 438531950, now seen corresponding path program 1 times
[2020-11-25 00:46:22,902 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:22,920 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:23,076 INFO  L134       CoverageAnalysis]: Checked inductivity of 921 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:46:23,076 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:23,076 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:46:23,076 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:23,077 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:46:23,077 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:46:23,077 INFO  L87              Difference]: Start difference. First operand 10273 states and 11637 transitions. cyclomatic complexity: 1380 Second operand 8 states.
[2020-11-25 00:46:23,204 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:23,204 INFO  L93              Difference]: Finished difference Result 10300 states and 11668 transitions.
[2020-11-25 00:46:23,204 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:46:23,204 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10300 states and 11668 transitions.
[2020-11-25 00:46:23,221 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:23,240 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10300 states to 10286 states and 11652 transitions.
[2020-11-25 00:46:23,240 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2077
[2020-11-25 00:46:23,241 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2077
[2020-11-25 00:46:23,241 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10286 states and 11652 transitions.
[2020-11-25 00:46:23,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:23,247 INFO  L728         BuchiCegarLoop]: Abstraction has 10286 states and 11652 transitions.
[2020-11-25 00:46:23,253 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10286 states and 11652 transitions.
[2020-11-25 00:46:23,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10286 to 10286.
[2020-11-25 00:46:23,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10286 states.
[2020-11-25 00:46:23,310 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10286 states to 10286 states and 11652 transitions.
[2020-11-25 00:46:23,310 INFO  L751         BuchiCegarLoop]: Abstraction has 10286 states and 11652 transitions.
[2020-11-25 00:46:23,310 INFO  L631         BuchiCegarLoop]: Abstraction has 10286 states and 11652 transitions.
[2020-11-25 00:46:23,310 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:46:23,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10286 states and 11652 transitions.
[2020-11-25 00:46:23,320 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:46:23,320 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:23,320 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:23,322 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:23,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:23,327 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:23,327 INFO  L82        PathProgramCache]: Analyzing trace with hash -1010341491, now seen corresponding path program 1 times
[2020-11-25 00:46:23,328 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:23,347 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:23,536 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 00:46:23,536 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:23,536 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 00:46:23,537 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:23,537 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 00:46:23,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 00:46:23,537 INFO  L87              Difference]: Start difference. First operand 10286 states and 11652 transitions. cyclomatic complexity: 1382 Second operand 15 states.
[2020-11-25 00:46:31,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:31,605 INFO  L93              Difference]: Finished difference Result 17333 states and 20016 transitions.
[2020-11-25 00:46:31,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 00:46:31,605 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17333 states and 20016 transitions.
[2020-11-25 00:46:31,643 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-25 00:46:31,689 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17333 states to 17313 states and 19993 transitions.
[2020-11-25 00:46:31,690 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3476
[2020-11-25 00:46:31,691 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3476
[2020-11-25 00:46:31,691 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17313 states and 19993 transitions.
[2020-11-25 00:46:31,703 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:31,703 INFO  L728         BuchiCegarLoop]: Abstraction has 17313 states and 19993 transitions.
[2020-11-25 00:46:31,711 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17313 states and 19993 transitions.
[2020-11-25 00:46:31,800 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17313 to 15887.
[2020-11-25 00:46:31,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15887 states.
[2020-11-25 00:46:31,822 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15887 states to 15887 states and 18492 transitions.
[2020-11-25 00:46:31,822 INFO  L751         BuchiCegarLoop]: Abstraction has 15887 states and 18492 transitions.
[2020-11-25 00:46:31,822 INFO  L631         BuchiCegarLoop]: Abstraction has 15887 states and 18492 transitions.
[2020-11-25 00:46:31,822 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:46:31,822 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15887 states and 18492 transitions.
[2020-11-25 00:46:31,838 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 00:46:31,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:31,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:31,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:31,839 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5988]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5993]   COND TRUE   __tmp__DType[this] == PauserRole
[L5994]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5994]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5995]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5988]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5993]   COND TRUE   __tmp__DType[this] == PauserRole
[L5994]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5994]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5995]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:31,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:31,845 INFO  L82        PathProgramCache]: Analyzing trace with hash -417908055, now seen corresponding path program 1 times
[2020-11-25 00:46:31,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:31,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:32,025 INFO  L134       CoverageAnalysis]: Checked inductivity of 886 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 865 trivial. 0 not checked.
[2020-11-25 00:46:32,025 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:32,025 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:46:32,026 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:32,026 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:46:32,026 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:46:32,026 INFO  L87              Difference]: Start difference. First operand 15887 states and 18492 transitions. cyclomatic complexity: 2635 Second operand 8 states.
[2020-11-25 00:46:34,121 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:34,121 INFO  L93              Difference]: Finished difference Result 18822 states and 21981 transitions.
[2020-11-25 00:46:34,121 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:46:34,121 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18822 states and 21981 transitions.
[2020-11-25 00:46:34,163 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 00:46:34,207 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18822 states to 18805 states and 21961 transitions.
[2020-11-25 00:46:34,208 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3791
[2020-11-25 00:46:34,209 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3791
[2020-11-25 00:46:34,209 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18805 states and 21961 transitions.
[2020-11-25 00:46:34,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:34,221 INFO  L728         BuchiCegarLoop]: Abstraction has 18805 states and 21961 transitions.
[2020-11-25 00:46:34,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18805 states and 21961 transitions.
[2020-11-25 00:46:34,325 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18805 to 18671.
[2020-11-25 00:46:34,325 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18671 states.
[2020-11-25 00:46:34,352 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18671 states to 18671 states and 21826 transitions.
[2020-11-25 00:46:34,352 INFO  L751         BuchiCegarLoop]: Abstraction has 18671 states and 21826 transitions.
[2020-11-25 00:46:34,352 INFO  L631         BuchiCegarLoop]: Abstraction has 18671 states and 21826 transitions.
[2020-11-25 00:46:34,352 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 00:46:34,352 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18671 states and 21826 transitions.
[2020-11-25 00:46:34,372 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 00:46:34,372 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:34,372 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:34,374 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:34,374 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5988]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5993]   COND TRUE   __tmp__DType[this] == PauserRole
[L5994]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5994]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5995]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5988]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5993]   COND TRUE   __tmp__DType[this] == PauserRole
[L5994]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5994]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5995]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:34,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:34,379 INFO  L82        PathProgramCache]: Analyzing trace with hash 2054879825, now seen corresponding path program 2 times
[2020-11-25 00:46:34,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:34,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:34,600 INFO  L134       CoverageAnalysis]: Checked inductivity of 886 backedges. 0 proven. 26 refuted. 0 times theorem prover too weak. 860 trivial. 0 not checked.
[2020-11-25 00:46:34,600 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:34,600 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:46:34,601 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:34,601 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:46:34,601 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:46:34,601 INFO  L87              Difference]: Start difference. First operand 18671 states and 21826 transitions. cyclomatic complexity: 3195 Second operand 8 states.
[2020-11-25 00:46:35,994 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:35,994 INFO  L93              Difference]: Finished difference Result 18828 states and 21987 transitions.
[2020-11-25 00:46:35,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:46:35,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18828 states and 21987 transitions.
[2020-11-25 00:46:36,037 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 00:46:36,083 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18828 states to 18811 states and 21967 transitions.
[2020-11-25 00:46:36,083 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3791
[2020-11-25 00:46:36,085 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3791
[2020-11-25 00:46:36,085 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18811 states and 21967 transitions.
[2020-11-25 00:46:36,097 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:36,097 INFO  L728         BuchiCegarLoop]: Abstraction has 18811 states and 21967 transitions.
[2020-11-25 00:46:36,104 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18811 states and 21967 transitions.
[2020-11-25 00:46:36,198 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18811 to 18671.
[2020-11-25 00:46:36,198 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18671 states.
[2020-11-25 00:46:36,225 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18671 states to 18671 states and 21826 transitions.
[2020-11-25 00:46:36,225 INFO  L751         BuchiCegarLoop]: Abstraction has 18671 states and 21826 transitions.
[2020-11-25 00:46:36,225 INFO  L631         BuchiCegarLoop]: Abstraction has 18671 states and 21826 transitions.
[2020-11-25 00:46:36,225 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 00:46:36,225 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18671 states and 21826 transitions.
[2020-11-25 00:46:36,244 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 00:46:36,244 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:36,244 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:36,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:36,246 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5988]   COND TRUE   __tmp__DType[this] == Pausable
[L5989]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5989]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5990]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:36,250 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:36,250 INFO  L82        PathProgramCache]: Analyzing trace with hash -1763618380, now seen corresponding path program 1 times
[2020-11-25 00:46:36,251 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:36,264 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:36,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 6 proven. 19 refuted. 0 times theorem prover too weak. 857 trivial. 0 not checked.
[2020-11-25 00:46:36,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:36,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:46:36,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:36,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:46:36,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:46:36,420 INFO  L87              Difference]: Start difference. First operand 18671 states and 21826 transitions. cyclomatic complexity: 3195 Second operand 9 states.
[2020-11-25 00:46:39,423 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:39,423 INFO  L93              Difference]: Finished difference Result 18826 states and 21985 transitions.
[2020-11-25 00:46:39,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:46:39,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18826 states and 21985 transitions.
[2020-11-25 00:46:39,495 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 00:46:39,560 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18826 states to 18791 states and 21942 transitions.
[2020-11-25 00:46:39,560 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3791
[2020-11-25 00:46:39,562 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3791
[2020-11-25 00:46:39,562 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18791 states and 21942 transitions.
[2020-11-25 00:46:39,579 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:39,579 INFO  L728         BuchiCegarLoop]: Abstraction has 18791 states and 21942 transitions.
[2020-11-25 00:46:39,588 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18791 states and 21942 transitions.
[2020-11-25 00:46:39,685 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18791 to 18663.
[2020-11-25 00:46:39,686 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18663 states.
[2020-11-25 00:46:39,712 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18663 states to 18663 states and 21814 transitions.
[2020-11-25 00:46:39,712 INFO  L751         BuchiCegarLoop]: Abstraction has 18663 states and 21814 transitions.
[2020-11-25 00:46:39,712 INFO  L631         BuchiCegarLoop]: Abstraction has 18663 states and 21814 transitions.
[2020-11-25 00:46:39,712 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 00:46:39,713 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18663 states and 21814 transitions.
[2020-11-25 00:46:39,733 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 00:46:39,733 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:39,733 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:39,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:39,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:39,739 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:39,740 INFO  L82        PathProgramCache]: Analyzing trace with hash 756409167, now seen corresponding path program 1 times
[2020-11-25 00:46:39,740 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:39,758 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:40,048 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 00:46:40,048 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:40,048 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:46:40,049 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:40,049 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:46:40,049 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:46:40,049 INFO  L87              Difference]: Start difference. First operand 18663 states and 21814 transitions. cyclomatic complexity: 3191 Second operand 4 states.
[2020-11-25 00:46:40,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:40,703 INFO  L93              Difference]: Finished difference Result 26011 states and 32820 transitions.
[2020-11-25 00:46:40,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 00:46:40,704 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26011 states and 32820 transitions.
[2020-11-25 00:46:40,793 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 152
[2020-11-25 00:46:40,902 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26011 states to 24228 states and 30865 transitions.
[2020-11-25 00:46:40,902 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4698
[2020-11-25 00:46:40,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4717
[2020-11-25 00:46:40,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24228 states and 30865 transitions.
[2020-11-25 00:46:40,929 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:40,929 INFO  L728         BuchiCegarLoop]: Abstraction has 24228 states and 30865 transitions.
[2020-11-25 00:46:40,939 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24228 states and 30865 transitions.
[2020-11-25 00:46:41,136 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24228 to 20544.
[2020-11-25 00:46:41,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20544 states.
[2020-11-25 00:46:41,172 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20544 states to 20544 states and 24783 transitions.
[2020-11-25 00:46:41,173 INFO  L751         BuchiCegarLoop]: Abstraction has 20544 states and 24783 transitions.
[2020-11-25 00:46:41,173 INFO  L631         BuchiCegarLoop]: Abstraction has 20544 states and 24783 transitions.
[2020-11-25 00:46:41,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 00:46:41,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20544 states and 24783 transitions.
[2020-11-25 00:46:41,196 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 00:46:41,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:41,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:41,198 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:41,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:41,203 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:41,203 INFO  L82        PathProgramCache]: Analyzing trace with hash -339426935, now seen corresponding path program 1 times
[2020-11-25 00:46:41,204 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:41,227 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:41,477 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:46:41,477 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:41,477 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 00:46:41,478 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:41,478 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 00:46:41,478 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=300, Unknown=0, NotChecked=0, Total=342
[2020-11-25 00:46:41,478 INFO  L87              Difference]: Start difference. First operand 20544 states and 24783 transitions. cyclomatic complexity: 4279 Second operand 19 states.
[2020-11-25 00:46:48,754 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:48,754 INFO  L93              Difference]: Finished difference Result 24030 states and 30438 transitions.
[2020-11-25 00:46:48,754 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:46:48,754 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24030 states and 30438 transitions.
[2020-11-25 00:46:48,824 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:48,911 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24030 states to 24030 states and 30438 transitions.
[2020-11-25 00:46:48,912 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5131
[2020-11-25 00:46:48,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5138
[2020-11-25 00:46:48,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24030 states and 30438 transitions.
[2020-11-25 00:46:48,939 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:48,939 INFO  L728         BuchiCegarLoop]: Abstraction has 24030 states and 30438 transitions.
[2020-11-25 00:46:48,949 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24030 states and 30438 transitions.
[2020-11-25 00:46:49,124 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24030 to 22594.
[2020-11-25 00:46:49,124 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22594 states.
[2020-11-25 00:46:49,165 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22594 states to 22594 states and 27796 transitions.
[2020-11-25 00:46:49,165 INFO  L751         BuchiCegarLoop]: Abstraction has 22594 states and 27796 transitions.
[2020-11-25 00:46:49,165 INFO  L631         BuchiCegarLoop]: Abstraction has 22594 states and 27796 transitions.
[2020-11-25 00:46:49,165 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 00:46:49,165 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22594 states and 27796 transitions.
[2020-11-25 00:46:49,192 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:49,192 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:49,192 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:49,193 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:49,194 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:49,198 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:49,198 INFO  L82        PathProgramCache]: Analyzing trace with hash 1153126440, now seen corresponding path program 1 times
[2020-11-25 00:46:49,199 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:49,213 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:49,371 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 00:46:49,371 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:49,372 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:46:49,372 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:49,372 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:46:49,372 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:46:49,372 INFO  L87              Difference]: Start difference. First operand 22594 states and 27796 transitions. cyclomatic complexity: 5276 Second operand 8 states.
[2020-11-25 00:46:49,573 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:49,573 INFO  L93              Difference]: Finished difference Result 22628 states and 27835 transitions.
[2020-11-25 00:46:49,574 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:46:49,574 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22628 states and 27835 transitions.
[2020-11-25 00:46:49,633 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:49,707 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22628 states to 22607 states and 27811 transitions.
[2020-11-25 00:46:49,707 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5102
[2020-11-25 00:46:49,710 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5102
[2020-11-25 00:46:49,710 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22607 states and 27811 transitions.
[2020-11-25 00:46:49,728 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:49,728 INFO  L728         BuchiCegarLoop]: Abstraction has 22607 states and 27811 transitions.
[2020-11-25 00:46:49,737 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22607 states and 27811 transitions.
[2020-11-25 00:46:49,887 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22607 to 22594.
[2020-11-25 00:46:49,887 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22594 states.
[2020-11-25 00:46:49,929 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22594 states to 22594 states and 27796 transitions.
[2020-11-25 00:46:49,929 INFO  L751         BuchiCegarLoop]: Abstraction has 22594 states and 27796 transitions.
[2020-11-25 00:46:49,929 INFO  L631         BuchiCegarLoop]: Abstraction has 22594 states and 27796 transitions.
[2020-11-25 00:46:49,929 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 00:46:49,929 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22594 states and 27796 transitions.
[2020-11-25 00:46:49,956 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:49,956 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:49,956 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:49,958 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:49,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:49,963 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:49,963 INFO  L82        PathProgramCache]: Analyzing trace with hash -1279224906, now seen corresponding path program 2 times
[2020-11-25 00:46:49,964 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:49,977 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:50,158 INFO  L134       CoverageAnalysis]: Checked inductivity of 916 backedges. 12 proven. 9 refuted. 0 times theorem prover too weak. 895 trivial. 0 not checked.
[2020-11-25 00:46:50,159 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:50,159 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:46:50,159 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:50,159 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:46:50,159 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:46:50,160 INFO  L87              Difference]: Start difference. First operand 22594 states and 27796 transitions. cyclomatic complexity: 5276 Second operand 8 states.
[2020-11-25 00:46:50,388 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:50,388 INFO  L93              Difference]: Finished difference Result 22621 states and 27826 transitions.
[2020-11-25 00:46:50,388 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:46:50,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22621 states and 27826 transitions.
[2020-11-25 00:46:50,463 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:50,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22621 states to 22600 states and 27802 transitions.
[2020-11-25 00:46:50,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5102
[2020-11-25 00:46:50,591 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5102
[2020-11-25 00:46:50,591 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22600 states and 27802 transitions.
[2020-11-25 00:46:50,607 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:50,607 INFO  L728         BuchiCegarLoop]: Abstraction has 22600 states and 27802 transitions.
[2020-11-25 00:46:50,615 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22600 states and 27802 transitions.
[2020-11-25 00:46:50,766 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22600 to 22600.
[2020-11-25 00:46:50,766 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22600 states.
[2020-11-25 00:46:50,806 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22600 states to 22600 states and 27802 transitions.
[2020-11-25 00:46:50,807 INFO  L751         BuchiCegarLoop]: Abstraction has 22600 states and 27802 transitions.
[2020-11-25 00:46:50,807 INFO  L631         BuchiCegarLoop]: Abstraction has 22600 states and 27802 transitions.
[2020-11-25 00:46:50,807 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 00:46:50,807 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22600 states and 27802 transitions.
[2020-11-25 00:46:50,833 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:50,833 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:50,833 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:50,835 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:50,835 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7539]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8201]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8212]               idx_s1645 := 0;
[L8213]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8215]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8226]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8227]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8012]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8023]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8024]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8025]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8036]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8047]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8058]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L8058]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8059]   COND TRUE   revert
[L8227]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8228]   COND TRUE   revert
[L7539]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7540]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND TRUE   choice == 29
[L11997]              gas := gas - 21000;
[L11998]  COND TRUE   gas >= 0
[L11999]              assume msgvalue_MSG == 0;
[L12000]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L453]                havoc __exception;
[L454]                revert := false;
[L455]    COND TRUE   __exception
[L456]                __tmp__Balance := Balance;
[L457]                __tmp__DType := DType;
[L458]                __tmp__Alloc := Alloc;
[L459]                __tmp__balance_ADDR := balance_ADDR;
[L460]                __tmp__M_Ref_bool := M_Ref_bool;
[L461]                __tmp__sum := sum;
[L462]                __tmp__M_Ref_int := M_Ref_int;
[L463]                __tmp__sum__balances0 := sum__balances0;
[L464]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L465]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L466]                __tmp__sum__allowed1 := sum__allowed1;
[L467]                __tmp__M_int_Ref := M_int_Ref;
[L468]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L469]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L470]                __tmp__Length := Length;
[L471]                __tmp__now := now;
[L472]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L473]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L474]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L475]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L476]                __tmp___paused_Pausable := _paused_Pausable;
[L477]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L478]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L479]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L480]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L481]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L482]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L483]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L484]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L485]                __tmp__implementation_BLY := implementation_BLY;
[L486]                __tmp__timelockList_BLY := timelockList_BLY;
[L487]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L488]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5889]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10587]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10588]              revert := true;
[L5889]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5890]   COND TRUE   revert
[L488]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L489]                assume revert || gas < 0;
[L12000]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:50,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:50,844 INFO  L82        PathProgramCache]: Analyzing trace with hash 1481096602, now seen corresponding path program 1 times
[2020-11-25 00:46:50,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:50,862 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:51,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:46:51,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:51,014 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:46:51,014 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:51,014 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:46:51,014 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:46:51,014 INFO  L87              Difference]: Start difference. First operand 22600 states and 27802 transitions. cyclomatic complexity: 5276 Second operand 3 states.
[2020-11-25 00:46:51,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:51,140 INFO  L93              Difference]: Finished difference Result 22580 states and 27762 transitions.
[2020-11-25 00:46:51,140 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:46:51,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22580 states and 27762 transitions.
[2020-11-25 00:46:51,200 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:51,275 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22580 states to 22580 states and 27762 transitions.
[2020-11-25 00:46:51,276 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5100
[2020-11-25 00:46:51,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5100
[2020-11-25 00:46:51,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22580 states and 27762 transitions.
[2020-11-25 00:46:51,297 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:51,297 INFO  L728         BuchiCegarLoop]: Abstraction has 22580 states and 27762 transitions.
[2020-11-25 00:46:51,306 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22580 states and 27762 transitions.
[2020-11-25 00:46:51,461 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22580 to 22410.
[2020-11-25 00:46:51,461 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22410 states.
[2020-11-25 00:46:51,502 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22410 states to 22410 states and 27564 transitions.
[2020-11-25 00:46:51,502 INFO  L751         BuchiCegarLoop]: Abstraction has 22410 states and 27564 transitions.
[2020-11-25 00:46:51,502 INFO  L631         BuchiCegarLoop]: Abstraction has 22410 states and 27564 transitions.
[2020-11-25 00:46:51,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 00:46:51,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22410 states and 27564 transitions.
[2020-11-25 00:46:51,530 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:51,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:51,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:51,531 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:51,531 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   COND TRUE   __tmp__DType[this] == BLY
[L7056]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6539]   COND TRUE   __tmp__DType[this] == BLY
[L6540]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6540]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6541]   COND TRUE   revert
[L7056]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7057]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:51,535 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:51,535 INFO  L82        PathProgramCache]: Analyzing trace with hash 1370075712, now seen corresponding path program 1 times
[2020-11-25 00:46:51,536 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:51,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:51,708 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:46:51,708 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:46:51,708 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:46:51,709 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:46:51,709 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:46:51,709 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:46:51,709 INFO  L87              Difference]: Start difference. First operand 22410 states and 27564 transitions. cyclomatic complexity: 5228 Second operand 8 states.
[2020-11-25 00:46:51,893 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:51,893 INFO  L93              Difference]: Finished difference Result 22438 states and 27595 transitions.
[2020-11-25 00:46:51,893 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:46:51,893 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22438 states and 27595 transitions.
[2020-11-25 00:46:51,951 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:52,022 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22438 states to 22417 states and 27571 transitions.
[2020-11-25 00:46:52,022 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5100
[2020-11-25 00:46:52,025 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5100
[2020-11-25 00:46:52,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22417 states and 27571 transitions.
[2020-11-25 00:46:52,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:52,043 INFO  L728         BuchiCegarLoop]: Abstraction has 22417 states and 27571 transitions.
[2020-11-25 00:46:52,051 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22417 states and 27571 transitions.
[2020-11-25 00:46:52,199 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22417 to 22404.
[2020-11-25 00:46:52,199 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22404 states.
[2020-11-25 00:46:52,240 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22404 states to 22404 states and 27556 transitions.
[2020-11-25 00:46:52,240 INFO  L751         BuchiCegarLoop]: Abstraction has 22404 states and 27556 transitions.
[2020-11-25 00:46:52,240 INFO  L631         BuchiCegarLoop]: Abstraction has 22404 states and 27556 transitions.
[2020-11-25 00:46:52,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 00:46:52,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22404 states and 27556 transitions.
[2020-11-25 00:46:52,266 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:46:52,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:52,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:52,267 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:52,267 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   COND TRUE   __tmp__DType[this] == BLY
[L7056]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6539]   COND TRUE   __tmp__DType[this] == BLY
[L6540]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6540]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6541]   COND TRUE   revert
[L7056]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7057]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:52,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:52,272 INFO  L82        PathProgramCache]: Analyzing trace with hash 98723512, now seen corresponding path program 1 times
[2020-11-25 00:46:52,273 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:52,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:52,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:52,509 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:52,509 INFO  L82        PathProgramCache]: Analyzing trace with hash 55058752, now seen corresponding path program 1 times
[2020-11-25 00:46:52,509 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:52,512 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:46:52,519 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:46:52,519 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:46:52,519 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:46:52,519 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 00:46:52,519 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:46:52,520 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:46:52,520 INFO  L87              Difference]: Start difference. First operand 22404 states and 27556 transitions. cyclomatic complexity: 5226 Second operand 4 states.
[2020-11-25 00:46:53,592 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:46:53,592 INFO  L93              Difference]: Finished difference Result 23168 states and 29114 transitions.
[2020-11-25 00:46:53,592 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:46:53,592 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23168 states and 29114 transitions.
[2020-11-25 00:46:53,695 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 224
[2020-11-25 00:46:53,807 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23168 states to 23168 states and 29114 transitions.
[2020-11-25 00:46:53,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5008
[2020-11-25 00:46:53,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5008
[2020-11-25 00:46:53,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23168 states and 29114 transitions.
[2020-11-25 00:46:53,835 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:46:53,835 INFO  L728         BuchiCegarLoop]: Abstraction has 23168 states and 29114 transitions.
[2020-11-25 00:46:53,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23168 states and 29114 transitions.
[2020-11-25 00:46:54,172 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23168 to 20802.
[2020-11-25 00:46:54,172 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20802 states.
[2020-11-25 00:46:54,207 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20802 states to 20802 states and 24552 transitions.
[2020-11-25 00:46:54,208 INFO  L751         BuchiCegarLoop]: Abstraction has 20802 states and 24552 transitions.
[2020-11-25 00:46:54,208 INFO  L631         BuchiCegarLoop]: Abstraction has 20802 states and 24552 transitions.
[2020-11-25 00:46:54,208 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 00:46:54,208 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20802 states and 24552 transitions.
[2020-11-25 00:46:54,231 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 56
[2020-11-25 00:46:54,231 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:46:54,231 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:46:54,232 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:46:54,232 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_BLY0 := false;
[L3]                  call_transfer_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   COND TRUE   __tmp__DType[this] == BLY
[L7056]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6539]   COND TRUE   __tmp__DType[this] == BLY
[L6540]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6540]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6541]   COND TRUE   revert
[L7056]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7057]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND TRUE   choice == 20
[L12051]              gas := gas - 21000;
[L12052]  COND TRUE   gas >= 0
[L12053]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12054]              assume msgvalue_MSG == 0;
[L12055]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   COND TRUE   __tmp__DType[this] == BLY
[L7056]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6539]   COND TRUE   __tmp__DType[this] == BLY
[L6540]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6540]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6541]   COND TRUE   revert
[L7056]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7057]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:46:54,237 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:54,237 INFO  L82        PathProgramCache]: Analyzing trace with hash 98723512, now seen corresponding path program 2 times
[2020-11-25 00:46:54,238 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:54,265 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:54,293 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:54,384 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:54,384 INFO  L82        PathProgramCache]: Analyzing trace with hash 1683441369, now seen corresponding path program 1 times
[2020-11-25 00:46:54,384 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:54,390 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:54,396 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:54,412 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:46:54,412 INFO  L82        PathProgramCache]: Analyzing trace with hash -1154218302, now seen corresponding path program 1 times
[2020-11-25 00:46:54,413 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:46:54,446 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:54,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 00:46:55,012 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 219
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4027 to 8053
[2020-11-25 00:46:55,231 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 162
[2020-11-25 00:46:55,405 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 149 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 9181 to 18353
[2020-11-25 00:46:55,710 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification that was a NOOP. DAG size: 311
[2020-11-25 00:46:56,553 WARN  L188               SmtUtils]: Spent 839.00 ms on a formula simplification. DAG size of input: 404 DAG size of output: 362
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 17077 to 34147
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 9973 to 19937
[2020-11-25 00:46:56,789 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 220
[2020-11-25 00:46:57,123 WARN  L188               SmtUtils]: Spent 331.00 ms on a formula simplification that was a NOOP. DAG size: 474
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-25 00:46:57,425 WARN  L188               SmtUtils]: Spent 292.00 ms on a formula simplification that was a NOOP. DAG size: 385
[2020-11-25 00:46:57,703 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification that was a NOOP. DAG size: 385
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 00:46:57,834 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 229
[2020-11-25 00:46:57,848 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 00:46:58,666 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 00:47:00,447 WARN  L188               SmtUtils]: Spent 1.39 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 00:47:00,640 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 00:47:00,933 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 00:47:01,457 WARN  L188               SmtUtils]: Spent 458.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 00:47:01,708 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 00:47:02,003 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 219
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 00:47:02,117 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 162
[2020-11-25 00:47:02,323 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 00:47:02,655 WARN  L188               SmtUtils]: Spent 318.00 ms on a formula simplification that was a NOOP. DAG size: 311
[2020-11-25 00:47:03,460 WARN  L188               SmtUtils]: Spent 801.00 ms on a formula simplification. DAG size of input: 403 DAG size of output: 362
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 00:47:03,677 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 220
[2020-11-25 00:47:03,930 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification that was a NOOP. DAG size: 474
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-25 00:47:04,291 WARN  L188               SmtUtils]: Spent 339.00 ms on a formula simplification that was a NOOP. DAG size: 385
[2020-11-25 00:47:06,657 WARN  L188               SmtUtils]: Spent 2.36 s on a formula simplification. DAG size of input: 726 DAG size of output: 707
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 17419 to 34819
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 00:47:07,434 WARN  L188               SmtUtils]: Spent 756.00 ms on a formula simplification. DAG size of input: 337 DAG size of output: 334
[2020-11-25 00:47:07,927 WARN  L188               SmtUtils]: Spent 458.00 ms on a formula simplification that was a NOOP. DAG size: 494
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 00:47:08,202 WARN  L188               SmtUtils]: Spent 266.00 ms on a formula simplification that was a NOOP. DAG size: 334
[2020-11-25 00:47:09,167 WARN  L188               SmtUtils]: Spent 963.00 ms on a formula simplification. DAG size of input: 496 DAG size of output: 495
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
[2020-11-25 00:47:09,627 WARN  L188               SmtUtils]: Spent 455.00 ms on a formula simplification that was a NOOP. DAG size: 491
[2020-11-25 00:47:09,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:47:09,708 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:47:09,722 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:47:09 BasicIcfg
[2020-11-25 00:47:09,722 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:47:09,722 INFO  L168              Benchmark]: Toolchain (without parser) took 63883.26 ms. Allocated memory was 1.0 GB in the beginning and 6.3 GB in the end (delta: 5.2 GB). Free memory was 919.1 MB in the beginning and 2.8 GB in the end (delta: -1.8 GB). Peak memory consumption was 5.6 GB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,723 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,723 INFO  L168              Benchmark]: Boogie Preprocessor took 186.32 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,723 INFO  L168              Benchmark]: UtopiaSpecLang took 94.89 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,724 INFO  L168              Benchmark]: Boogie Printer took 36.29 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,724 INFO  L168              Benchmark]: RCFGBuilder took 1373.55 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 80.7 MB). Free memory was 870.7 MB in the beginning and 766.6 MB in the end (delta: 104.2 MB). Peak memory consumption was 184.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,724 INFO  L168              Benchmark]: UtopiaLTL2Aut took 32.71 ms. Allocated memory is still 1.1 GB. Free memory was 766.6 MB in the beginning and 763.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,725 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3312.84 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 490.7 MB). Free memory was 763.0 MB in the beginning and 908.0 MB in the end (delta: -145.1 MB). Peak memory consumption was 345.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,725 INFO  L168              Benchmark]: BlockEncodingV2 took 363.15 ms. Allocated memory is still 1.6 GB. Free memory was 908.0 MB in the beginning and 741.7 MB in the end (delta: 166.3 MB). Peak memory consumption was 166.3 MB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,725 INFO  L168              Benchmark]: BuchiAutomizer took 58480.09 ms. Allocated memory was 1.6 GB in the beginning and 6.3 GB in the end (delta: 4.7 GB). Free memory was 741.7 MB in the beginning and 2.8 GB in the end (delta: -2.0 GB). Peak memory consumption was 4.8 GB. Max. memory is 15.3 GB.
[2020-11-25 00:47:09,728 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11436 locations, 20721 edges
  - StatisticsResult: Encoded RCFG
    11294 locations, 20330 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 186.32 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 94.89 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 36.29 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1373.55 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 80.7 MB). Free memory was 870.7 MB in the beginning and 766.6 MB in the end (delta: 104.2 MB). Peak memory consumption was 184.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 32.71 ms. Allocated memory is still 1.1 GB. Free memory was 766.6 MB in the beginning and 763.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3312.84 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 490.7 MB). Free memory was 763.0 MB in the beginning and 908.0 MB in the end (delta: -145.1 MB). Peak memory consumption was 345.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 363.15 ms. Allocated memory is still 1.6 GB. Free memory was 908.0 MB in the beginning and 741.7 MB in the end (delta: 166.3 MB). Peak memory consumption was 166.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 58480.09 ms. Allocated memory was 1.6 GB in the beginning and 6.3 GB in the end (delta: 4.7 GB). Free memory was 741.7 MB in the beginning and 2.8 GB in the end (delta: -2.0 GB). Peak memory consumption was 4.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4606 locations, 6369 edges
  - StatisticsResult: BuchiProgram size
    11436 locations, 20721 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 20 terminating modules (20 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.20 modules have a trivial ranking function, the largest among these consists of 19 locations. The remainder module has 20802 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 58.4s and 21 iterations.  TraceHistogramMax:8. Analysis of lassos took 19.5s. Construction of modules took 24.5s. BÃ¼chi inclusion checks took 8.3s. Highest rank in rank-based complementation 0. Minimization of det autom 20. Minimization of nondet autom 0. Automata minimization 2.9s AutomataMinimizationTime, 20 MinimizatonAttempts, 13798 StatesRemovedByMinimization, 16 NontrivialMinimizations. Non-live state removal took 2.0s Buchi closure took 0.0s. Biggest automaton had 22600 states and ocurred in iteration 17.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 168962 SDtfs, 116192 SDslu, 578930 SDs, 0 SdLazy, 316922 SolverSat, 18138 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 24.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000024) = (new BLY)({from : 1000000000000000000000000001});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
BLY(1000000000000000000000000024).transfer~address~uint256.gas(3979002)({from : 1000000000000000000000000001, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   COND TRUE   __tmp__DType[this] == BLY
[L7056]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6539]   COND TRUE   __tmp__DType[this] == BLY
[L6540]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6540]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6541]   COND TRUE   revert
[L7056]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7057]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
BLY(1000000000000000000000000024).transfer~address~uint256.gas(3979001)({from : 1000000000000000000000000001, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && _balances_HxERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_BLY0 := true;
[L3]                  call_transfer_BLY0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3204]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3208]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3209]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3214]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3215]               __tmp__implementation_BLY := implementation_BLY;
[L3216]               __tmp__timelockList_BLY := timelockList_BLY;
[L3217]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7523]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7523]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7524]   COND FALSE  !(revert)
[L7527]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7528]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7528]   RET         call __var_41 := FreshRefGenerator__fail();
[L7529]   COND FALSE  !(revert)
[L7532]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7533]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7534]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7535]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7536]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7538]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7544]   COND TRUE   __tmp__DType[this] == BLY
[L7545]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7051]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7051]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   COND TRUE   __tmp__DType[this] == BLY
[L7056]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6539]   COND TRUE   __tmp__DType[this] == BLY
[L6540]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6540]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6541]   COND TRUE   revert
[L7056]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7057]   COND TRUE   revert
[L7545]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7546]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12055]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
