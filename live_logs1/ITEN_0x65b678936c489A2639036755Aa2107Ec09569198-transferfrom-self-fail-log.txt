This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:45:16,689 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:45:16,690 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:45:16,703 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:45:16,703 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:45:16,704 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:45:16,705 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:45:16,706 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:45:16,708 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:45:16,708 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:45:16,709 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:45:16,709 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:45:16,710 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:45:16,711 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:45:16,712 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:45:16,712 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:45:16,713 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:45:16,714 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:45:16,715 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:45:16,717 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:45:16,717 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:45:16,718 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:45:16,720 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:45:16,720 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:45:16,720 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:45:16,721 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:45:16,721 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:45:16,722 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:45:16,722 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:45:16,722 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:45:16,723 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:45:16,723 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:45:16,724 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:45:16,724 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:45:16,725 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:45:16,725 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:45:16,725 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:45:16,726 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:45:16,726 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:45:16,727 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:45:16,727 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:45:16,727 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:45:16,735 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:45:16,735 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:45:16,736 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:45:16,736 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:45:16,736 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:45:16,737 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:45:16,737 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:45:16,737 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:45:16,737 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:45:16,737 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:45:16,737 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:45:16,737 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:45:16,737 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:45:16,738 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:45:16,738 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:45:16,739 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:45:16,739 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:45:16,739 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:45:16,739 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:45:16,739 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:45:16,764 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:45:16,778 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:45:16,781 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:45:16,782 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:45:16,783 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:45:16,783 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl
[2020-11-25 18:45:16,783 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl'
[2020-11-25 18:45:16,874 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:45:16,875 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:45:16,875 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:45:16,876 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:45:16,876 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:45:16,892 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,894 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,931 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,931 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,955 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,966 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,974 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:16,985 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:45:16,986 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:45:16,986 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:45:16,988 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:45:16,992 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/1) ...
[2020-11-25 18:45:17,008 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 18:45:17,014 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 18:45:17,022 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 18:45:17,029 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s528==_to_s528 && ( _value_s528>balanceOf_TokenERC20[this][_from_s528] || _value_s528>allowance_TokenERC20[this][_from_s528][msg.sender] ) ) && _value_s528>=0 ) && _value_s528<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s528]>=0 ) && balanceOf_TokenERC20[this][_to_s528]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s528]>=0 ) && balanceOf_TokenERC20[this][_from_s528]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s528][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s528][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s528,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:45:17,035 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 18:45:17,035 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(fail_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:45:17,045 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:45:17 PropertyContainer
[2020-11-25 18:45:17,045 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:45:17,046 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:45:17,046 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:45:17,046 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:45:17,047 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/2) ...
[2020-11-25 18:45:17,047 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:45:17,047 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:45:17,063 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:45:17" (2/2) ...
[2020-11-25 18:45:17,063 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:45:17,063 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:45:17,064 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:45:17,064 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:45:17,064 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/2) ...
[2020-11-25 18:45:17,117 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:45:17,117 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:45:17,117 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:45:17,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 18:45:17,118 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 18:45:17,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 18:45:17,119 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 18:45:17,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 18:45:17,119 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 18:45:17,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 18:45:17,119 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 18:45:17,119 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 18:45:17,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 18:45:17,119 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 18:45:17,119 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 18:45:17,120 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 18:45:17,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 18:45:17,120 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20
[2020-11-25 18:45:17,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20
[2020-11-25 18:45:17,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,120 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 18:45:17,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 18:45:17,120 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 18:45:17,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 18:45:17,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 18:45:17,121 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 18:45:17,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 18:45:17,122 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 18:45:17,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 18:45:17,122 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 18:45:17,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 18:45:17,122 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 18:45:17,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 18:45:17,122 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20
[2020-11-25 18:45:17,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20
[2020-11-25 18:45:17,122 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 18:45:17,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 18:45:17,123 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 18:45:17,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 18:45:17,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN_NoBaseCtor__success
[2020-11-25 18:45:17,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN
[2020-11-25 18:45:17,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN
[2020-11-25 18:45:17,123 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ITEN__success
[2020-11-25 18:45:17,123 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ITEN
[2020-11-25 18:45:17,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ITEN
[2020-11-25 18:45:17,123 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ITEN
[2020-11-25 18:45:17,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ITEN
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ITEN
[2020-11-25 18:45:17,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ITEN
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyReleased_pre__success
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 18:45:17,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ITEN
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:45:17,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 18:45:17,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20__success
[2020-11-25 18:45:17,127 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20__fail
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,128 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 18:45:17,129 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20__success
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20__fail
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN_NoBaseCtor__fail
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN__success
[2020-11-25 18:45:17,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN__fail
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ITEN__fail
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ITEN__success
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ITEN__fail
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ITEN__success
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ITEN__fail
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ITEN__success
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ITEN__fail
[2020-11-25 18:45:17,131 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:45:17,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:45:17,132 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:45:17,132 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:45:17,132 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyReleased_pre__fail
[2020-11-25 18:45:17,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:45:17,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:45:17,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:45:17,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:45:17,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:45:17,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 18:45:17,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 18:45:17,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 18:45:17,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 18:45:17,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 18:45:17,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20__fail
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20__success
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 18:45:17,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 18:45:17,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 18:45:17,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20__fail
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20__success
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 18:45:17,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN_NoBaseCtor__fail
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN_NoBaseCtor__success
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN__fail
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN__success
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ITEN__fail
[2020-11-25 18:45:17,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ITEN__success
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ITEN__fail
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ITEN__success
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ITEN__fail
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ITEN__success
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ITEN__fail
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ITEN__success
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:45:17,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyReleased_pre__fail
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyReleased_pre__success
[2020-11-25 18:45:17,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ITEN
[2020-11-25 18:45:17,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:45:17,144 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:45:17,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:45:17,541 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:45:17,541 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:45:17,849 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:45:17,849 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 18:45:17,851 INFO  L202        PluginConnector]: Adding new model ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:45:17 BoogieIcfgContainer
[2020-11-25 18:45:17,852 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:45:17" (2/2) ...
[2020-11-25 18:45:17,852 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:45:17,852 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7f996ef6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:45:17, skipping insertion in model container
[2020-11-25 18:45:17,852 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:45:17,852 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:45:17,852 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:45:17,854 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:45:17,854 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/3) ...
[2020-11-25 18:45:17,854 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@563b9697 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:45:17, skipping insertion in model container
[2020-11-25 18:45:17,854 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:45:17" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:45:17,894 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:45:17 NWAContainer
[2020-11-25 18:45:17,894 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:45:17,895 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:45:17,895 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:45:17,895 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:45:17,896 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:45:17" (3/4) ...
[2020-11-25 18:45:17,897 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@50ce0688 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:45:17, skipping insertion in model container
[2020-11-25 18:45:17,897 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:45:17" (4/4) ...
[2020-11-25 18:45:17,900 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:45:17,904 INFO  L110   BuchiProductObserver]: Initial RCFG 1826 locations, 2454 edges
[2020-11-25 18:45:17,904 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:45:17,915 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:45:19,353 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:45:19,359 INFO  L110   BuchiProductObserver]: BuchiProgram size 4498 locations, 7999 edges
[2020-11-25 18:45:19,359 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:45:19 BoogieIcfgContainer
[2020-11-25 18:45:19,359 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:45:19,359 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:45:19,360 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:45:19,361 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:45:19,361 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:45:19" (1/1) ...
[2020-11-25 18:45:19,483 INFO  L313           BlockEncoder]: Initial Icfg 4498 locations, 7999 edges
[2020-11-25 18:45:19,484 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:45:19,485 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:45:19,485 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:45:19,486 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:45:19,503 INFO  L70    emoveInfeasibleEdges]: Removed 78 edges and 13 locations because of local infeasibility
[2020-11-25 18:45:19,513 INFO  L70        RemoveSinkStates]: Removed 68 edges and 37 locations by removing sink states
[2020-11-25 18:45:19,528 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:45:19,533 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:45:19,538 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:45:19,538 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:45:19,544 INFO  L313           BlockEncoder]: Encoded RCFG 4422 locations, 7815 edges
[2020-11-25 18:45:19,545 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:45:19 BasicIcfg
[2020-11-25 18:45:19,545 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:45:19,545 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:45:19,545 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:45:19,548 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:45:19,548 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:45:19,548 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:45:16" (1/6) ...
[2020-11-25 18:45:19,550 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@248fac7c and model type ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:45:19, skipping insertion in model container
[2020-11-25 18:45:19,550 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:45:19,550 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:45:17" (2/6) ...
[2020-11-25 18:45:19,551 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@248fac7c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:45:19, skipping insertion in model container
[2020-11-25 18:45:19,551 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:45:19,551 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:45:17" (3/6) ...
[2020-11-25 18:45:19,551 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@248fac7c and model type ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:45:19, skipping insertion in model container
[2020-11-25 18:45:19,551 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:45:19,551 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:45:17" (4/6) ...
[2020-11-25 18:45:19,551 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@248fac7c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:45:19, skipping insertion in model container
[2020-11-25 18:45:19,552 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:45:19,552 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:45:19" (5/6) ...
[2020-11-25 18:45:19,552 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@248fac7c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:45:19, skipping insertion in model container
[2020-11-25 18:45:19,552 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:45:19,552 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:45:19" (6/6) ...
[2020-11-25 18:45:19,553 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transferfrom-self-fail.bpl_BEv2
[2020-11-25 18:45:19,592 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:45:19,593 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:45:19,593 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:45:19,593 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:45:19,593 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:45:19,593 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:45:19,593 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:45:19,593 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:45:19,593 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:45:19,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4422 states.
[2020-11-25 18:45:19,692 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:19,692 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:19,692 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:19,700 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:19,700 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:19,700 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:45:19,700 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4422 states.
[2020-11-25 18:45:19,719 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:19,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:19,719 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:19,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:19,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND TRUE   revert
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:19,733 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:19,733 INFO  L82        PathProgramCache]: Analyzing trace with hash 784437826, now seen corresponding path program 1 times
[2020-11-25 18:45:19,737 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:19,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:19,792 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:45:19,794 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:45:19,794 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:45:20,062 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:20,071 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:45:20,071 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:45:20,072 INFO  L87              Difference]: Start difference. First operand 4422 states. Second operand 4 states.
[2020-11-25 18:45:20,488 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:20,488 INFO  L93              Difference]: Finished difference Result 3045 states and 3494 transitions.
[2020-11-25 18:45:20,489 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:45:20,490 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3045 states and 3494 transitions.
[2020-11-25 18:45:20,509 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:20,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3045 states to 3043 states and 3490 transitions.
[2020-11-25 18:45:20,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 18:45:20,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 697
[2020-11-25 18:45:20,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3043 states and 3490 transitions.
[2020-11-25 18:45:20,543 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:20,543 INFO  L728         BuchiCegarLoop]: Abstraction has 3043 states and 3490 transitions.
[2020-11-25 18:45:20,561 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3043 states and 3490 transitions.
[2020-11-25 18:45:20,612 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3043 to 3043.
[2020-11-25 18:45:20,612 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3043 states.
[2020-11-25 18:45:20,617 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3043 states to 3043 states and 3490 transitions.
[2020-11-25 18:45:20,617 INFO  L751         BuchiCegarLoop]: Abstraction has 3043 states and 3490 transitions.
[2020-11-25 18:45:20,617 INFO  L631         BuchiCegarLoop]: Abstraction has 3043 states and 3490 transitions.
[2020-11-25 18:45:20,617 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:45:20,618 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3043 states and 3490 transitions.
[2020-11-25 18:45:20,624 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:20,624 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:20,624 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:20,626 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:20,626 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND TRUE   revert
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND TRUE   revert
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND TRUE   revert
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:20,630 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:20,630 INFO  L82        PathProgramCache]: Analyzing trace with hash -1499878909, now seen corresponding path program 1 times
[2020-11-25 18:45:20,631 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:20,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:20,669 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:45:20,669 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:45:20,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:45:20,671 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:20,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:45:20,671 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:45:20,671 INFO  L87              Difference]: Start difference. First operand 3043 states and 3490 transitions. cyclomatic complexity: 449 Second operand 4 states.
[2020-11-25 18:45:21,319 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:21,319 INFO  L93              Difference]: Finished difference Result 4002 states and 4533 transitions.
[2020-11-25 18:45:21,319 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:45:21,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4002 states and 4533 transitions.
[2020-11-25 18:45:21,333 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:45:21,349 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4002 states to 3732 states and 4193 transitions.
[2020-11-25 18:45:21,349 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 850
[2020-11-25 18:45:21,350 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 892
[2020-11-25 18:45:21,350 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3732 states and 4193 transitions.
[2020-11-25 18:45:21,355 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:21,355 INFO  L728         BuchiCegarLoop]: Abstraction has 3732 states and 4193 transitions.
[2020-11-25 18:45:21,358 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3732 states and 4193 transitions.
[2020-11-25 18:45:21,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3732 to 3338.
[2020-11-25 18:45:21,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3338 states.
[2020-11-25 18:45:21,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3338 states to 3338 states and 3700 transitions.
[2020-11-25 18:45:21,394 INFO  L751         BuchiCegarLoop]: Abstraction has 3338 states and 3700 transitions.
[2020-11-25 18:45:21,394 INFO  L631         BuchiCegarLoop]: Abstraction has 3338 states and 3700 transitions.
[2020-11-25 18:45:21,394 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:45:21,394 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3338 states and 3700 transitions.
[2020-11-25 18:45:21,401 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:45:21,401 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:21,401 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:21,403 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:21,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND TRUE   DType[this] == ITEN
[L2830]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2830]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2831]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND TRUE   DType[this] == ITEN
[L2830]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2830]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2831]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:21,408 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:21,408 INFO  L82        PathProgramCache]: Analyzing trace with hash 1226493587, now seen corresponding path program 1 times
[2020-11-25 18:45:21,409 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:21,430 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:21,606 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 18:45:21,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 18:45:21,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-25 18:45:21,608 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:21,608 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 18:45:21,608 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 18:45:21,608 INFO  L87              Difference]: Start difference. First operand 3338 states and 3700 transitions. cyclomatic complexity: 364 Second operand 14 states.
[2020-11-25 18:45:23,477 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:23,477 INFO  L93              Difference]: Finished difference Result 3429 states and 3803 transitions.
[2020-11-25 18:45:23,477 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 18:45:23,477 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3429 states and 3803 transitions.
[2020-11-25 18:45:23,485 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:45:23,495 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3429 states to 3429 states and 3803 transitions.
[2020-11-25 18:45:23,495 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 860
[2020-11-25 18:45:23,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 18:45:23,496 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3429 states and 3803 transitions.
[2020-11-25 18:45:23,499 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:23,499 INFO  L728         BuchiCegarLoop]: Abstraction has 3429 states and 3803 transitions.
[2020-11-25 18:45:23,501 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3429 states and 3803 transitions.
[2020-11-25 18:45:23,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3429 to 3200.
[2020-11-25 18:45:23,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3200 states.
[2020-11-25 18:45:23,526 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3200 states to 3200 states and 3527 transitions.
[2020-11-25 18:45:23,526 INFO  L751         BuchiCegarLoop]: Abstraction has 3200 states and 3527 transitions.
[2020-11-25 18:45:23,526 INFO  L631         BuchiCegarLoop]: Abstraction has 3200 states and 3527 transitions.
[2020-11-25 18:45:23,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:45:23,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3200 states and 3527 transitions.
[2020-11-25 18:45:23,530 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:23,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:23,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:23,532 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:23,532 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND TRUE   choice == 9
[L4860]              gas := gas - 21000;
[L4861]  COND TRUE   gas >= 0
[L4862]              assume _value_s417 >= 0 && _value_s417 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4863]              assume msgvalue_MSG == 0;
[L4864]  CALL        call success_s417 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L551]               havoc __exception;
[L552]               revert := false;
[L553]   COND FALSE  !(__exception)
[L579]   CALL        call success_s417 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L2647]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2647]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2648]  COND FALSE  !(revert)
[L2651]              __var_6 := null;
[L2652]  COND FALSE  !(!(_spender_s417 != null))
[L2656]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s417];
[L2657]              allowance_TokenERC20[this][msgsender_MSG][_spender_s417] := _value_s417;
[L2658]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s417];
[L2659]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2660]              success_s417 := true;
[L579]   RET         call success_s417 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L580]               assume !revert && gas >= 0;
[L4864]  RET         call success_s417 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L4941]  RET         call CorralChoice_ITEN(this);
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND TRUE   DType[this] == ITEN
[L2830]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2830]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2831]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:23,536 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:23,536 INFO  L82        PathProgramCache]: Analyzing trace with hash -312584009, now seen corresponding path program 1 times
[2020-11-25 18:45:23,537 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:23,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:23,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 92 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 92 trivial. 0 not checked.
[2020-11-25 18:45:23,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:45:23,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 18:45:23,733 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:23,733 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 18:45:23,733 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 18:45:23,733 INFO  L87              Difference]: Start difference. First operand 3200 states and 3527 transitions. cyclomatic complexity: 330 Second operand 14 states.
[2020-11-25 18:45:25,302 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:25,302 INFO  L93              Difference]: Finished difference Result 3285 states and 3637 transitions.
[2020-11-25 18:45:25,303 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 18:45:25,303 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3285 states and 3637 transitions.
[2020-11-25 18:45:25,309 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:25,317 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3285 states to 3285 states and 3637 transitions.
[2020-11-25 18:45:25,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 788
[2020-11-25 18:45:25,317 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 788
[2020-11-25 18:45:25,317 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3285 states and 3637 transitions.
[2020-11-25 18:45:25,321 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:25,321 INFO  L728         BuchiCegarLoop]: Abstraction has 3285 states and 3637 transitions.
[2020-11-25 18:45:25,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3285 states and 3637 transitions.
[2020-11-25 18:45:25,345 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3285 to 3237.
[2020-11-25 18:45:25,345 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3237 states.
[2020-11-25 18:45:25,348 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3237 states to 3237 states and 3580 transitions.
[2020-11-25 18:45:25,348 INFO  L751         BuchiCegarLoop]: Abstraction has 3237 states and 3580 transitions.
[2020-11-25 18:45:25,348 INFO  L631         BuchiCegarLoop]: Abstraction has 3237 states and 3580 transitions.
[2020-11-25 18:45:25,348 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:45:25,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3237 states and 3580 transitions.
[2020-11-25 18:45:25,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:25,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:25,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:25,353 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:25,353 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND TRUE   choice == 9
[L4860]              gas := gas - 21000;
[L4861]  COND TRUE   gas >= 0
[L4862]              assume _value_s417 >= 0 && _value_s417 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4863]              assume msgvalue_MSG == 0;
[L4864]  CALL        call success_s417 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L551]               havoc __exception;
[L552]               revert := false;
[L553]   COND FALSE  !(__exception)
[L579]   CALL        call success_s417 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L2647]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2647]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2648]  COND FALSE  !(revert)
[L2651]              __var_6 := null;
[L2652]  COND FALSE  !(!(_spender_s417 != null))
[L2656]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s417];
[L2657]              allowance_TokenERC20[this][msgsender_MSG][_spender_s417] := _value_s417;
[L2658]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s417];
[L2659]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2660]              success_s417 := true;
[L579]   RET         call success_s417 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L580]               assume !revert && gas >= 0;
[L4864]  RET         call success_s417 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s417, _value_s417);
[L4941]  RET         call CorralChoice_ITEN(this);
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND FALSE  !(DType[this] == ITEN)
[L2834]  COND TRUE   DType[this] == TokenERC20
[L2835]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2581]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2581]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2582]  COND FALSE  !(revert)
[L2585]              __var_2 := null;
[L2586]  COND FALSE  !(!(_to_s379 != null))
[L2590]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s379] >= _value_s379))
[L2594]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s379] + _value_s379) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s379]))
[L2598]  CALL        call previousBalances_s379 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2598]  RET         call previousBalances_s379 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2599]  COND FALSE  !(revert)
[L2602]              previousBalances_s379 := previousBalances_s379;
[L2603]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], _value_s379);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2603]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], _value_s379);
[L2604]  COND FALSE  !(revert)
[L2607]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s379];
[L2608]              balanceOf_TokenERC20[this][_from_s379] := __var_3;
[L2609]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s379];
[L2610]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s379], _value_s379);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2610]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s379], _value_s379);
[L2611]  COND FALSE  !(revert)
[L2614]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s379];
[L2615]              balanceOf_TokenERC20[this][_to_s379] := __var_4;
[L2616]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s379];
[L2617]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2618]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2618]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2619]  COND FALSE  !(revert)
[L2622]              assert __var_5 == previousBalances_s379;
[L2835]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2836]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:25,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:25,357 INFO  L82        PathProgramCache]: Analyzing trace with hash 707201725, now seen corresponding path program 1 times
[2020-11-25 18:45:25,358 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:25,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:25,471 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 18:45:25,471 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:45:25,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 18:45:25,472 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:25,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 18:45:25,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 18:45:25,472 INFO  L87              Difference]: Start difference. First operand 3237 states and 3580 transitions. cyclomatic complexity: 348 Second operand 6 states.
[2020-11-25 18:45:25,508 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:25,508 INFO  L93              Difference]: Finished difference Result 3251 states and 3587 transitions.
[2020-11-25 18:45:25,509 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 18:45:25,509 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3251 states and 3587 transitions.
[2020-11-25 18:45:25,514 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:25,520 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3251 states to 3207 states and 3540 transitions.
[2020-11-25 18:45:25,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 762
[2020-11-25 18:45:25,521 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 762
[2020-11-25 18:45:25,521 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3207 states and 3540 transitions.
[2020-11-25 18:45:25,524 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:25,524 INFO  L728         BuchiCegarLoop]: Abstraction has 3207 states and 3540 transitions.
[2020-11-25 18:45:25,526 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3207 states and 3540 transitions.
[2020-11-25 18:45:25,542 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3207 to 3207.
[2020-11-25 18:45:25,542 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3207 states.
[2020-11-25 18:45:25,544 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3207 states to 3207 states and 3540 transitions.
[2020-11-25 18:45:25,544 INFO  L751         BuchiCegarLoop]: Abstraction has 3207 states and 3540 transitions.
[2020-11-25 18:45:25,544 INFO  L631         BuchiCegarLoop]: Abstraction has 3207 states and 3540 transitions.
[2020-11-25 18:45:25,544 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:45:25,545 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3207 states and 3540 transitions.
[2020-11-25 18:45:25,548 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:25,548 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:25,548 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:25,549 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:25,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND TRUE   __exception
[L1366]              __tmp__Balance := Balance;
[L1367]              __tmp__DType := DType;
[L1368]              __tmp__Alloc := Alloc;
[L1369]              __tmp__balance_ADDR := balance_ADDR;
[L1370]              __tmp__M_Ref_int := M_Ref_int;
[L1371]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L1372]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L1373]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1374]              __tmp__sum_allowance1 := sum_allowance1;
[L1375]              __tmp__M_Ref_bool := M_Ref_bool;
[L1376]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1377]              __tmp__Length := Length;
[L1378]              __tmp__now := now;
[L1379]              __tmp__owner_owned := owner_owned;
[L1380]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1381]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1382]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1383]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L1384]              __tmp__released_TokenERC20 := released_TokenERC20;
[L1385]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L1386]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L1387]              __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L1388]  CALL        call ITEN_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3088]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2347]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2328]              assume msgsender_MSG != null;
[L2329]              __tmp__Balance[this] := 0;
[L2330]              __tmp__owner_owned[this] := null;
[L2332]              __tmp__owner_owned[this] := msgsender_MSG;
[L2347]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2348]  COND FALSE  !(revert)
[L3088]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L3089]  COND FALSE  !(revert)
[L3092]  CALL        call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2476]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2347]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2328]              assume msgsender_MSG != null;
[L2329]              __tmp__Balance[this] := 0;
[L2330]              __tmp__owner_owned[this] := null;
[L2332]              __tmp__owner_owned[this] := msgsender_MSG;
[L2347]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2348]  COND FALSE  !(revert)
[L2476]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2477]  COND FALSE  !(revert)
[L2480]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2427]              assume msgsender_MSG != null;
[L2428]              __tmp__Balance[this] := 0;
[L2429]              __tmp__name_TokenERC20[this] := 484439318;
[L2430]              __tmp__symbol_TokenERC20[this] := 484439318;
[L2431]              __tmp__decimals_TokenERC20[this] := 18;
[L2432]              __tmp__totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2433]              __tmp__released_TokenERC20[this] := true;
[L2434]              __tmp__balanceOf_TokenERC20[this] := zeroRefintArr();
[L2435]              __tmp__sum_balanceOf0[this] := 0;
[L2436]              __tmp__allowance_TokenERC20[this] := zeroRefRefintArr();
[L2437]              __tmp__sum_allowance1[this] := 0;
[L2439]              __var_1 := __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2440]              __tmp__totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2441]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2442]              __tmp__balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2443]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2444]              __tmp__name_TokenERC20[this] := 484439318;
[L2445]              __tmp__symbol_TokenERC20[this] := 484439318;
[L2480]  RET         call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2481]  COND FALSE  !(revert)
[L3092]  RET         call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3093]  COND FALSE  !(revert)
[L3096]  CALL        call ITEN_ITEN_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3071]              assume msgsender_MSG != null;
[L3072]              __tmp__Balance[this] := 0;
[L3073]              __tmp__frozenAccount_ITEN[this] := zeroRefboolArr();
[L3096]  RET         call ITEN_ITEN_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3097]  COND FALSE  !(revert)
[L1388]  RET         call ITEN_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1389]              assume revert || gas < 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND TRUE   DType[this] == ITEN
[L2830]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2830]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2831]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:25,552 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:25,552 INFO  L82        PathProgramCache]: Analyzing trace with hash -1386295044, now seen corresponding path program 1 times
[2020-11-25 18:45:25,553 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:25,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:25,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 20 trivial. 0 not checked.
[2020-11-25 18:45:25,590 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:45:25,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:45:25,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:25,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:45:25,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:45:25,590 INFO  L87              Difference]: Start difference. First operand 3207 states and 3540 transitions. cyclomatic complexity: 338 Second operand 4 states.
[2020-11-25 18:45:25,810 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:25,810 INFO  L93              Difference]: Finished difference Result 3991 states and 4562 transitions.
[2020-11-25 18:45:25,811 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:45:25,811 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3991 states and 4562 transitions.
[2020-11-25 18:45:25,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 18:45:25,828 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3991 states to 3900 states and 4470 transitions.
[2020-11-25 18:45:25,828 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 956
[2020-11-25 18:45:25,829 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 18:45:25,829 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3900 states and 4470 transitions.
[2020-11-25 18:45:25,832 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:25,832 INFO  L728         BuchiCegarLoop]: Abstraction has 3900 states and 4470 transitions.
[2020-11-25 18:45:25,835 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3900 states and 4470 transitions.
[2020-11-25 18:45:25,854 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3900 to 3116.
[2020-11-25 18:45:25,854 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3116 states.
[2020-11-25 18:45:25,856 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3116 states to 3116 states and 3447 transitions.
[2020-11-25 18:45:25,856 INFO  L751         BuchiCegarLoop]: Abstraction has 3116 states and 3447 transitions.
[2020-11-25 18:45:25,856 INFO  L631         BuchiCegarLoop]: Abstraction has 3116 states and 3447 transitions.
[2020-11-25 18:45:25,856 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:45:25,856 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3116 states and 3447 transitions.
[2020-11-25 18:45:25,859 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:45:25,859 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:45:25,859 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:45:25,861 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:45:25,861 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND FALSE  !(choice == 6)
[L4887]  COND FALSE  !(choice == 5)
[L4894]  COND TRUE   choice == 4
[L4895]              gas := gas - 21000;
[L4896]  COND TRUE   gas >= 0
[L4897]              assume _value_s648 >= 0 && _value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4898]              assume msgvalue_MSG == 0;
[L4899]  CALL        call success_s648 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L867]               havoc __exception;
[L868]               revert := false;
[L869]   COND FALSE  !(__exception)
[L895]   CALL        call success_s648 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L2948]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2948]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  COND FALSE  !(revert)
[L2952]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s648] >= _value_s648))
[L2956]  COND FALSE  !(!(_value_s648 <= allowance_TokenERC20[this][_from_s648][msgsender_MSG]))
[L2960]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s648], _value_s648);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2960]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s648], _value_s648);
[L2961]  COND FALSE  !(revert)
[L2964]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s648];
[L2965]              balanceOf_TokenERC20[this][_from_s648] := __var_13;
[L2966]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s648];
[L2967]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s648][msgsender_MSG], _value_s648);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2967]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s648][msgsender_MSG], _value_s648);
[L2968]  COND FALSE  !(revert)
[L2971]              sum_allowance1[_from_s648] := sum_allowance1[_from_s648] - allowance_TokenERC20[this][_from_s648][msgsender_MSG];
[L2972]              allowance_TokenERC20[this][_from_s648][msgsender_MSG] := __var_14;
[L2973]              sum_allowance1[_from_s648] := sum_allowance1[_from_s648] + allowance_TokenERC20[this][_from_s648][msgsender_MSG];
[L2974]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s648);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2974]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s648);
[L2975]  COND FALSE  !(revert)
[L2978]              totalSupply_TokenERC20[this] := __var_15;
[L2979]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L2980]              success_s648 := true;
[L895]   RET         call success_s648 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L896]               assume !revert && gas >= 0;
[L4899]  RET         call success_s648 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L4941]  RET         call CorralChoice_ITEN(this);
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND TRUE   DType[this] == ITEN
[L2830]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2830]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2831]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND TRUE   choice == 6
[L4881]              gas := gas - 21000;
[L4882]  COND TRUE   gas >= 0
[L4883]              assume _value_s528 >= 0 && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4884]              assume msgvalue_MSG == 0;
[L4885]  CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s528 == _to_s528 && (_value_s528 > balanceOf_TokenERC20[this][_from_s528] || _value_s528 > allowance_TokenERC20[this][_from_s528][msgsender_MSG])) && _value_s528 >= 0) && _value_s528 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s528] >= 0) && balanceOf_TokenERC20[this][_to_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s528] >= 0) && balanceOf_TokenERC20[this][_from_s528] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s528][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L739]               havoc __exception;
[L740]               revert := false;
[L741]   COND FALSE  !(__exception)
[L767]   CALL        call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2814]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2814]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  COND FALSE  !(!(_value_s528 <= allowance_TokenERC20[this][_from_s528][msgsender_MSG]))
[L2822]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2822]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s528][msgsender_MSG], _value_s528);
[L2823]  COND FALSE  !(revert)
[L2826]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] - allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2827]              allowance_TokenERC20[this][_from_s528][msgsender_MSG] := __var_10;
[L2828]              sum_allowance1[_from_s528] := sum_allowance1[_from_s528] + allowance_TokenERC20[this][_from_s528][msgsender_MSG];
[L2829]  COND TRUE   DType[this] == ITEN
[L2830]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2830]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L2831]  COND FALSE  !(revert)
[L2842]              success_s528 := true;
[L767]   RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L768]               assume !revert && gas >= 0;
[L4885]  RET         call success_s528 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s528, _to_s528, _value_s528);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:45:25,865 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:45:25,865 INFO  L82        PathProgramCache]: Analyzing trace with hash -1720079742, now seen corresponding path program 1 times
[2020-11-25 18:45:25,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:45:25,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:45:25,976 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-11-25 18:45:25,976 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:45:25,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 18:45:25,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:45:25,976 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 18:45:25,976 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=84, Unknown=0, NotChecked=0, Total=110
[2020-11-25 18:45:25,977 INFO  L87              Difference]: Start difference. First operand 3116 states and 3447 transitions. cyclomatic complexity: 336 Second operand 11 states.
[2020-11-25 18:45:26,621 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:45:26,621 INFO  L93              Difference]: Finished difference Result 1747 states and 1926 transitions.
[2020-11-25 18:45:26,621 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 18:45:26,621 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1747 states and 1926 transitions.
[2020-11-25 18:45:26,624 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:45:26,624 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1747 states to 0 states and 0 transitions.
[2020-11-25 18:45:26,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 18:45:26,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 18:45:26,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 18:45:26,624 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:45:26,624 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:45:26,624 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:45:26,624 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:45:26,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:45:26,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 18:45:26,624 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:45:26,625 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 18:45:26,627 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:45:26 BasicIcfg
[2020-11-25 18:45:26,627 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 18:45:26,628 INFO  L168              Benchmark]: Toolchain (without parser) took 9753.37 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 852.0 MB). Free memory was 935.2 MB in the beginning and 1.4 GB in the end (delta: -511.8 MB). Peak memory consumption was 340.2 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,629 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,629 INFO  L168              Benchmark]: Boogie Preprocessor took 110.02 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,629 INFO  L168              Benchmark]: UtopiaSpecLang took 59.74 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,629 INFO  L168              Benchmark]: Boogie Printer took 17.40 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,630 INFO  L168              Benchmark]: RCFGBuilder took 788.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.3 MB). Peak memory consumption was 134.3 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,630 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.17 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,630 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1464.49 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 232.8 MB). Free memory was 775.9 MB in the beginning and 956.9 MB in the end (delta: -181.0 MB). Peak memory consumption was 183.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,631 INFO  L168              Benchmark]: BlockEncodingV2 took 185.33 ms. Allocated memory is still 1.3 GB. Free memory was 951.9 MB in the beginning and 880.4 MB in the end (delta: 71.5 MB). Peak memory consumption was 71.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,631 INFO  L168              Benchmark]: BuchiAutomizer took 7082.33 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 619.2 MB). Free memory was 880.4 MB in the beginning and 1.4 GB in the end (delta: -566.6 MB). Peak memory consumption was 52.6 MB. Max. memory is 15.3 GB.
[2020-11-25 18:45:26,633 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4498 locations, 7999 edges
  - StatisticsResult: Encoded RCFG
    4422 locations, 7815 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.02 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.74 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.40 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 788.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.3 MB). Peak memory consumption was 134.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.17 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1464.49 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 232.8 MB). Free memory was 775.9 MB in the beginning and 956.9 MB in the end (delta: -181.0 MB). Peak memory consumption was 183.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 185.33 ms. Allocated memory is still 1.3 GB. Free memory was 951.9 MB in the beginning and 880.4 MB in the end (delta: 71.5 MB). Peak memory consumption was 71.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7082.33 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 619.2 MB). Free memory was 880.4 MB in the beginning and 1.4 GB in the end (delta: -566.6 MB). Peak memory consumption was 52.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1826 locations, 2454 edges
  - StatisticsResult: BuchiProgram size
    4498 locations, 7999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 14 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.0s and 8 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.0s. Construction of modules took 4.0s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1455 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3338 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 22290 SDtfs, 18082 SDslu, 46308 SDs, 0 SdLazy, 66307 SolverSat, 2786 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(fail_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
