This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:30:28,013 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:30:28,014 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:30:28,025 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:30:28,025 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:30:28,026 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:30:28,026 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:30:28,028 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:30:28,029 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:30:28,030 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:30:28,031 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:30:28,031 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:30:28,032 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:30:28,032 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:30:28,033 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:30:28,034 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:30:28,034 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:30:28,036 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:30:28,037 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:30:28,039 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:30:28,039 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:30:28,040 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:30:28,042 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:30:28,042 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:30:28,042 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:30:28,043 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:30:28,043 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:30:28,044 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:30:28,044 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:30:28,044 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:30:28,045 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:30:28,045 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:30:28,046 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:30:28,046 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:30:28,047 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:30:28,047 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:30:28,048 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:30:28,048 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:30:28,048 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:30:28,049 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:30:28,049 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:30:28,049 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:30:28,057 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:30:28,057 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:30:28,058 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:30:28,058 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:30:28,058 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:30:28,059 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:30:28,059 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:30:28,059 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:30:28,059 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:30:28,059 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:30:28,059 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:30:28,059 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:30:28,059 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:30:28,059 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:30:28,060 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:30:28,060 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:30:28,061 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:30:28,061 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:30:28,083 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:30:28,096 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:30:28,099 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:30:28,100 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:30:28,101 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:30:28,101 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl
[2020-11-25 02:30:28,102 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl'
[2020-11-25 02:30:28,224 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:30:28,226 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:30:28,226 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:30:28,226 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:30:28,226 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:30:28,243 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,245 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,285 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,286 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,316 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,333 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,348 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,367 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:30:28,368 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:30:28,368 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:30:28,370 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:30:28,374 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/1) ...
[2020-11-25 02:30:28,397 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:28,402 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:28,410 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:28,419 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s916 && value_s916<=_balances_ERC20[this][msg.sender] ) && value_s916>=0 ) && value_s916<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s916]>=0 ) && _balances_ERC20[this][to_s916]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:30:28,422 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 02:30:28,429 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:28,429 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:30:28,453 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:28 PropertyContainer
[2020-11-25 02:30:28,453 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:30:28,454 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:30:28,454 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:30:28,454 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:30:28,455 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/2) ...
[2020-11-25 02:30:28,455 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:30:28,455 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:30:28,482 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:28" (2/2) ...
[2020-11-25 02:30:28,483 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:30:28,483 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:30:28,483 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:30:28,483 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:30:28,484 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/2) ...
[2020-11-25 02:30:28,540 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:30:28,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:30:28,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:30:28,541 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:30:28,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,542 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:30:28,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:30:28,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:30:28,543 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:30:28,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:30:28,543 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:30:28,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:30:28,543 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:30:28,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:30:28,543 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:28,544 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:30:28,544 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:30:28,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:30:28,545 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:30:28,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:30:28,546 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:30:28,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:30:28,546 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:30:28,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:30:28,546 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:30:28,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:30:28,546 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:30:28,546 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:30:28,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:30:28,547 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:30:28,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:30:28,547 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:30:28,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:30:28,547 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:30:28,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:30:28,547 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:30:28,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:30:28,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:30:28,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:30:28,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:28,549 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:30:28,549 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:30:28,549 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:30:28,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:30:28,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:30:28,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:30:28,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:30:28,550 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:30:28,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:30:28,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:30:28,551 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:30:28,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:30:28,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:30:28,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:30:28,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:30:28,551 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:30:28,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:30:28,551 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:30:28,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:30:28,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:30:28,552 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:30:28,553 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:30:28,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:30:28,555 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,556 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:30:28,557 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:30:28,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:30:28,559 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:30:28,560 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,561 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:30:28,562 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:30:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:30:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:30:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:30:28,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:30:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:30:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:30:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:30:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:30:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:30:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:30:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:30:28,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:30:28,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:30:28,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:30:28,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:30:28,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:30:28,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:30:28,580 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:30:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:30:28,580 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:30:29,685 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:29,685 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:29,686 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:29,989 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:30:29,990 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:30:29,992 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:29 BoogieIcfgContainer
[2020-11-25 02:30:29,992 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:28" (2/2) ...
[2020-11-25 02:30:29,993 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:30:29,993 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6baaaa48 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:29, skipping insertion in model container
[2020-11-25 02:30:29,993 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:30:29,993 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:30:29,993 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:30:29,994 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:30:29,995 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/3) ...
[2020-11-25 02:30:29,995 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@17a8159b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:29, skipping insertion in model container
[2020-11-25 02:30:29,995 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:28" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:30:30,032 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:30 NWAContainer
[2020-11-25 02:30:30,032 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:30:30,032 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:30:30,032 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:30:30,033 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:30:30,034 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:29" (3/4) ...
[2020-11-25 02:30:30,035 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@33f00c42 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:30, skipping insertion in model container
[2020-11-25 02:30:30,035 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:30" (4/4) ...
[2020-11-25 02:30:30,038 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:30:30,044 INFO  L110   BuchiProductObserver]: Initial RCFG 3603 locations, 5216 edges
[2020-11-25 02:30:30,044 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:30:30,058 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:30:33,096 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:30:33,108 INFO  L110   BuchiProductObserver]: BuchiProgram size 9262 locations, 17155 edges
[2020-11-25 02:30:33,108 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:33 BoogieIcfgContainer
[2020-11-25 02:30:33,108 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:30:33,108 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:30:33,108 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:30:33,110 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:30:33,110 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:33" (1/1) ...
[2020-11-25 02:30:33,262 INFO  L313           BlockEncoder]: Initial Icfg 9262 locations, 17155 edges
[2020-11-25 02:30:33,263 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:30:33,263 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:30:33,263 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:30:33,264 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:30:33,281 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:30:33,295 INFO  L70        RemoveSinkStates]: Removed 116 edges and 77 locations by removing sink states
[2020-11-25 02:30:33,319 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:30:33,325 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:30:33,331 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:30:33,331 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:30:33,334 INFO  L313           BlockEncoder]: Encoded RCFG 9106 locations, 16728 edges
[2020-11-25 02:30:33,335 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:30:33 BasicIcfg
[2020-11-25 02:30:33,335 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:30:33,335 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:30:33,335 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:30:33,337 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:30:33,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:33,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:28" (1/6) ...
[2020-11-25 02:30:33,338 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e8483fd and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:30:33, skipping insertion in model container
[2020-11-25 02:30:33,338 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:33,338 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:28" (2/6) ...
[2020-11-25 02:30:33,339 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e8483fd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:30:33, skipping insertion in model container
[2020-11-25 02:30:33,339 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:33,339 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:29" (3/6) ...
[2020-11-25 02:30:33,339 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e8483fd and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:30:33, skipping insertion in model container
[2020-11-25 02:30:33,339 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:33,339 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:30" (4/6) ...
[2020-11-25 02:30:33,339 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e8483fd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:30:33, skipping insertion in model container
[2020-11-25 02:30:33,339 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:33,339 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:33" (5/6) ...
[2020-11-25 02:30:33,340 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e8483fd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:30:33, skipping insertion in model container
[2020-11-25 02:30:33,340 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:33,340 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:30:33" (6/6) ...
[2020-11-25 02:30:33,341 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self.bpl_BEv2
[2020-11-25 02:30:33,374 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:30:33,375 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:30:33,375 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:30:33,375 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:30:33,375 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:30:33,375 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:30:33,375 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:30:33,375 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:30:33,375 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:30:33,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9106 states.
[2020-11-25 02:30:33,528 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:33,528 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:33,528 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:33,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:33,538 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:33,538 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:30:33,538 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9106 states.
[2020-11-25 02:30:33,578 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:33,579 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:33,579 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:33,581 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:33,581 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:33,603 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:33,603 INFO  L82        PathProgramCache]: Analyzing trace with hash -78357883, now seen corresponding path program 1 times
[2020-11-25 02:30:33,610 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:33,632 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:33,674 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:30:33,676 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:33,676 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:30:33,996 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:34,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:30:34,009 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:30:34,010 INFO  L87              Difference]: Start difference. First operand 9106 states. Second operand 4 states.
[2020-11-25 02:30:34,951 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:34,951 INFO  L93              Difference]: Finished difference Result 5019 states and 6071 transitions.
[2020-11-25 02:30:34,952 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:30:34,954 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5019 states and 6071 transitions.
[2020-11-25 02:30:34,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:35,034 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5019 states to 5019 states and 6071 transitions.
[2020-11-25 02:30:35,035 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:30:35,038 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 02:30:35,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5019 states and 6071 transitions.
[2020-11-25 02:30:35,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:35,053 INFO  L728         BuchiCegarLoop]: Abstraction has 5019 states and 6071 transitions.
[2020-11-25 02:30:35,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5019 states and 6071 transitions.
[2020-11-25 02:30:35,153 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5019 to 5019.
[2020-11-25 02:30:35,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5019 states.
[2020-11-25 02:30:35,164 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5019 states to 5019 states and 6071 transitions.
[2020-11-25 02:30:35,165 INFO  L751         BuchiCegarLoop]: Abstraction has 5019 states and 6071 transitions.
[2020-11-25 02:30:35,165 INFO  L631         BuchiCegarLoop]: Abstraction has 5019 states and 6071 transitions.
[2020-11-25 02:30:35,165 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:30:35,165 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5019 states and 6071 transitions.
[2020-11-25 02:30:35,180 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:35,180 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:35,180 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:35,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:35,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:35,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:35,189 INFO  L82        PathProgramCache]: Analyzing trace with hash 1507294990, now seen corresponding path program 1 times
[2020-11-25 02:30:35,190 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:35,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:35,229 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:30:35,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:35,229 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:30:35,231 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:35,231 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:30:35,231 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:30:35,231 INFO  L87              Difference]: Start difference. First operand 5019 states and 6071 transitions. cyclomatic complexity: 1054 Second operand 3 states.
[2020-11-25 02:30:35,485 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:35,486 INFO  L93              Difference]: Finished difference Result 6849 states and 8298 transitions.
[2020-11-25 02:30:35,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:30:35,486 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6849 states and 8298 transitions.
[2020-11-25 02:30:35,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:35,531 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6849 states to 6849 states and 8298 transitions.
[2020-11-25 02:30:35,531 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1489
[2020-11-25 02:30:35,532 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1489
[2020-11-25 02:30:35,532 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6849 states and 8298 transitions.
[2020-11-25 02:30:35,539 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:35,539 INFO  L728         BuchiCegarLoop]: Abstraction has 6849 states and 8298 transitions.
[2020-11-25 02:30:35,545 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6849 states and 8298 transitions.
[2020-11-25 02:30:35,608 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6849 to 5973.
[2020-11-25 02:30:35,608 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5973 states.
[2020-11-25 02:30:35,616 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5973 states to 5973 states and 7242 transitions.
[2020-11-25 02:30:35,617 INFO  L751         BuchiCegarLoop]: Abstraction has 5973 states and 7242 transitions.
[2020-11-25 02:30:35,617 INFO  L631         BuchiCegarLoop]: Abstraction has 5973 states and 7242 transitions.
[2020-11-25 02:30:35,617 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:30:35,617 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5973 states and 7242 transitions.
[2020-11-25 02:30:35,625 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:35,625 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:35,625 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:35,627 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:35,627 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:35,631 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:35,631 INFO  L82        PathProgramCache]: Analyzing trace with hash -1965670221, now seen corresponding path program 1 times
[2020-11-25 02:30:35,632 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:35,642 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:35,707 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:30:35,708 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:35,708 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:30:35,708 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:35,708 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:30:35,708 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:30:35,709 INFO  L87              Difference]: Start difference. First operand 5973 states and 7242 transitions. cyclomatic complexity: 1271 Second operand 7 states.
[2020-11-25 02:30:35,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:35,960 INFO  L93              Difference]: Finished difference Result 6024 states and 7313 transitions.
[2020-11-25 02:30:35,960 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:30:35,960 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6024 states and 7313 transitions.
[2020-11-25 02:30:35,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6024 states to 5985 states and 7257 transitions.
[2020-11-25 02:30:36,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1260
[2020-11-25 02:30:36,025 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1260
[2020-11-25 02:30:36,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5985 states and 7257 transitions.
[2020-11-25 02:30:36,031 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:36,031 INFO  L728         BuchiCegarLoop]: Abstraction has 5985 states and 7257 transitions.
[2020-11-25 02:30:36,037 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5985 states and 7257 transitions.
[2020-11-25 02:30:36,093 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5985 to 5985.
[2020-11-25 02:30:36,093 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5985 states.
[2020-11-25 02:30:36,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5985 states to 5985 states and 7257 transitions.
[2020-11-25 02:30:36,102 INFO  L751         BuchiCegarLoop]: Abstraction has 5985 states and 7257 transitions.
[2020-11-25 02:30:36,102 INFO  L631         BuchiCegarLoop]: Abstraction has 5985 states and 7257 transitions.
[2020-11-25 02:30:36,102 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:30:36,102 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5985 states and 7257 transitions.
[2020-11-25 02:30:36,113 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,113 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:36,113 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:36,115 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:36,116 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:36,130 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:36,130 INFO  L82        PathProgramCache]: Analyzing trace with hash 1556236957, now seen corresponding path program 1 times
[2020-11-25 02:30:36,131 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:36,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:36,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:30:36,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:36,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:30:36,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:36,186 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:30:36,186 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:30:36,186 INFO  L87              Difference]: Start difference. First operand 5985 states and 7257 transitions. cyclomatic complexity: 1274 Second operand 9 states.
[2020-11-25 02:30:36,275 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:36,275 INFO  L93              Difference]: Finished difference Result 6043 states and 7349 transitions.
[2020-11-25 02:30:36,275 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:30:36,276 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6043 states and 7349 transitions.
[2020-11-25 02:30:36,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,304 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6043 states to 6043 states and 7349 transitions.
[2020-11-25 02:30:36,304 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1269
[2020-11-25 02:30:36,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-11-25 02:30:36,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6043 states and 7349 transitions.
[2020-11-25 02:30:36,311 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:36,311 INFO  L728         BuchiCegarLoop]: Abstraction has 6043 states and 7349 transitions.
[2020-11-25 02:30:36,316 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6043 states and 7349 transitions.
[2020-11-25 02:30:36,353 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6043 to 5998.
[2020-11-25 02:30:36,353 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5998 states.
[2020-11-25 02:30:36,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5998 states to 5998 states and 7287 transitions.
[2020-11-25 02:30:36,359 INFO  L751         BuchiCegarLoop]: Abstraction has 5998 states and 7287 transitions.
[2020-11-25 02:30:36,359 INFO  L631         BuchiCegarLoop]: Abstraction has 5998 states and 7287 transitions.
[2020-11-25 02:30:36,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:30:36,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5998 states and 7287 transitions.
[2020-11-25 02:30:36,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:36,366 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:36,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:36,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND TRUE   !(account_s713 != null)
[L4879]              revert := true;
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND TRUE   revert
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:36,370 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:36,370 INFO  L82        PathProgramCache]: Analyzing trace with hash 2081687614, now seen corresponding path program 1 times
[2020-11-25 02:30:36,371 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:36,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:36,411 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:30:36,411 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:36,411 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:30:36,411 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:36,411 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:30:36,411 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:30:36,412 INFO  L87              Difference]: Start difference. First operand 5998 states and 7287 transitions. cyclomatic complexity: 1291 Second operand 10 states.
[2020-11-25 02:30:36,500 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:36,500 INFO  L93              Difference]: Finished difference Result 6070 states and 7397 transitions.
[2020-11-25 02:30:36,500 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:30:36,500 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6070 states and 7397 transitions.
[2020-11-25 02:30:36,511 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,525 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6070 states to 6070 states and 7397 transitions.
[2020-11-25 02:30:36,525 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1276
[2020-11-25 02:30:36,526 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1276
[2020-11-25 02:30:36,527 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6070 states and 7397 transitions.
[2020-11-25 02:30:36,531 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:36,531 INFO  L728         BuchiCegarLoop]: Abstraction has 6070 states and 7397 transitions.
[2020-11-25 02:30:36,535 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6070 states and 7397 transitions.
[2020-11-25 02:30:36,569 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6070 to 6005.
[2020-11-25 02:30:36,570 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6005 states.
[2020-11-25 02:30:36,576 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6005 states to 6005 states and 7296 transitions.
[2020-11-25 02:30:36,576 INFO  L751         BuchiCegarLoop]: Abstraction has 6005 states and 7296 transitions.
[2020-11-25 02:30:36,576 INFO  L631         BuchiCegarLoop]: Abstraction has 6005 states and 7296 transitions.
[2020-11-25 02:30:36,576 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:30:36,576 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6005 states and 7296 transitions.
[2020-11-25 02:30:36,582 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:36,582 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:36,583 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:36,583 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND TRUE   !!__var_18
[L4816]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:36,585 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:36,585 INFO  L82        PathProgramCache]: Analyzing trace with hash -1679085093, now seen corresponding path program 1 times
[2020-11-25 02:30:36,586 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:36,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:36,615 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:30:36,615 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:36,615 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:30:36,615 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:36,616 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:30:36,616 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:30:36,616 INFO  L87              Difference]: Start difference. First operand 6005 states and 7296 transitions. cyclomatic complexity: 1293 Second operand 3 states.
[2020-11-25 02:30:36,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:36,714 INFO  L93              Difference]: Finished difference Result 6869 states and 7930 transitions.
[2020-11-25 02:30:36,714 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:30:36,714 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6869 states and 7930 transitions.
[2020-11-25 02:30:36,726 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:36,741 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6869 states to 6165 states and 7075 transitions.
[2020-11-25 02:30:36,741 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1266
[2020-11-25 02:30:36,741 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1332
[2020-11-25 02:30:36,741 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6165 states and 7075 transitions.
[2020-11-25 02:30:36,745 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:36,745 INFO  L728         BuchiCegarLoop]: Abstraction has 6165 states and 7075 transitions.
[2020-11-25 02:30:36,750 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6165 states and 7075 transitions.
[2020-11-25 02:30:36,776 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6165 to 5421.
[2020-11-25 02:30:36,777 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5421 states.
[2020-11-25 02:30:36,781 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5421 states to 5421 states and 6151 transitions.
[2020-11-25 02:30:36,782 INFO  L751         BuchiCegarLoop]: Abstraction has 5421 states and 6151 transitions.
[2020-11-25 02:30:36,782 INFO  L631         BuchiCegarLoop]: Abstraction has 5421 states and 6151 transitions.
[2020-11-25 02:30:36,782 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:30:36,782 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5421 states and 6151 transitions.
[2020-11-25 02:30:36,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:36,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:36,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:36,790 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:36,790 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5720]  COND TRUE   DType[this] == MinterRole
[L5721]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5721]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5722]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5720]  COND TRUE   DType[this] == MinterRole
[L5721]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5721]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5722]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL       call CorralChoice_OMToken(this);
[L9689]             havoc msgsender_MSG;
[L9690]             havoc msgvalue_MSG;
[L9691]             havoc choice;
[L9692]             havoc to_s916;
[L9693]             havoc value_s916;
[L9694]             havoc __ret_0_transfer;
[L9695]             havoc spender_s955;
[L9696]             havoc value_s955;
[L9697]             havoc __ret_0_approve;
[L9698]             havoc from_s937;
[L9699]             havoc to_s937;
[L9700]             havoc value_s937;
[L9701]             havoc __ret_0_transferFrom;
[L9702]             havoc __ret_0_totalSupply;
[L9703]             havoc owner_s231;
[L9704]             havoc __ret_0_balanceOf;
[L9705]             havoc owner_s247;
[L9706]             havoc spender_s247;
[L9707]             havoc __ret_0_allowance;
[L9708]             havoc spender_s973;
[L9709]             havoc addedValue_s973;
[L9710]             havoc success_s973;
[L9711]             havoc spender_s991;
[L9712]             havoc subtractedValue_s991;
[L9713]             havoc success_s991;
[L9714]             havoc account_s760;
[L9715]             havoc __ret_0_isPauser;
[L9716]             havoc account_s772;
[L9717]             havoc __ret_0_paused;
[L9718]             havoc name_s1022;
[L9719]             havoc symbol_s1022;
[L9720]             havoc decimals_s1022;
[L9721]             havoc __ret_0_name;
[L9722]             havoc __ret_0_symbol;
[L9723]             havoc __ret_0_decimals;
[L9724]             havoc account_s1093;
[L9725]             havoc __ret_0_isMinter;
[L9726]             havoc account_s1105;
[L9727]             havoc to_s1170;
[L9728]             havoc value_s1170;
[L9729]             havoc __ret_0_mint;
[L9730]             havoc value_s1185;
[L9731]             havoc from_s1198;
[L9732]             havoc value_s1198;
[L9733]             havoc name_s1230;
[L9734]             havoc symbol_s1230;
[L9735]             havoc decimals_s1230;
[L9736]             havoc tmpNow;
[L9737]             havoc gas;
[L9738]             assume gas > 4000000 && gas <= 8000000;
[L9739]             tmpNow := now;
[L9740]             havoc now;
[L9741]             assume now > tmpNow;
[L9742]             assume msgsender_MSG != null;
[L9743]             assume DType[msgsender_MSG] != IERC20;
[L9744]             assume DType[msgsender_MSG] != SafeMath;
[L9745]             assume DType[msgsender_MSG] != ERC20;
[L9746]             assume DType[msgsender_MSG] != Roles;
[L9747]             assume DType[msgsender_MSG] != PauserRole;
[L9748]             assume DType[msgsender_MSG] != Pausable;
[L9749]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]             assume DType[msgsender_MSG] != MinterRole;
[L9752]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]             assume DType[msgsender_MSG] != OMToken;
[L9755]             Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE  choice == 23
[L9757]             gas := gas - 21000;
[L9758]  COND TRUE  gas >= 0
[L9759]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]             assume msgvalue_MSG == 0;
[L9761]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1511]             havoc __exception;
[L1512]             revert := false;
[L1513]  COND TRUE  __exception
[L1514]             __tmp__Balance := Balance;
[L1515]             __tmp__DType := DType;
[L1516]             __tmp__Alloc := Alloc;
[L1517]             __tmp__balance_ADDR := balance_ADDR;
[L1518]             __tmp__M_Ref_int := M_Ref_int;
[L1519]             __tmp__sum__balances0 := sum__balances0;
[L1520]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]             __tmp__sum__allowed1 := sum__allowed1;
[L1523]             __tmp__M_Ref_bool := M_Ref_bool;
[L1524]             __tmp__sum := sum;
[L1525]             __tmp__Length := Length;
[L1526]             __tmp__now := now;
[L1527]             __tmp___balances_ERC20 := _balances_ERC20;
[L1528]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]             __tmp___paused_Pausable := _paused_Pausable;
[L1533]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8313]             revert := true;
[L5330]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE  revert
[L1537]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]             assume revert || gas < 0;
[L9761]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:36,800 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:36,800 INFO  L82        PathProgramCache]: Analyzing trace with hash -944637145, now seen corresponding path program 1 times
[2020-11-25 02:30:36,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:36,826 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:37,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1023 trivial. 0 not checked.
[2020-11-25 02:30:37,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:37,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:30:37,061 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:37,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:30:37,061 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:30:37,061 INFO  L87              Difference]: Start difference. First operand 5421 states and 6151 transitions. cyclomatic complexity: 732 Second operand 7 states.
[2020-11-25 02:30:37,172 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:37,172 INFO  L93              Difference]: Finished difference Result 5444 states and 6177 transitions.
[2020-11-25 02:30:37,173 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:30:37,173 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5444 states and 6177 transitions.
[2020-11-25 02:30:37,181 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:37,191 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5444 states to 5427 states and 6157 transitions.
[2020-11-25 02:30:37,191 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-11-25 02:30:37,192 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-11-25 02:30:37,192 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5427 states and 6157 transitions.
[2020-11-25 02:30:37,195 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:37,195 INFO  L728         BuchiCegarLoop]: Abstraction has 5427 states and 6157 transitions.
[2020-11-25 02:30:37,199 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5427 states and 6157 transitions.
[2020-11-25 02:30:37,222 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5427 to 5427.
[2020-11-25 02:30:37,222 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5427 states.
[2020-11-25 02:30:37,227 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5427 states to 5427 states and 6157 transitions.
[2020-11-25 02:30:37,227 INFO  L751         BuchiCegarLoop]: Abstraction has 5427 states and 6157 transitions.
[2020-11-25 02:30:37,227 INFO  L631         BuchiCegarLoop]: Abstraction has 5427 states and 6157 transitions.
[2020-11-25 02:30:37,228 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:30:37,228 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5427 states and 6157 transitions.
[2020-11-25 02:30:37,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:37,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:37,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:37,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:37,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL       call CorralChoice_OMToken(this);
[L9689]             havoc msgsender_MSG;
[L9690]             havoc msgvalue_MSG;
[L9691]             havoc choice;
[L9692]             havoc to_s916;
[L9693]             havoc value_s916;
[L9694]             havoc __ret_0_transfer;
[L9695]             havoc spender_s955;
[L9696]             havoc value_s955;
[L9697]             havoc __ret_0_approve;
[L9698]             havoc from_s937;
[L9699]             havoc to_s937;
[L9700]             havoc value_s937;
[L9701]             havoc __ret_0_transferFrom;
[L9702]             havoc __ret_0_totalSupply;
[L9703]             havoc owner_s231;
[L9704]             havoc __ret_0_balanceOf;
[L9705]             havoc owner_s247;
[L9706]             havoc spender_s247;
[L9707]             havoc __ret_0_allowance;
[L9708]             havoc spender_s973;
[L9709]             havoc addedValue_s973;
[L9710]             havoc success_s973;
[L9711]             havoc spender_s991;
[L9712]             havoc subtractedValue_s991;
[L9713]             havoc success_s991;
[L9714]             havoc account_s760;
[L9715]             havoc __ret_0_isPauser;
[L9716]             havoc account_s772;
[L9717]             havoc __ret_0_paused;
[L9718]             havoc name_s1022;
[L9719]             havoc symbol_s1022;
[L9720]             havoc decimals_s1022;
[L9721]             havoc __ret_0_name;
[L9722]             havoc __ret_0_symbol;
[L9723]             havoc __ret_0_decimals;
[L9724]             havoc account_s1093;
[L9725]             havoc __ret_0_isMinter;
[L9726]             havoc account_s1105;
[L9727]             havoc to_s1170;
[L9728]             havoc value_s1170;
[L9729]             havoc __ret_0_mint;
[L9730]             havoc value_s1185;
[L9731]             havoc from_s1198;
[L9732]             havoc value_s1198;
[L9733]             havoc name_s1230;
[L9734]             havoc symbol_s1230;
[L9735]             havoc decimals_s1230;
[L9736]             havoc tmpNow;
[L9737]             havoc gas;
[L9738]             assume gas > 4000000 && gas <= 8000000;
[L9739]             tmpNow := now;
[L9740]             havoc now;
[L9741]             assume now > tmpNow;
[L9742]             assume msgsender_MSG != null;
[L9743]             assume DType[msgsender_MSG] != IERC20;
[L9744]             assume DType[msgsender_MSG] != SafeMath;
[L9745]             assume DType[msgsender_MSG] != ERC20;
[L9746]             assume DType[msgsender_MSG] != Roles;
[L9747]             assume DType[msgsender_MSG] != PauserRole;
[L9748]             assume DType[msgsender_MSG] != Pausable;
[L9749]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]             assume DType[msgsender_MSG] != MinterRole;
[L9752]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]             assume DType[msgsender_MSG] != OMToken;
[L9755]             Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE  choice == 23
[L9757]             gas := gas - 21000;
[L9758]  COND TRUE  gas >= 0
[L9759]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]             assume msgvalue_MSG == 0;
[L9761]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1511]             havoc __exception;
[L1512]             revert := false;
[L1513]  COND TRUE  __exception
[L1514]             __tmp__Balance := Balance;
[L1515]             __tmp__DType := DType;
[L1516]             __tmp__Alloc := Alloc;
[L1517]             __tmp__balance_ADDR := balance_ADDR;
[L1518]             __tmp__M_Ref_int := M_Ref_int;
[L1519]             __tmp__sum__balances0 := sum__balances0;
[L1520]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]             __tmp__sum__allowed1 := sum__allowed1;
[L1523]             __tmp__M_Ref_bool := M_Ref_bool;
[L1524]             __tmp__sum := sum;
[L1525]             __tmp__Length := Length;
[L1526]             __tmp__now := now;
[L1527]             __tmp___balances_ERC20 := _balances_ERC20;
[L1528]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]             __tmp___paused_Pausable := _paused_Pausable;
[L1533]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8313]             revert := true;
[L5330]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE  revert
[L1537]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]             assume revert || gas < 0;
[L9761]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:37,240 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:37,240 INFO  L82        PathProgramCache]: Analyzing trace with hash 1586384167, now seen corresponding path program 1 times
[2020-11-25 02:30:37,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:37,259 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:37,467 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1024 trivial. 0 not checked.
[2020-11-25 02:30:37,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:37,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:30:37,468 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:37,468 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:30:37,468 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:30:37,468 INFO  L87              Difference]: Start difference. First operand 5427 states and 6157 transitions. cyclomatic complexity: 732 Second operand 14 states.
[2020-11-25 02:30:42,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:42,960 INFO  L93              Difference]: Finished difference Result 8543 states and 9726 transitions.
[2020-11-25 02:30:42,960 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 02:30:42,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8543 states and 9726 transitions.
[2020-11-25 02:30:42,978 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 02:30:42,997 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8543 states to 8526 states and 9707 transitions.
[2020-11-25 02:30:42,997 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1785
[2020-11-25 02:30:42,998 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1785
[2020-11-25 02:30:42,998 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8526 states and 9707 transitions.
[2020-11-25 02:30:43,003 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:43,003 INFO  L728         BuchiCegarLoop]: Abstraction has 8526 states and 9707 transitions.
[2020-11-25 02:30:43,007 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8526 states and 9707 transitions.
[2020-11-25 02:30:43,062 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8526 to 7611.
[2020-11-25 02:30:43,062 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7611 states.
[2020-11-25 02:30:43,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7611 states to 7611 states and 8770 transitions.
[2020-11-25 02:30:43,072 INFO  L751         BuchiCegarLoop]: Abstraction has 7611 states and 8770 transitions.
[2020-11-25 02:30:43,072 INFO  L631         BuchiCegarLoop]: Abstraction has 7611 states and 8770 transitions.
[2020-11-25 02:30:43,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:30:43,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7611 states and 8770 transitions.
[2020-11-25 02:30:43,081 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:30:43,082 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:43,082 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:43,084 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:43,085 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L5687]  COND TRUE   __tmp__DType[this] == MinterRole
[L5688]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5688]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5689]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L5687]  COND TRUE   __tmp__DType[this] == MinterRole
[L5688]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5688]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5689]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND TRUE   !(to_s495 != null)
[L4525]              revert := true;
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:43,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:43,090 INFO  L82        PathProgramCache]: Analyzing trace with hash 1109697348, now seen corresponding path program 1 times
[2020-11-25 02:30:43,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:43,103 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:43,364 INFO  L134       CoverageAnalysis]: Checked inductivity of 1007 backedges. 9 proven. 34 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 02:30:43,364 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:43,364 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:30:43,365 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:43,365 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:30:43,365 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:30:43,365 INFO  L87              Difference]: Start difference. First operand 7611 states and 8770 transitions. cyclomatic complexity: 1163 Second operand 10 states.
[2020-11-25 02:30:44,629 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:44,629 INFO  L93              Difference]: Finished difference Result 9817 states and 11393 transitions.
[2020-11-25 02:30:44,629 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 02:30:44,629 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9817 states and 11393 transitions.
[2020-11-25 02:30:44,649 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:30:44,673 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9817 states to 9777 states and 11342 transitions.
[2020-11-25 02:30:44,673 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2119
[2020-11-25 02:30:44,674 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2119
[2020-11-25 02:30:44,674 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9777 states and 11342 transitions.
[2020-11-25 02:30:44,679 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:44,679 INFO  L728         BuchiCegarLoop]: Abstraction has 9777 states and 11342 transitions.
[2020-11-25 02:30:44,684 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9777 states and 11342 transitions.
[2020-11-25 02:30:44,742 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9777 to 9681.
[2020-11-25 02:30:44,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9681 states.
[2020-11-25 02:30:44,754 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9681 states to 9681 states and 11246 transitions.
[2020-11-25 02:30:44,754 INFO  L751         BuchiCegarLoop]: Abstraction has 9681 states and 11246 transitions.
[2020-11-25 02:30:44,754 INFO  L631         BuchiCegarLoop]: Abstraction has 9681 states and 11246 transitions.
[2020-11-25 02:30:44,754 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:30:44,754 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9681 states and 11246 transitions.
[2020-11-25 02:30:44,764 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:30:44,764 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:44,764 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:44,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:44,766 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5683]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5683]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5684]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5683]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5683]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5684]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL       call CorralChoice_OMToken(this);
[L9689]             havoc msgsender_MSG;
[L9690]             havoc msgvalue_MSG;
[L9691]             havoc choice;
[L9692]             havoc to_s916;
[L9693]             havoc value_s916;
[L9694]             havoc __ret_0_transfer;
[L9695]             havoc spender_s955;
[L9696]             havoc value_s955;
[L9697]             havoc __ret_0_approve;
[L9698]             havoc from_s937;
[L9699]             havoc to_s937;
[L9700]             havoc value_s937;
[L9701]             havoc __ret_0_transferFrom;
[L9702]             havoc __ret_0_totalSupply;
[L9703]             havoc owner_s231;
[L9704]             havoc __ret_0_balanceOf;
[L9705]             havoc owner_s247;
[L9706]             havoc spender_s247;
[L9707]             havoc __ret_0_allowance;
[L9708]             havoc spender_s973;
[L9709]             havoc addedValue_s973;
[L9710]             havoc success_s973;
[L9711]             havoc spender_s991;
[L9712]             havoc subtractedValue_s991;
[L9713]             havoc success_s991;
[L9714]             havoc account_s760;
[L9715]             havoc __ret_0_isPauser;
[L9716]             havoc account_s772;
[L9717]             havoc __ret_0_paused;
[L9718]             havoc name_s1022;
[L9719]             havoc symbol_s1022;
[L9720]             havoc decimals_s1022;
[L9721]             havoc __ret_0_name;
[L9722]             havoc __ret_0_symbol;
[L9723]             havoc __ret_0_decimals;
[L9724]             havoc account_s1093;
[L9725]             havoc __ret_0_isMinter;
[L9726]             havoc account_s1105;
[L9727]             havoc to_s1170;
[L9728]             havoc value_s1170;
[L9729]             havoc __ret_0_mint;
[L9730]             havoc value_s1185;
[L9731]             havoc from_s1198;
[L9732]             havoc value_s1198;
[L9733]             havoc name_s1230;
[L9734]             havoc symbol_s1230;
[L9735]             havoc decimals_s1230;
[L9736]             havoc tmpNow;
[L9737]             havoc gas;
[L9738]             assume gas > 4000000 && gas <= 8000000;
[L9739]             tmpNow := now;
[L9740]             havoc now;
[L9741]             assume now > tmpNow;
[L9742]             assume msgsender_MSG != null;
[L9743]             assume DType[msgsender_MSG] != IERC20;
[L9744]             assume DType[msgsender_MSG] != SafeMath;
[L9745]             assume DType[msgsender_MSG] != ERC20;
[L9746]             assume DType[msgsender_MSG] != Roles;
[L9747]             assume DType[msgsender_MSG] != PauserRole;
[L9748]             assume DType[msgsender_MSG] != Pausable;
[L9749]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]             assume DType[msgsender_MSG] != MinterRole;
[L9752]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]             assume DType[msgsender_MSG] != OMToken;
[L9755]             Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE  choice == 23
[L9757]             gas := gas - 21000;
[L9758]  COND TRUE  gas >= 0
[L9759]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]             assume msgvalue_MSG == 0;
[L9761]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1511]             havoc __exception;
[L1512]             revert := false;
[L1513]  COND TRUE  __exception
[L1514]             __tmp__Balance := Balance;
[L1515]             __tmp__DType := DType;
[L1516]             __tmp__Alloc := Alloc;
[L1517]             __tmp__balance_ADDR := balance_ADDR;
[L1518]             __tmp__M_Ref_int := M_Ref_int;
[L1519]             __tmp__sum__balances0 := sum__balances0;
[L1520]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]             __tmp__sum__allowed1 := sum__allowed1;
[L1523]             __tmp__M_Ref_bool := M_Ref_bool;
[L1524]             __tmp__sum := sum;
[L1525]             __tmp__Length := Length;
[L1526]             __tmp__now := now;
[L1527]             __tmp___balances_ERC20 := _balances_ERC20;
[L1528]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]             __tmp___paused_Pausable := _paused_Pausable;
[L1533]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8313]             revert := true;
[L5330]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE  revert
[L1537]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]             assume revert || gas < 0;
[L9761]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:44,771 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:44,771 INFO  L82        PathProgramCache]: Analyzing trace with hash -1414327170, now seen corresponding path program 1 times
[2020-11-25 02:30:44,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:44,789 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:44,942 INFO  L134       CoverageAnalysis]: Checked inductivity of 988 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 956 trivial. 0 not checked.
[2020-11-25 02:30:44,942 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:44,942 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:30:44,942 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:44,943 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:30:44,943 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:30:44,943 INFO  L87              Difference]: Start difference. First operand 9681 states and 11246 transitions. cyclomatic complexity: 1573 Second operand 4 states.
[2020-11-25 02:30:45,821 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:45,821 INFO  L93              Difference]: Finished difference Result 11921 states and 14423 transitions.
[2020-11-25 02:30:45,821 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:30:45,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11921 states and 14423 transitions.
[2020-11-25 02:30:45,849 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 36
[2020-11-25 02:30:45,897 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11921 states to 11535 states and 14007 transitions.
[2020-11-25 02:30:45,898 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2466
[2020-11-25 02:30:45,899 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2466
[2020-11-25 02:30:45,899 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11535 states and 14007 transitions.
[2020-11-25 02:30:45,910 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:45,910 INFO  L728         BuchiCegarLoop]: Abstraction has 11535 states and 14007 transitions.
[2020-11-25 02:30:45,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11535 states and 14007 transitions.
[2020-11-25 02:30:46,021 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11535 to 10328.
[2020-11-25 02:30:46,021 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10328 states.
[2020-11-25 02:30:46,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10328 states to 10328 states and 12248 transitions.
[2020-11-25 02:30:46,036 INFO  L751         BuchiCegarLoop]: Abstraction has 10328 states and 12248 transitions.
[2020-11-25 02:30:46,036 INFO  L631         BuchiCegarLoop]: Abstraction has 10328 states and 12248 transitions.
[2020-11-25 02:30:46,036 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:30:46,036 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10328 states and 12248 transitions.
[2020-11-25 02:30:46,047 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:46,047 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:46,048 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:46,049 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:46,049 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND TRUE   !(to_s495 != null)
[L4525]              revert := true;
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND TRUE   !(to_s495 != null)
[L4525]              revert := true;
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:46,055 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:46,055 INFO  L82        PathProgramCache]: Analyzing trace with hash 1577739553, now seen corresponding path program 1 times
[2020-11-25 02:30:46,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:46,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:46,230 INFO  L134       CoverageAnalysis]: Checked inductivity of 1022 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 991 trivial. 0 not checked.
[2020-11-25 02:30:46,230 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:46,230 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:30:46,230 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:46,230 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:46,230 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:46,231 INFO  L87              Difference]: Start difference. First operand 10328 states and 12248 transitions. cyclomatic complexity: 1928 Second operand 8 states.
[2020-11-25 02:30:46,377 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:46,377 INFO  L93              Difference]: Finished difference Result 10374 states and 12303 transitions.
[2020-11-25 02:30:46,377 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:46,377 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10374 states and 12303 transitions.
[2020-11-25 02:30:46,396 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:46,416 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10374 states to 10341 states and 12263 transitions.
[2020-11-25 02:30:46,417 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2331
[2020-11-25 02:30:46,418 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2331
[2020-11-25 02:30:46,418 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10341 states and 12263 transitions.
[2020-11-25 02:30:46,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:46,423 INFO  L728         BuchiCegarLoop]: Abstraction has 10341 states and 12263 transitions.
[2020-11-25 02:30:46,428 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10341 states and 12263 transitions.
[2020-11-25 02:30:46,479 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10341 to 10334.
[2020-11-25 02:30:46,479 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10334 states.
[2020-11-25 02:30:46,492 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10334 states to 10334 states and 12255 transitions.
[2020-11-25 02:30:46,492 INFO  L751         BuchiCegarLoop]: Abstraction has 10334 states and 12255 transitions.
[2020-11-25 02:30:46,492 INFO  L631         BuchiCegarLoop]: Abstraction has 10334 states and 12255 transitions.
[2020-11-25 02:30:46,492 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:30:46,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10334 states and 12255 transitions.
[2020-11-25 02:30:46,503 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:46,503 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:46,503 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:46,505 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:46,505 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND TRUE   !(to_s495 != null)
[L4525]              revert := true;
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND TRUE   !(to_s495 != null)
[L4525]              revert := true;
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:46,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:46,510 INFO  L82        PathProgramCache]: Analyzing trace with hash 1036031422, now seen corresponding path program 1 times
[2020-11-25 02:30:46,511 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:46,528 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:46,759 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:30:46,759 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:46,759 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:30:46,759 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:46,759 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:46,759 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:46,760 INFO  L87              Difference]: Start difference. First operand 10334 states and 12255 transitions. cyclomatic complexity: 1929 Second operand 8 states.
[2020-11-25 02:30:46,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:46,845 INFO  L93              Difference]: Finished difference Result 10534 states and 12508 transitions.
[2020-11-25 02:30:46,845 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:46,845 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10534 states and 12508 transitions.
[2020-11-25 02:30:46,863 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:46,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10534 states to 10526 states and 12500 transitions.
[2020-11-25 02:30:46,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2388
[2020-11-25 02:30:46,885 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2388
[2020-11-25 02:30:46,885 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10526 states and 12500 transitions.
[2020-11-25 02:30:46,890 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:46,890 INFO  L728         BuchiCegarLoop]: Abstraction has 10526 states and 12500 transitions.
[2020-11-25 02:30:46,895 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10526 states and 12500 transitions.
[2020-11-25 02:30:46,945 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10526 to 10483.
[2020-11-25 02:30:46,945 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10483 states.
[2020-11-25 02:30:46,957 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10483 states to 10483 states and 12445 transitions.
[2020-11-25 02:30:46,957 INFO  L751         BuchiCegarLoop]: Abstraction has 10483 states and 12445 transitions.
[2020-11-25 02:30:46,957 INFO  L631         BuchiCegarLoop]: Abstraction has 10483 states and 12445 transitions.
[2020-11-25 02:30:46,957 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:30:46,957 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10483 states and 12445 transitions.
[2020-11-25 02:30:46,967 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:46,967 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:46,967 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:46,968 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:46,969 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND TRUE   !(b_s149 <= a_s149)
[L4102]              revert := true;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND TRUE   !(b_s149 <= a_s149)
[L4102]              revert := true;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:46,973 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:46,973 INFO  L82        PathProgramCache]: Analyzing trace with hash 432490203, now seen corresponding path program 1 times
[2020-11-25 02:30:46,974 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:46,985 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:47,146 INFO  L134       CoverageAnalysis]: Checked inductivity of 1025 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 990 trivial. 0 not checked.
[2020-11-25 02:30:47,146 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:47,146 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:30:47,146 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:47,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:47,147 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:47,147 INFO  L87              Difference]: Start difference. First operand 10483 states and 12445 transitions. cyclomatic complexity: 1970 Second operand 8 states.
[2020-11-25 02:30:47,283 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:47,283 INFO  L93              Difference]: Finished difference Result 10523 states and 12492 transitions.
[2020-11-25 02:30:47,284 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:47,284 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10523 states and 12492 transitions.
[2020-11-25 02:30:47,302 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:47,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10523 states to 10490 states and 12452 transitions.
[2020-11-25 02:30:47,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2388
[2020-11-25 02:30:47,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2388
[2020-11-25 02:30:47,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10490 states and 12452 transitions.
[2020-11-25 02:30:47,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:47,329 INFO  L728         BuchiCegarLoop]: Abstraction has 10490 states and 12452 transitions.
[2020-11-25 02:30:47,333 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10490 states and 12452 transitions.
[2020-11-25 02:30:47,385 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10490 to 10477.
[2020-11-25 02:30:47,385 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10477 states.
[2020-11-25 02:30:47,398 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10477 states to 10477 states and 12437 transitions.
[2020-11-25 02:30:47,398 INFO  L751         BuchiCegarLoop]: Abstraction has 10477 states and 12437 transitions.
[2020-11-25 02:30:47,398 INFO  L631         BuchiCegarLoop]: Abstraction has 10477 states and 12437 transitions.
[2020-11-25 02:30:47,398 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:30:47,398 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10477 states and 12437 transitions.
[2020-11-25 02:30:47,409 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:47,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:47,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:47,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:47,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND TRUE   !(b_s149 <= a_s149)
[L4102]              revert := true;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND TRUE   !(b_s149 <= a_s149)
[L4102]              revert := true;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:47,415 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:47,415 INFO  L82        PathProgramCache]: Analyzing trace with hash 1186693547, now seen corresponding path program 1 times
[2020-11-25 02:30:47,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:47,433 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:47,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:30:47,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:47,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:30:47,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:47,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:30:47,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:30:47,664 INFO  L87              Difference]: Start difference. First operand 10477 states and 12437 transitions. cyclomatic complexity: 1968 Second operand 9 states.
[2020-11-25 02:30:50,223 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:50,223 INFO  L93              Difference]: Finished difference Result 10588 states and 12594 transitions.
[2020-11-25 02:30:50,224 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:30:50,224 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10588 states and 12594 transitions.
[2020-11-25 02:30:50,247 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:30:50,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10588 states to 10588 states and 12594 transitions.
[2020-11-25 02:30:50,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2437
[2020-11-25 02:30:50,270 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2437
[2020-11-25 02:30:50,270 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10588 states and 12594 transitions.
[2020-11-25 02:30:50,275 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:50,275 INFO  L728         BuchiCegarLoop]: Abstraction has 10588 states and 12594 transitions.
[2020-11-25 02:30:50,279 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10588 states and 12594 transitions.
[2020-11-25 02:30:50,326 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10588 to 7933.
[2020-11-25 02:30:50,326 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7933 states.
[2020-11-25 02:30:50,335 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7933 states to 7933 states and 9231 transitions.
[2020-11-25 02:30:50,335 INFO  L751         BuchiCegarLoop]: Abstraction has 7933 states and 9231 transitions.
[2020-11-25 02:30:50,335 INFO  L631         BuchiCegarLoop]: Abstraction has 7933 states and 9231 transitions.
[2020-11-25 02:30:50,335 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:30:50,335 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7933 states and 9231 transitions.
[2020-11-25 02:30:50,343 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:30:50,343 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:50,343 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:50,344 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:50,344 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:50,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:50,349 INFO  L82        PathProgramCache]: Analyzing trace with hash -386281729, now seen corresponding path program 1 times
[2020-11-25 02:30:50,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:50,367 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:50,617 INFO  L134       CoverageAnalysis]: Checked inductivity of 1017 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:30:50,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:50,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:30:50,618 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:50,618 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:50,618 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:50,618 INFO  L87              Difference]: Start difference. First operand 7933 states and 9231 transitions. cyclomatic complexity: 1306 Second operand 8 states.
[2020-11-25 02:30:50,774 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:50,774 INFO  L93              Difference]: Finished difference Result 7966 states and 9270 transitions.
[2020-11-25 02:30:50,774 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:50,774 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7966 states and 9270 transitions.
[2020-11-25 02:30:50,788 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:30:50,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7966 states to 7933 states and 9230 transitions.
[2020-11-25 02:30:50,801 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1927
[2020-11-25 02:30:50,802 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1927
[2020-11-25 02:30:50,802 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7933 states and 9230 transitions.
[2020-11-25 02:30:50,805 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:50,805 INFO  L728         BuchiCegarLoop]: Abstraction has 7933 states and 9230 transitions.
[2020-11-25 02:30:50,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7933 states and 9230 transitions.
[2020-11-25 02:30:50,844 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7933 to 7933.
[2020-11-25 02:30:50,844 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7933 states.
[2020-11-25 02:30:50,853 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7933 states to 7933 states and 9230 transitions.
[2020-11-25 02:30:50,853 INFO  L751         BuchiCegarLoop]: Abstraction has 7933 states and 9230 transitions.
[2020-11-25 02:30:50,853 INFO  L631         BuchiCegarLoop]: Abstraction has 7933 states and 9230 transitions.
[2020-11-25 02:30:50,853 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:30:50,853 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7933 states and 9230 transitions.
[2020-11-25 02:30:50,860 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:30:50,860 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:50,860 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:50,862 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:50,862 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:50,866 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:50,866 INFO  L82        PathProgramCache]: Analyzing trace with hash -1583250321, now seen corresponding path program 2 times
[2020-11-25 02:30:50,867 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:50,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:51,039 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:30:51,039 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:51,039 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:30:51,040 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:51,040 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:30:51,040 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:30:51,040 INFO  L87              Difference]: Start difference. First operand 7933 states and 9230 transitions. cyclomatic complexity: 1305 Second operand 9 states.
[2020-11-25 02:30:51,186 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:51,186 INFO  L93              Difference]: Finished difference Result 7970 states and 9273 transitions.
[2020-11-25 02:30:51,186 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:30:51,186 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7970 states and 9273 transitions.
[2020-11-25 02:30:51,200 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:30:51,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7970 states to 7912 states and 9203 transitions.
[2020-11-25 02:30:51,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1927
[2020-11-25 02:30:51,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1927
[2020-11-25 02:30:51,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7912 states and 9203 transitions.
[2020-11-25 02:30:51,218 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:51,218 INFO  L728         BuchiCegarLoop]: Abstraction has 7912 states and 9203 transitions.
[2020-11-25 02:30:51,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7912 states and 9203 transitions.
[2020-11-25 02:30:51,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7912 to 7912.
[2020-11-25 02:30:51,256 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7912 states.
[2020-11-25 02:30:51,264 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7912 states to 7912 states and 9203 transitions.
[2020-11-25 02:30:51,264 INFO  L751         BuchiCegarLoop]: Abstraction has 7912 states and 9203 transitions.
[2020-11-25 02:30:51,264 INFO  L631         BuchiCegarLoop]: Abstraction has 7912 states and 9203 transitions.
[2020-11-25 02:30:51,264 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:30:51,264 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7912 states and 9203 transitions.
[2020-11-25 02:30:51,271 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:30:51,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:51,272 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:51,273 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:51,273 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:51,277 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:51,277 INFO  L82        PathProgramCache]: Analyzing trace with hash 1670775615, now seen corresponding path program 1 times
[2020-11-25 02:30:51,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:51,311 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:51,895 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 30 proven. 0 refuted. 0 times theorem prover too weak. 1000 trivial. 0 not checked.
[2020-11-25 02:30:51,895 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:51,895 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 02:30:51,896 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:51,896 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 02:30:51,896 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=636, Unknown=0, NotChecked=0, Total=702
[2020-11-25 02:30:51,896 INFO  L87              Difference]: Start difference. First operand 7912 states and 9203 transitions. cyclomatic complexity: 1299 Second operand 27 states.
[2020-11-25 02:31:01,059 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:01,059 INFO  L93              Difference]: Finished difference Result 7984 states and 9361 transitions.
[2020-11-25 02:31:01,059 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 02:31:01,059 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7984 states and 9361 transitions.
[2020-11-25 02:31:01,074 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 02:31:01,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7984 states to 7984 states and 9361 transitions.
[2020-11-25 02:31:01,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1949
[2020-11-25 02:31:01,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1949
[2020-11-25 02:31:01,090 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7984 states and 9361 transitions.
[2020-11-25 02:31:01,094 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:01,094 INFO  L728         BuchiCegarLoop]: Abstraction has 7984 states and 9361 transitions.
[2020-11-25 02:31:01,097 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7984 states and 9361 transitions.
[2020-11-25 02:31:01,139 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7984 to 7570.
[2020-11-25 02:31:01,140 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7570 states.
[2020-11-25 02:31:01,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7570 states to 7570 states and 8760 transitions.
[2020-11-25 02:31:01,148 INFO  L751         BuchiCegarLoop]: Abstraction has 7570 states and 8760 transitions.
[2020-11-25 02:31:01,148 INFO  L631         BuchiCegarLoop]: Abstraction has 7570 states and 8760 transitions.
[2020-11-25 02:31:01,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:31:01,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7570 states and 8760 transitions.
[2020-11-25 02:31:01,155 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:01,155 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:01,155 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:01,156 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:01,157 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND FALSE  !(!(b_s149 <= a_s149))
[L4105]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              __ret_0_ := c_s149;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND FALSE  !(revert)
[L4532]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L4533]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L4534]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L4535]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4125]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4126]  COND TRUE   !(c_s173 >= a_s173)
[L4127]              revert := true;
[L4535]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4536]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND FALSE  !(!(b_s149 <= a_s149))
[L4105]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              __ret_0_ := c_s149;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND FALSE  !(revert)
[L4532]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L4533]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L4534]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L4535]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4125]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4126]  COND TRUE   !(c_s173 >= a_s173)
[L4127]              revert := true;
[L4535]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4536]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:01,160 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:01,161 INFO  L82        PathProgramCache]: Analyzing trace with hash 553735632, now seen corresponding path program 1 times
[2020-11-25 02:31:01,161 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:01,177 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:01,337 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 1021 trivial. 0 not checked.
[2020-11-25 02:31:01,337 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:31:01,337 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:31:01,338 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:01,338 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:31:01,338 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:31:01,338 INFO  L87              Difference]: Start difference. First operand 7570 states and 8760 transitions. cyclomatic complexity: 1204 Second operand 7 states.
[2020-11-25 02:31:01,449 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:01,450 INFO  L93              Difference]: Finished difference Result 7593 states and 8786 transitions.
[2020-11-25 02:31:01,450 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:31:01,450 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7593 states and 8786 transitions.
[2020-11-25 02:31:01,463 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:01,476 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7593 states to 7576 states and 8766 transitions.
[2020-11-25 02:31:01,476 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1791
[2020-11-25 02:31:01,477 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1791
[2020-11-25 02:31:01,477 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7576 states and 8766 transitions.
[2020-11-25 02:31:01,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:01,481 INFO  L728         BuchiCegarLoop]: Abstraction has 7576 states and 8766 transitions.
[2020-11-25 02:31:01,484 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7576 states and 8766 transitions.
[2020-11-25 02:31:01,520 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7576 to 7570.
[2020-11-25 02:31:01,520 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7570 states.
[2020-11-25 02:31:01,529 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7570 states to 7570 states and 8760 transitions.
[2020-11-25 02:31:01,529 INFO  L751         BuchiCegarLoop]: Abstraction has 7570 states and 8760 transitions.
[2020-11-25 02:31:01,529 INFO  L631         BuchiCegarLoop]: Abstraction has 7570 states and 8760 transitions.
[2020-11-25 02:31:01,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:31:01,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7570 states and 8760 transitions.
[2020-11-25 02:31:01,537 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:01,537 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:01,537 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:01,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:01,538 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND FALSE  !(!(b_s149 <= a_s149))
[L4105]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              __ret_0_ := c_s149;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND FALSE  !(revert)
[L4532]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L4533]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L4534]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L4535]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4125]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4126]  COND TRUE   !(c_s173 >= a_s173)
[L4127]              revert := true;
[L4535]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4536]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND TRUE   choice == 10
[L9840]              gas := gas - 21000;
[L9841]  COND TRUE   gas >= 0
[L9842]              assume msgvalue_MSG == 0;
[L9843]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1373]              havoc __exception;
[L1374]              revert := false;
[L1375]  COND TRUE   __exception
[L1376]              __tmp__Balance := Balance;
[L1377]              __tmp__DType := DType;
[L1378]              __tmp__Alloc := Alloc;
[L1379]              __tmp__balance_ADDR := balance_ADDR;
[L1380]              __tmp__M_Ref_int := M_Ref_int;
[L1381]              __tmp__sum__balances0 := sum__balances0;
[L1382]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1383]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1384]              __tmp__sum__allowed1 := sum__allowed1;
[L1385]              __tmp__M_Ref_bool := M_Ref_bool;
[L1386]              __tmp__sum := sum;
[L1387]              __tmp__Length := Length;
[L1388]              __tmp__now := now;
[L1389]              __tmp___balances_ERC20 := _balances_ERC20;
[L1390]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1391]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1392]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1393]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1394]              __tmp___paused_Pausable := _paused_Pausable;
[L1395]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1396]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1397]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1398]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1399]  CALL        call unpause_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5237]  CALL        call onlyPauser_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8249]  COND TRUE   __tmp__DType[this] == OMToken
[L8250]  CALL        call __var_23 := isPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4983]  CALL        call __var_24 := has~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s760);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4983]  RET         call __var_24 := has~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s760);
[L4984]  COND FALSE  !(revert)
[L4987]              __ret_0_ := __var_24;
[L8250]  RET         call __var_23 := isPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8251]  COND FALSE  !(revert)
[L8272]  COND FALSE  !(!__var_23)
[L5237]  RET         call onlyPauser_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5238]  COND FALSE  !(revert)
[L5241]  CALL        call whenPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8328]  COND FALSE  !(!__tmp___paused_Pausable[this])
[L5241]  RET         call whenPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5242]  COND FALSE  !(revert)
[L5245]              __tmp___paused_Pausable[this] := false;
[L1399]  RET         call unpause_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1400]              assume revert || gas < 0;
[L9843]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:01,543 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:01,543 INFO  L82        PathProgramCache]: Analyzing trace with hash 856692466, now seen corresponding path program 1 times
[2020-11-25 02:31:01,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:01,559 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:01,778 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:31:01,779 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:01,780 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:31:01,781 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:01,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:31:01,781 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:31:01,782 INFO  L87              Difference]: Start difference. First operand 7570 states and 8760 transitions. cyclomatic complexity: 1204 Second operand 8 states.
[2020-11-25 02:31:01,917 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:01,917 INFO  L93              Difference]: Finished difference Result 7591 states and 8783 transitions.
[2020-11-25 02:31:01,917 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:31:01,917 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7591 states and 8783 transitions.
[2020-11-25 02:31:01,931 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:01,945 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7591 states to 7554 states and 8740 transitions.
[2020-11-25 02:31:01,945 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1791
[2020-11-25 02:31:01,946 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1791
[2020-11-25 02:31:01,946 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7554 states and 8740 transitions.
[2020-11-25 02:31:01,950 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:01,950 INFO  L728         BuchiCegarLoop]: Abstraction has 7554 states and 8740 transitions.
[2020-11-25 02:31:01,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7554 states and 8740 transitions.
[2020-11-25 02:31:01,990 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7554 to 7554.
[2020-11-25 02:31:01,990 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7554 states.
[2020-11-25 02:31:01,999 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7554 states to 7554 states and 8740 transitions.
[2020-11-25 02:31:01,999 INFO  L751         BuchiCegarLoop]: Abstraction has 7554 states and 8740 transitions.
[2020-11-25 02:31:01,999 INFO  L631         BuchiCegarLoop]: Abstraction has 7554 states and 8740 transitions.
[2020-11-25 02:31:01,999 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:31:01,999 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7554 states and 8740 transitions.
[2020-11-25 02:31:02,006 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:02,006 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:02,006 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:02,007 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:02,008 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND FALSE  !(!(b_s149 <= a_s149))
[L4105]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              __ret_0_ := c_s149;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND FALSE  !(revert)
[L4532]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L4533]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L4534]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L4535]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4125]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4126]  COND TRUE   !(c_s173 >= a_s173)
[L4127]              revert := true;
[L4535]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4536]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:02,011 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:02,012 INFO  L82        PathProgramCache]: Analyzing trace with hash -478781308, now seen corresponding path program 1 times
[2020-11-25 02:31:02,012 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:02,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:02,394 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 30 proven. 0 refuted. 0 times theorem prover too weak. 1000 trivial. 0 not checked.
[2020-11-25 02:31:02,394 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:02,395 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 02:31:02,395 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:02,395 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 02:31:02,395 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=506, Unknown=0, NotChecked=0, Total=552
[2020-11-25 02:31:02,395 INFO  L87              Difference]: Start difference. First operand 7554 states and 8740 transitions. cyclomatic complexity: 1200 Second operand 24 states.
[2020-11-25 02:31:14,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:14,048 INFO  L93              Difference]: Finished difference Result 7630 states and 8837 transitions.
[2020-11-25 02:31:14,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 02:31:14,048 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7630 states and 8837 transitions.
[2020-11-25 02:31:14,064 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:14,078 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7630 states to 7630 states and 8837 transitions.
[2020-11-25 02:31:14,078 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1826
[2020-11-25 02:31:14,079 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1826
[2020-11-25 02:31:14,079 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7630 states and 8837 transitions.
[2020-11-25 02:31:14,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:14,083 INFO  L728         BuchiCegarLoop]: Abstraction has 7630 states and 8837 transitions.
[2020-11-25 02:31:14,086 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7630 states and 8837 transitions.
[2020-11-25 02:31:14,120 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7630 to 7572.
[2020-11-25 02:31:14,120 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7572 states.
[2020-11-25 02:31:14,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7572 states to 7572 states and 8774 transitions.
[2020-11-25 02:31:14,129 INFO  L751         BuchiCegarLoop]: Abstraction has 7572 states and 8774 transitions.
[2020-11-25 02:31:14,129 INFO  L631         BuchiCegarLoop]: Abstraction has 7572 states and 8774 transitions.
[2020-11-25 02:31:14,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 02:31:14,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7572 states and 8774 transitions.
[2020-11-25 02:31:14,136 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:14,136 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:14,136 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:14,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:14,137 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND FALSE  !(!(b_s149 <= a_s149))
[L4105]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              __ret_0_ := c_s149;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND FALSE  !(revert)
[L4532]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L4533]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L4534]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L4535]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4125]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4126]  COND FALSE  !(!(c_s173 >= a_s173))
[L4130]              __ret_0_ := c_s173;
[L4535]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4536]  COND FALSE  !(revert)
[L4539]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s495];
[L4540]              __tmp___balances_ERC20[this][to_s495] := __var_9;
[L4541]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s495];
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND FALSE  !(revert)
[L4282]              __ret_0_ := true;
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND FALSE  !(revert)
[L5347]              __ret_0_ := __var_25;
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND TRUE   choice == 10
[L9840]              gas := gas - 21000;
[L9841]  COND TRUE   gas >= 0
[L9842]              assume msgvalue_MSG == 0;
[L9843]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1373]              havoc __exception;
[L1374]              revert := false;
[L1375]  COND TRUE   __exception
[L1376]              __tmp__Balance := Balance;
[L1377]              __tmp__DType := DType;
[L1378]              __tmp__Alloc := Alloc;
[L1379]              __tmp__balance_ADDR := balance_ADDR;
[L1380]              __tmp__M_Ref_int := M_Ref_int;
[L1381]              __tmp__sum__balances0 := sum__balances0;
[L1382]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1383]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1384]              __tmp__sum__allowed1 := sum__allowed1;
[L1385]              __tmp__M_Ref_bool := M_Ref_bool;
[L1386]              __tmp__sum := sum;
[L1387]              __tmp__Length := Length;
[L1388]              __tmp__now := now;
[L1389]              __tmp___balances_ERC20 := _balances_ERC20;
[L1390]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1391]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1392]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1393]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1394]              __tmp___paused_Pausable := _paused_Pausable;
[L1395]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1396]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1397]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1398]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1399]  CALL        call unpause_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5237]  CALL        call onlyPauser_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8249]  COND TRUE   __tmp__DType[this] == OMToken
[L8250]  CALL        call __var_23 := isPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4983]  CALL        call __var_24 := has~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s760);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4983]  RET         call __var_24 := has~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s760);
[L4984]  COND FALSE  !(revert)
[L4987]              __ret_0_ := __var_24;
[L8250]  RET         call __var_23 := isPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8251]  COND FALSE  !(revert)
[L8272]  COND FALSE  !(!__var_23)
[L5237]  RET         call onlyPauser_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5238]  COND FALSE  !(revert)
[L5241]  CALL        call whenPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8328]  COND FALSE  !(!__tmp___paused_Pausable[this])
[L5241]  RET         call whenPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5242]  COND FALSE  !(revert)
[L5245]              __tmp___paused_Pausable[this] := false;
[L1399]  RET         call unpause_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1400]              assume revert || gas < 0;
[L9843]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:14,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:14,142 INFO  L82        PathProgramCache]: Analyzing trace with hash -730473683, now seen corresponding path program 1 times
[2020-11-25 02:31:14,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:14,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:14,344 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:31:14,344 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:14,344 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:31:14,344 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:14,344 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:31:14,344 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:31:14,345 INFO  L87              Difference]: Start difference. First operand 7572 states and 8774 transitions. cyclomatic complexity: 1216 Second operand 5 states.
[2020-11-25 02:31:15,401 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:15,401 INFO  L93              Difference]: Finished difference Result 9195 states and 11007 transitions.
[2020-11-25 02:31:15,401 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:31:15,401 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9195 states and 11007 transitions.
[2020-11-25 02:31:15,424 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-11-25 02:31:15,445 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9195 states to 8299 states and 10036 transitions.
[2020-11-25 02:31:15,445 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1526
[2020-11-25 02:31:15,445 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1526
[2020-11-25 02:31:15,446 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8299 states and 10036 transitions.
[2020-11-25 02:31:15,451 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:15,451 INFO  L728         BuchiCegarLoop]: Abstraction has 8299 states and 10036 transitions.
[2020-11-25 02:31:15,455 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8299 states and 10036 transitions.
[2020-11-25 02:31:15,491 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8299 to 6906.
[2020-11-25 02:31:15,491 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6906 states.
[2020-11-25 02:31:15,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6906 states to 6906 states and 8022 transitions.
[2020-11-25 02:31:15,498 INFO  L751         BuchiCegarLoop]: Abstraction has 6906 states and 8022 transitions.
[2020-11-25 02:31:15,498 INFO  L631         BuchiCegarLoop]: Abstraction has 6906 states and 8022 transitions.
[2020-11-25 02:31:15,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 02:31:15,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6906 states and 8022 transitions.
[2020-11-25 02:31:15,505 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 02:31:15,505 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:15,505 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:15,507 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:15,507 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND FALSE  !(choice == 10)
[L9845]  COND FALSE  !(choice == 9)
[L9851]  COND FALSE  !(choice == 8)
[L9857]  COND FALSE  !(choice == 7)
[L9863]  COND FALSE  !(choice == 6)
[L9869]  COND FALSE  !(choice == 5)
[L9875]  COND FALSE  !(choice == 4)
[L9881]  COND FALSE  !(choice == 3)
[L9888]  COND TRUE   choice == 2
[L9889]              gas := gas - 21000;
[L9890]  COND TRUE   gas >= 0
[L9891]              assume value_s1185 >= 0 && value_s1185 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9892]              assume msgvalue_MSG == 0;
[L9893]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L2569]              havoc __exception;
[L2570]              revert := false;
[L2571]  COND FALSE  !(__exception)
[L2598]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L6069]  COND TRUE   DType[this] == OMToken
[L6070]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1185);
[L4649]              __var_13 := null;
[L4650]  COND FALSE  !(!(account_s579 != null))
[L4654]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4654]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4655]  COND FALSE  !(revert)
[L4658]              _totalSupply_ERC20[this] := __var_14;
[L4659]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4659]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4660]  COND FALSE  !(revert)
[L4663]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s579];
[L4664]              _balances_ERC20[this][account_s579] := __var_15;
[L4665]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s579];
[L4666]              assert { :EventEmitted "Transfer_ERC20" } true;
[L6070]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1185);
[L6071]  COND FALSE  !(revert)
[L2598]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L2599]              assume !revert && gas >= 0;
[L9893]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND FALSE  !(revert)
[L5334]  COND TRUE   __tmp__DType[this] == OMToken
[L5335]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4254]  COND TRUE   __tmp__DType[this] == OMToken
[L4255]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4523]              __var_7 := null;
[L4524]  COND FALSE  !(!(to_s495 != null))
[L4528]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4101]  COND FALSE  !(!(b_s149 <= a_s149))
[L4105]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              __ret_0_ := c_s149;
[L4528]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L4529]  COND FALSE  !(revert)
[L4532]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L4533]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L4534]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L4535]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4125]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4126]  COND TRUE   !(c_s173 >= a_s173)
[L4127]              revert := true;
[L4535]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L4536]  COND TRUE   revert
[L4255]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4256]  COND TRUE   revert
[L5335]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5336]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND TRUE   choice == 15
[L9810]              gas := gas - 21000;
[L9811]  COND TRUE   gas >= 0
[L9812]              assume msgvalue_MSG == 0;
[L9813]  CALL        call __ret_0_isPauser := isPauser~address_PauserRole(this, msgsender_MSG, msgvalue_MSG, account_s760);
[L982]               havoc __exception;
[L983]               revert := false;
[L984]   COND TRUE   __exception
[L985]               __tmp__Balance := Balance;
[L986]               __tmp__DType := DType;
[L987]               __tmp__Alloc := Alloc;
[L988]               __tmp__balance_ADDR := balance_ADDR;
[L989]               __tmp__M_Ref_int := M_Ref_int;
[L990]               __tmp__sum__balances0 := sum__balances0;
[L991]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L992]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L993]               __tmp__sum__allowed1 := sum__allowed1;
[L994]               __tmp__M_Ref_bool := M_Ref_bool;
[L995]               __tmp__sum := sum;
[L996]               __tmp__Length := Length;
[L997]               __tmp__now := now;
[L998]               __tmp___balances_ERC20 := _balances_ERC20;
[L999]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L1000]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1001]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1002]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1003]              __tmp___paused_Pausable := _paused_Pausable;
[L1004]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1005]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1006]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1007]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1008]  CALL        call __ret_0_ := isPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, account_s760);
[L4983]  CALL        call __var_24 := has~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s760);
[L4865]              __var_21 := null;
[L4866]  COND TRUE   !(account_s713 != null)
[L4867]              revert := true;
[L4983]  RET         call __var_24 := has~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s760);
[L4984]  COND TRUE   revert
[L1008]  RET         call __ret_0_ := isPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, account_s760);
[L1009]              assume revert || gas < 0;
[L9813]  RET         call __ret_0_isPauser := isPauser~address_PauserRole(this, msgsender_MSG, msgvalue_MSG, account_s760);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:15,512 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:15,512 INFO  L82        PathProgramCache]: Analyzing trace with hash 1302293686, now seen corresponding path program 1 times
[2020-11-25 02:31:15,513 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:15,535 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:15,849 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1105 trivial. 0 not checked.
[2020-11-25 02:31:15,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:15,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 02:31:15,850 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:15,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:31:15,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:31:15,850 INFO  L87              Difference]: Start difference. First operand 6906 states and 8022 transitions. cyclomatic complexity: 1129 Second operand 15 states.
[2020-11-25 02:31:19,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:19,874 INFO  L93              Difference]: Finished difference Result 6932 states and 8031 transitions.
[2020-11-25 02:31:19,874 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 02:31:19,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6932 states and 8031 transitions.
[2020-11-25 02:31:19,888 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 02:31:19,901 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6932 states to 6932 states and 8031 transitions.
[2020-11-25 02:31:19,901 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1379
[2020-11-25 02:31:19,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1379
[2020-11-25 02:31:19,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6932 states and 8031 transitions.
[2020-11-25 02:31:19,905 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:19,905 INFO  L728         BuchiCegarLoop]: Abstraction has 6932 states and 8031 transitions.
[2020-11-25 02:31:19,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6932 states and 8031 transitions.
[2020-11-25 02:31:19,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6932 to 6852.
[2020-11-25 02:31:19,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6852 states.
[2020-11-25 02:31:19,944 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6852 states to 6852 states and 7928 transitions.
[2020-11-25 02:31:19,944 INFO  L751         BuchiCegarLoop]: Abstraction has 6852 states and 7928 transitions.
[2020-11-25 02:31:19,944 INFO  L631         BuchiCegarLoop]: Abstraction has 6852 states and 7928 transitions.
[2020-11-25 02:31:19,944 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 02:31:19,944 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6852 states and 7928 transitions.
[2020-11-25 02:31:19,950 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 02:31:19,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:19,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:19,951 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:19,952 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND FALSE  !(choice == 10)
[L9845]  COND FALSE  !(choice == 9)
[L9851]  COND FALSE  !(choice == 8)
[L9857]  COND FALSE  !(choice == 7)
[L9863]  COND FALSE  !(choice == 6)
[L9869]  COND FALSE  !(choice == 5)
[L9875]  COND FALSE  !(choice == 4)
[L9881]  COND FALSE  !(choice == 3)
[L9888]  COND TRUE   choice == 2
[L9889]              gas := gas - 21000;
[L9890]  COND TRUE   gas >= 0
[L9891]              assume value_s1185 >= 0 && value_s1185 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9892]              assume msgvalue_MSG == 0;
[L9893]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L2569]              havoc __exception;
[L2570]              revert := false;
[L2571]  COND FALSE  !(__exception)
[L2598]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L6069]  COND TRUE   DType[this] == OMToken
[L6070]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1185);
[L4649]              __var_13 := null;
[L4650]  COND FALSE  !(!(account_s579 != null))
[L4654]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4654]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4655]  COND FALSE  !(revert)
[L4658]              _totalSupply_ERC20[this] := __var_14;
[L4659]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4659]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4660]  COND FALSE  !(revert)
[L4663]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s579];
[L4664]              _balances_ERC20[this][account_s579] := __var_15;
[L4665]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s579];
[L4666]              assert { :EventEmitted "Transfer_ERC20" } true;
[L6070]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1185);
[L6071]  COND FALSE  !(revert)
[L2598]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L2599]              assume !revert && gas >= 0;
[L9893]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s1185);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:19,956 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:19,956 INFO  L82        PathProgramCache]: Analyzing trace with hash 1534266829, now seen corresponding path program 1 times
[2020-11-25 02:31:19,957 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:19,987 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:21,746 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 34 proven. 1 refuted. 0 times theorem prover too weak. 1070 trivial. 0 not checked.
[2020-11-25 02:31:21,747 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:31:21,747 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-11-25 02:31:21,747 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:21,747 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-11-25 02:31:21,748 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=136, Invalid=1844, Unknown=0, NotChecked=0, Total=1980
[2020-11-25 02:31:21,748 INFO  L87              Difference]: Start difference. First operand 6852 states and 7928 transitions. cyclomatic complexity: 1089 Second operand 45 states.
[2020-11-25 02:31:44,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:44,125 INFO  L93              Difference]: Finished difference Result 6906 states and 8139 transitions.
[2020-11-25 02:31:44,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 02:31:44,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6906 states and 8139 transitions.
[2020-11-25 02:31:44,140 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:31:44,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6906 states to 6906 states and 8139 transitions.
[2020-11-25 02:31:44,155 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:31:44,155 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:31:44,155 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6906 states and 8139 transitions.
[2020-11-25 02:31:44,159 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:44,159 INFO  L728         BuchiCegarLoop]: Abstraction has 6906 states and 8139 transitions.
[2020-11-25 02:31:44,162 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6906 states and 8139 transitions.
[2020-11-25 02:31:44,191 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6906 to 6868.
[2020-11-25 02:31:44,191 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6868 states.
[2020-11-25 02:31:44,199 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6868 states to 6868 states and 7988 transitions.
[2020-11-25 02:31:44,199 INFO  L751         BuchiCegarLoop]: Abstraction has 6868 states and 7988 transitions.
[2020-11-25 02:31:44,199 INFO  L631         BuchiCegarLoop]: Abstraction has 6868 states and 7988 transitions.
[2020-11-25 02:31:44,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 02:31:44,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6868 states and 7988 transitions.
[2020-11-25 02:31:44,205 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:44,205 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:44,205 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:44,206 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:44,206 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:44,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:44,211 INFO  L82        PathProgramCache]: Analyzing trace with hash -4413572, now seen corresponding path program 1 times
[2020-11-25 02:31:44,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:44,242 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:44,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 1109 backedges. 31 proven. 78 refuted. 0 times theorem prover too weak. 1000 trivial. 0 not checked.
[2020-11-25 02:31:44,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:31:44,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 02:31:44,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:44,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 02:31:44,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=740, Unknown=0, NotChecked=0, Total=812
[2020-11-25 02:31:44,811 INFO  L87              Difference]: Start difference. First operand 6868 states and 7988 transitions. cyclomatic complexity: 1138 Second operand 29 states.
[2020-11-25 02:31:54,146 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:54,147 INFO  L93              Difference]: Finished difference Result 6894 states and 8045 transitions.
[2020-11-25 02:31:54,147 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 02:31:54,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6894 states and 8045 transitions.
[2020-11-25 02:31:54,159 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:54,172 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6894 states to 6894 states and 8045 transitions.
[2020-11-25 02:31:54,172 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1353
[2020-11-25 02:31:54,173 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1353
[2020-11-25 02:31:54,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6894 states and 8045 transitions.
[2020-11-25 02:31:54,176 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:54,176 INFO  L728         BuchiCegarLoop]: Abstraction has 6894 states and 8045 transitions.
[2020-11-25 02:31:54,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6894 states and 8045 transitions.
[2020-11-25 02:31:54,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6894 to 6882.
[2020-11-25 02:31:54,207 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6882 states.
[2020-11-25 02:31:54,215 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6882 states to 6882 states and 8012 transitions.
[2020-11-25 02:31:54,215 INFO  L751         BuchiCegarLoop]: Abstraction has 6882 states and 8012 transitions.
[2020-11-25 02:31:54,215 INFO  L631         BuchiCegarLoop]: Abstraction has 6882 states and 8012 transitions.
[2020-11-25 02:31:54,215 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 02:31:54,216 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6882 states and 8012 transitions.
[2020-11-25 02:31:54,222 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:54,222 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:54,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:54,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:54,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND FALSE  !(DType[this] == OMToken)
[L4293]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4298]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4303]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4308]  COND TRUE   DType[this] == ERC20
[L4309]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4309]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4310]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]);
[L2]                 success_transfer_ERC20Pausable0 := true;
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:54,227 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:54,228 INFO  L82        PathProgramCache]: Analyzing trace with hash -1063929158, now seen corresponding path program 1 times
[2020-11-25 02:31:54,228 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:54,245 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:54,446 INFO  L134       CoverageAnalysis]: Checked inductivity of 1109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1108 trivial. 0 not checked.
[2020-11-25 02:31:54,446 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:54,446 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:31:54,446 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:54,447 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:31:54,447 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:31:54,447 INFO  L87              Difference]: Start difference. First operand 6882 states and 8012 transitions. cyclomatic complexity: 1148 Second operand 7 states.
[2020-11-25 02:31:54,552 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:54,552 INFO  L93              Difference]: Finished difference Result 7026 states and 8160 transitions.
[2020-11-25 02:31:54,552 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:31:54,553 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7026 states and 8160 transitions.
[2020-11-25 02:31:54,564 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:54,577 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7026 states to 6862 states and 7984 transitions.
[2020-11-25 02:31:54,577 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1343
[2020-11-25 02:31:54,577 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1343
[2020-11-25 02:31:54,577 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6862 states and 7984 transitions.
[2020-11-25 02:31:54,581 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:54,581 INFO  L728         BuchiCegarLoop]: Abstraction has 6862 states and 7984 transitions.
[2020-11-25 02:31:54,584 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6862 states and 7984 transitions.
[2020-11-25 02:31:54,612 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6862 to 6862.
[2020-11-25 02:31:54,612 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6862 states.
[2020-11-25 02:31:54,620 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6862 states to 6862 states and 7984 transitions.
[2020-11-25 02:31:54,620 INFO  L751         BuchiCegarLoop]: Abstraction has 6862 states and 7984 transitions.
[2020-11-25 02:31:54,620 INFO  L631         BuchiCegarLoop]: Abstraction has 6862 states and 7984 transitions.
[2020-11-25 02:31:54,620 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 02:31:54,620 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6862 states and 7984 transitions.
[2020-11-25 02:31:54,626 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:54,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:54,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:54,627 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:54,627 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND FALSE  !(DType[this] == OMToken)
[L5364]  COND TRUE   DType[this] == ERC20Pausable
[L5365]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND FALSE  !(DType[this] == OMToken)
[L4293]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4298]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4303]  COND TRUE   DType[this] == ERC20Pausable
[L4304]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4304]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4305]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5365]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5366]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]);
[L2]                 success_transfer_ERC20Pausable0 := true;
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:54,632 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:54,632 INFO  L82        PathProgramCache]: Analyzing trace with hash 766845944, now seen corresponding path program 1 times
[2020-11-25 02:31:54,633 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:54,651 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:54,849 INFO  L134       CoverageAnalysis]: Checked inductivity of 1110 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1109 trivial. 0 not checked.
[2020-11-25 02:31:54,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:54,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:31:54,850 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:54,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:31:54,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:31:54,850 INFO  L87              Difference]: Start difference. First operand 6862 states and 7984 transitions. cyclomatic complexity: 1140 Second operand 6 states.
[2020-11-25 02:31:54,938 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:54,938 INFO  L93              Difference]: Finished difference Result 6978 states and 8100 transitions.
[2020-11-25 02:31:54,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:31:54,939 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6978 states and 8100 transitions.
[2020-11-25 02:31:54,951 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:54,963 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6978 states to 6842 states and 7956 transitions.
[2020-11-25 02:31:54,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1339
[2020-11-25 02:31:54,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1339
[2020-11-25 02:31:54,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6842 states and 7956 transitions.
[2020-11-25 02:31:54,967 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:54,967 INFO  L728         BuchiCegarLoop]: Abstraction has 6842 states and 7956 transitions.
[2020-11-25 02:31:54,970 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6842 states and 7956 transitions.
[2020-11-25 02:31:54,998 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6842 to 6842.
[2020-11-25 02:31:54,998 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6842 states.
[2020-11-25 02:31:55,005 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6842 states to 6842 states and 7956 transitions.
[2020-11-25 02:31:55,005 INFO  L751         BuchiCegarLoop]: Abstraction has 6842 states and 7956 transitions.
[2020-11-25 02:31:55,005 INFO  L631         BuchiCegarLoop]: Abstraction has 6842 states and 7956 transitions.
[2020-11-25 02:31:55,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 02:31:55,005 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6842 states and 7956 transitions.
[2020-11-25 02:31:55,011 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:55,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:55,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:55,013 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:55,013 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND FALSE  !(DType[this] == OMToken)
[L4293]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4298]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4303]  COND TRUE   DType[this] == ERC20Pausable
[L4304]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4304]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4305]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]);
[L2]                 success_transfer_ERC20Pausable0 := true;
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:55,016 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:55,016 INFO  L82        PathProgramCache]: Analyzing trace with hash -1758591193, now seen corresponding path program 1 times
[2020-11-25 02:31:55,017 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:55,034 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:55,275 INFO  L134       CoverageAnalysis]: Checked inductivity of 1109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1108 trivial. 0 not checked.
[2020-11-25 02:31:55,275 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:55,275 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:31:55,276 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:55,276 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:31:55,276 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:31:55,276 INFO  L87              Difference]: Start difference. First operand 6842 states and 7956 transitions. cyclomatic complexity: 1132 Second operand 7 states.
[2020-11-25 02:31:55,376 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:55,376 INFO  L93              Difference]: Finished difference Result 6978 states and 8092 transitions.
[2020-11-25 02:31:55,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:31:55,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6978 states and 8092 transitions.
[2020-11-25 02:31:55,388 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:55,400 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6978 states to 6822 states and 7928 transitions.
[2020-11-25 02:31:55,400 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1335
[2020-11-25 02:31:55,401 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1335
[2020-11-25 02:31:55,401 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6822 states and 7928 transitions.
[2020-11-25 02:31:55,404 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:55,404 INFO  L728         BuchiCegarLoop]: Abstraction has 6822 states and 7928 transitions.
[2020-11-25 02:31:55,408 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6822 states and 7928 transitions.
[2020-11-25 02:31:55,435 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6822 to 6822.
[2020-11-25 02:31:55,435 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6822 states.
[2020-11-25 02:31:55,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6822 states to 6822 states and 7928 transitions.
[2020-11-25 02:31:55,443 INFO  L751         BuchiCegarLoop]: Abstraction has 6822 states and 7928 transitions.
[2020-11-25 02:31:55,443 INFO  L631         BuchiCegarLoop]: Abstraction has 6822 states and 7928 transitions.
[2020-11-25 02:31:55,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 02:31:55,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6822 states and 7928 transitions.
[2020-11-25 02:31:55,449 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:55,449 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:55,449 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:55,451 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:55,451 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND FALSE  !(DType[this] == OMToken)
[L4293]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4298]  COND TRUE   DType[this] == ERC20Mintable
[L4299]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4299]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4300]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]);
[L2]                 success_transfer_ERC20Pausable0 := true;
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:55,455 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:55,455 INFO  L82        PathProgramCache]: Analyzing trace with hash 1277025028, now seen corresponding path program 1 times
[2020-11-25 02:31:55,456 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:55,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:55,676 INFO  L134       CoverageAnalysis]: Checked inductivity of 1109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1108 trivial. 0 not checked.
[2020-11-25 02:31:55,676 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:31:55,676 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:31:55,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:55,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:31:55,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:31:55,676 INFO  L87              Difference]: Start difference. First operand 6822 states and 7928 transitions. cyclomatic complexity: 1124 Second operand 7 states.
[2020-11-25 02:31:55,775 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:31:55,775 INFO  L93              Difference]: Finished difference Result 6958 states and 8064 transitions.
[2020-11-25 02:31:55,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:31:55,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6958 states and 8064 transitions.
[2020-11-25 02:31:55,787 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:55,799 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6958 states to 6802 states and 7900 transitions.
[2020-11-25 02:31:55,800 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1331
[2020-11-25 02:31:55,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1331
[2020-11-25 02:31:55,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6802 states and 7900 transitions.
[2020-11-25 02:31:55,804 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:31:55,804 INFO  L728         BuchiCegarLoop]: Abstraction has 6802 states and 7900 transitions.
[2020-11-25 02:31:55,807 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6802 states and 7900 transitions.
[2020-11-25 02:31:55,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6802 to 6802.
[2020-11-25 02:31:55,835 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6802 states.
[2020-11-25 02:31:55,842 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6802 states to 6802 states and 7900 transitions.
[2020-11-25 02:31:55,842 INFO  L751         BuchiCegarLoop]: Abstraction has 6802 states and 7900 transitions.
[2020-11-25 02:31:55,842 INFO  L631         BuchiCegarLoop]: Abstraction has 6802 states and 7900 transitions.
[2020-11-25 02:31:55,842 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 02:31:55,842 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6802 states and 7900 transitions.
[2020-11-25 02:31:55,849 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:31:55,849 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:31:55,849 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:31:55,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:31:55,850 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]);
[L2]                 success_transfer_ERC20Pausable0 := true;
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:31:55,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:31:55,854 INFO  L82        PathProgramCache]: Analyzing trace with hash 312164817, now seen corresponding path program 1 times
[2020-11-25 02:31:55,854 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:31:55,882 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:31:56,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 1109 backedges. 30 proven. 2 refuted. 0 times theorem prover too weak. 1077 trivial. 0 not checked.
[2020-11-25 02:31:56,508 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:31:56,508 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 02:31:56,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:31:56,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 02:31:56,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=105, Invalid=1017, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 02:31:56,509 INFO  L87              Difference]: Start difference. First operand 6802 states and 7900 transitions. cyclomatic complexity: 1116 Second operand 34 states.
[2020-11-25 02:32:06,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:32:06,128 INFO  L93              Difference]: Finished difference Result 6828 states and 8017 transitions.
[2020-11-25 02:32:06,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 02:32:06,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6828 states and 8017 transitions.
[2020-11-25 02:32:06,142 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:32:06,156 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6828 states to 6828 states and 8017 transitions.
[2020-11-25 02:32:06,156 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1337
[2020-11-25 02:32:06,157 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1337
[2020-11-25 02:32:06,157 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6828 states and 8017 transitions.
[2020-11-25 02:32:06,160 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:32:06,160 INFO  L728         BuchiCegarLoop]: Abstraction has 6828 states and 8017 transitions.
[2020-11-25 02:32:06,164 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6828 states and 8017 transitions.
[2020-11-25 02:32:06,192 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6828 to 6816.
[2020-11-25 02:32:06,192 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6816 states.
[2020-11-25 02:32:06,200 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6816 states to 6816 states and 7971 transitions.
[2020-11-25 02:32:06,200 INFO  L751         BuchiCegarLoop]: Abstraction has 6816 states and 7971 transitions.
[2020-11-25 02:32:06,200 INFO  L631         BuchiCegarLoop]: Abstraction has 6816 states and 7971 transitions.
[2020-11-25 02:32:06,200 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 02:32:06,200 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6816 states and 7971 transitions.
[2020-11-25 02:32:06,206 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:32:06,206 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:32:06,206 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:32:06,208 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:32:06,208 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND TRUE   choice == 10
[L9840]              gas := gas - 21000;
[L9841]  COND TRUE   gas >= 0
[L9842]              assume msgvalue_MSG == 0;
[L9843]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1373]              havoc __exception;
[L1374]              revert := false;
[L1375]  COND FALSE  !(__exception)
[L1402]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5250]  CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8281]  COND TRUE   DType[this] == OMToken
[L8282]  CALL        call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4994]  CALL        call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4994]  RET         call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4995]  COND FALSE  !(revert)
[L4998]              __ret_0_ := __var_24;
[L8282]  RET         call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8283]  COND FALSE  !(revert)
[L8304]  COND FALSE  !(!__var_23)
[L5250]  RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5251]  COND FALSE  !(revert)
[L5254]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8336]  COND FALSE  !(!_paused_Pausable[this])
[L5254]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5258]              _paused_Pausable[this] := false;
[L5259]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L1402]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1403]              assume !revert && gas >= 0;
[L9843]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL       call CorralChoice_OMToken(this);
[L9689]             havoc msgsender_MSG;
[L9690]             havoc msgvalue_MSG;
[L9691]             havoc choice;
[L9692]             havoc to_s916;
[L9693]             havoc value_s916;
[L9694]             havoc __ret_0_transfer;
[L9695]             havoc spender_s955;
[L9696]             havoc value_s955;
[L9697]             havoc __ret_0_approve;
[L9698]             havoc from_s937;
[L9699]             havoc to_s937;
[L9700]             havoc value_s937;
[L9701]             havoc __ret_0_transferFrom;
[L9702]             havoc __ret_0_totalSupply;
[L9703]             havoc owner_s231;
[L9704]             havoc __ret_0_balanceOf;
[L9705]             havoc owner_s247;
[L9706]             havoc spender_s247;
[L9707]             havoc __ret_0_allowance;
[L9708]             havoc spender_s973;
[L9709]             havoc addedValue_s973;
[L9710]             havoc success_s973;
[L9711]             havoc spender_s991;
[L9712]             havoc subtractedValue_s991;
[L9713]             havoc success_s991;
[L9714]             havoc account_s760;
[L9715]             havoc __ret_0_isPauser;
[L9716]             havoc account_s772;
[L9717]             havoc __ret_0_paused;
[L9718]             havoc name_s1022;
[L9719]             havoc symbol_s1022;
[L9720]             havoc decimals_s1022;
[L9721]             havoc __ret_0_name;
[L9722]             havoc __ret_0_symbol;
[L9723]             havoc __ret_0_decimals;
[L9724]             havoc account_s1093;
[L9725]             havoc __ret_0_isMinter;
[L9726]             havoc account_s1105;
[L9727]             havoc to_s1170;
[L9728]             havoc value_s1170;
[L9729]             havoc __ret_0_mint;
[L9730]             havoc value_s1185;
[L9731]             havoc from_s1198;
[L9732]             havoc value_s1198;
[L9733]             havoc name_s1230;
[L9734]             havoc symbol_s1230;
[L9735]             havoc decimals_s1230;
[L9736]             havoc tmpNow;
[L9737]             havoc gas;
[L9738]             assume gas > 4000000 && gas <= 8000000;
[L9739]             tmpNow := now;
[L9740]             havoc now;
[L9741]             assume now > tmpNow;
[L9742]             assume msgsender_MSG != null;
[L9743]             assume DType[msgsender_MSG] != IERC20;
[L9744]             assume DType[msgsender_MSG] != SafeMath;
[L9745]             assume DType[msgsender_MSG] != ERC20;
[L9746]             assume DType[msgsender_MSG] != Roles;
[L9747]             assume DType[msgsender_MSG] != PauserRole;
[L9748]             assume DType[msgsender_MSG] != Pausable;
[L9749]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]             assume DType[msgsender_MSG] != MinterRole;
[L9752]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]             assume DType[msgsender_MSG] != OMToken;
[L9755]             Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE  choice == 23
[L9757]             gas := gas - 21000;
[L9758]  COND TRUE  gas >= 0
[L9759]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]             assume msgvalue_MSG == 0;
[L9761]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1511]             havoc __exception;
[L1512]             revert := false;
[L1513]  COND TRUE  __exception
[L1514]             __tmp__Balance := Balance;
[L1515]             __tmp__DType := DType;
[L1516]             __tmp__Alloc := Alloc;
[L1517]             __tmp__balance_ADDR := balance_ADDR;
[L1518]             __tmp__M_Ref_int := M_Ref_int;
[L1519]             __tmp__sum__balances0 := sum__balances0;
[L1520]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]             __tmp__sum__allowed1 := sum__allowed1;
[L1523]             __tmp__M_Ref_bool := M_Ref_bool;
[L1524]             __tmp__sum := sum;
[L1525]             __tmp__Length := Length;
[L1526]             __tmp__now := now;
[L1527]             __tmp___balances_ERC20 := _balances_ERC20;
[L1528]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]             __tmp___paused_Pausable := _paused_Pausable;
[L1533]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8313]             revert := true;
[L5330]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE  revert
[L1537]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]             assume revert || gas < 0;
[L9761]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:32:06,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:06,211 INFO  L82        PathProgramCache]: Analyzing trace with hash -137257774, now seen corresponding path program 1 times
[2020-11-25 02:32:06,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:06,229 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:32:06,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 1130 backedges. 7 proven. 69 refuted. 0 times theorem prover too weak. 1054 trivial. 0 not checked.
[2020-11-25 02:32:06,508 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:32:06,508 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 02:32:06,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:32:06,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:32:06,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:32:06,509 INFO  L87              Difference]: Start difference. First operand 6816 states and 7971 transitions. cyclomatic complexity: 1177 Second operand 14 states.
[2020-11-25 02:32:09,829 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:32:09,829 INFO  L93              Difference]: Finished difference Result 6824 states and 7989 transitions.
[2020-11-25 02:32:09,829 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 02:32:09,829 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6824 states and 7989 transitions.
[2020-11-25 02:32:09,843 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:32:09,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6824 states to 6824 states and 7989 transitions.
[2020-11-25 02:32:09,857 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1335
[2020-11-25 02:32:09,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1335
[2020-11-25 02:32:09,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6824 states and 7989 transitions.
[2020-11-25 02:32:09,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:32:09,862 INFO  L728         BuchiCegarLoop]: Abstraction has 6824 states and 7989 transitions.
[2020-11-25 02:32:09,865 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6824 states and 7989 transitions.
[2020-11-25 02:32:09,893 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6824 to 6824.
[2020-11-25 02:32:09,894 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6824 states.
[2020-11-25 02:32:09,902 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6824 states to 6824 states and 7989 transitions.
[2020-11-25 02:32:09,902 INFO  L751         BuchiCegarLoop]: Abstraction has 6824 states and 7989 transitions.
[2020-11-25 02:32:09,902 INFO  L631         BuchiCegarLoop]: Abstraction has 6824 states and 7989 transitions.
[2020-11-25 02:32:09,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 02:32:09,902 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6824 states and 7989 transitions.
[2020-11-25 02:32:09,908 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:32:09,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:32:09,908 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:32:09,910 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:32:09,910 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND TRUE   choice == 11
[L9834]              gas := gas - 21000;
[L9835]  COND TRUE   gas >= 0
[L9836]              assume msgvalue_MSG == 0;
[L9837]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1310]              havoc __exception;
[L1311]              revert := false;
[L1312]  COND FALSE  !(__exception)
[L1339]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8281]  COND TRUE   DType[this] == OMToken
[L8282]  CALL        call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4994]  CALL        call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4994]  RET         call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4995]  COND FALSE  !(revert)
[L4998]              __ret_0_ := __var_24;
[L8282]  RET         call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8283]  COND FALSE  !(revert)
[L8304]  COND FALSE  !(!__var_23)
[L5223]  RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5224]  COND FALSE  !(revert)
[L5227]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5227]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5228]  COND FALSE  !(revert)
[L5231]              _paused_Pausable[this] := true;
[L5232]              assert { :EventEmitted "Paused_Pausable" } true;
[L1339]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1340]              assume !revert && gas >= 0;
[L9837]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND TRUE   choice == 11
[L9834]              gas := gas - 21000;
[L9835]  COND TRUE   gas >= 0
[L9836]              assume msgvalue_MSG == 0;
[L9837]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1310]              havoc __exception;
[L1311]              revert := false;
[L1312]  COND FALSE  !(__exception)
[L1339]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8281]  COND TRUE   DType[this] == OMToken
[L8282]  CALL        call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4994]  CALL        call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4994]  RET         call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4995]  COND FALSE  !(revert)
[L4998]              __ret_0_ := __var_24;
[L8282]  RET         call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8283]  COND FALSE  !(revert)
[L8304]  COND FALSE  !(!__var_23)
[L5223]  RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5224]  COND FALSE  !(revert)
[L5227]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5227]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5228]  COND FALSE  !(revert)
[L5231]              _paused_Pausable[this] := true;
[L5232]              assert { :EventEmitted "Paused_Pausable" } true;
[L1339]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1340]              assume !revert && gas >= 0;
[L9837]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:32:09,914 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:09,914 INFO  L82        PathProgramCache]: Analyzing trace with hash -1674022194, now seen corresponding path program 1 times
[2020-11-25 02:32:09,914 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:09,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:09,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:10,103 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:10,104 INFO  L82        PathProgramCache]: Analyzing trace with hash -1396914623, now seen corresponding path program 1 times
[2020-11-25 02:32:10,104 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:10,108 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:10,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:10,120 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:10,120 INFO  L82        PathProgramCache]: Analyzing trace with hash 498389716, now seen corresponding path program 1 times
[2020-11-25 02:32:10,121 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:10,142 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:32:10,414 INFO  L134       CoverageAnalysis]: Checked inductivity of 1132 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 1130 trivial. 0 not checked.
[2020-11-25 02:32:10,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:32:10,415 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-25 02:32:10,415 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:32:10,415 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:32:10,416 INFO  L87              Difference]: Start difference. First operand 6824 states and 7989 transitions. cyclomatic complexity: 1187 Second operand 14 states.
[2020-11-25 02:32:15,510 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:32:15,510 INFO  L93              Difference]: Finished difference Result 10182 states and 11986 transitions.
[2020-11-25 02:32:15,510 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:32:15,510 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10182 states and 11986 transitions.
[2020-11-25 02:32:15,542 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 02:32:15,569 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10182 states to 10182 states and 11986 transitions.
[2020-11-25 02:32:15,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1911
[2020-11-25 02:32:15,570 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1963
[2020-11-25 02:32:15,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10182 states and 11986 transitions.
[2020-11-25 02:32:15,577 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:32:15,577 INFO  L728         BuchiCegarLoop]: Abstraction has 10182 states and 11986 transitions.
[2020-11-25 02:32:15,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10182 states and 11986 transitions.
[2020-11-25 02:32:15,629 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10182 to 9464.
[2020-11-25 02:32:15,629 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9464 states.
[2020-11-25 02:32:15,643 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9464 states to 9464 states and 11262 transitions.
[2020-11-25 02:32:15,643 INFO  L751         BuchiCegarLoop]: Abstraction has 9464 states and 11262 transitions.
[2020-11-25 02:32:15,643 INFO  L631         BuchiCegarLoop]: Abstraction has 9464 states and 11262 transitions.
[2020-11-25 02:32:15,643 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 02:32:15,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9464 states and 11262 transitions.
[2020-11-25 02:32:15,656 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 02:32:15,656 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:32:15,656 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:32:15,658 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:32:15,658 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND TRUE   choice == 11
[L9834]              gas := gas - 21000;
[L9835]  COND TRUE   gas >= 0
[L9836]              assume msgvalue_MSG == 0;
[L9837]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1310]              havoc __exception;
[L1311]              revert := false;
[L1312]  COND FALSE  !(__exception)
[L1339]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8281]  COND TRUE   DType[this] == OMToken
[L8282]  CALL        call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4994]  CALL        call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4994]  RET         call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4995]  COND FALSE  !(revert)
[L4998]              __ret_0_ := __var_24;
[L8282]  RET         call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8283]  COND FALSE  !(revert)
[L8304]  COND FALSE  !(!__var_23)
[L5223]  RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5224]  COND FALSE  !(revert)
[L5227]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5227]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5228]  COND FALSE  !(revert)
[L5231]              _paused_Pausable[this] := true;
[L5232]              assert { :EventEmitted "Paused_Pausable" } true;
[L1339]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1340]              assume !revert && gas >= 0;
[L9837]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:32:15,662 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:15,662 INFO  L82        PathProgramCache]: Analyzing trace with hash -1674022194, now seen corresponding path program 2 times
[2020-11-25 02:32:15,663 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:15,682 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:15,703 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:15,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:15,775 INFO  L82        PathProgramCache]: Analyzing trace with hash 124804852, now seen corresponding path program 1 times
[2020-11-25 02:32:15,775 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:15,777 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:32:15,782 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:32:15,782 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:32:15,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:32:15,782 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:32:15,782 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:32:15,782 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:32:15,782 INFO  L87              Difference]: Start difference. First operand 9464 states and 11262 transitions. cyclomatic complexity: 1820 Second operand 4 states.
[2020-11-25 02:32:16,648 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:32:16,648 INFO  L93              Difference]: Finished difference Result 10059 states and 12053 transitions.
[2020-11-25 02:32:16,648 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:32:16,648 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10059 states and 12053 transitions.
[2020-11-25 02:32:16,674 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 48
[2020-11-25 02:32:16,702 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10059 states to 10059 states and 12053 transitions.
[2020-11-25 02:32:16,702 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1971
[2020-11-25 02:32:16,703 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1971
[2020-11-25 02:32:16,703 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10059 states and 12053 transitions.
[2020-11-25 02:32:16,710 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:32:16,710 INFO  L728         BuchiCegarLoop]: Abstraction has 10059 states and 12053 transitions.
[2020-11-25 02:32:16,715 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10059 states and 12053 transitions.
[2020-11-25 02:32:16,765 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10059 to 9418.
[2020-11-25 02:32:16,765 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9418 states.
[2020-11-25 02:32:16,778 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9418 states to 9418 states and 11009 transitions.
[2020-11-25 02:32:16,778 INFO  L751         BuchiCegarLoop]: Abstraction has 9418 states and 11009 transitions.
[2020-11-25 02:32:16,778 INFO  L631         BuchiCegarLoop]: Abstraction has 9418 states and 11009 transitions.
[2020-11-25 02:32:16,779 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 02:32:16,779 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9418 states and 11009 transitions.
[2020-11-25 02:32:16,788 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 02:32:16,788 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:32:16,788 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:32:16,789 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:32:16,789 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND TRUE   choice == 11
[L9834]              gas := gas - 21000;
[L9835]  COND TRUE   gas >= 0
[L9836]              assume msgvalue_MSG == 0;
[L9837]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1310]              havoc __exception;
[L1311]              revert := false;
[L1312]  COND FALSE  !(__exception)
[L1339]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8281]  COND TRUE   DType[this] == OMToken
[L8282]  CALL        call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4994]  CALL        call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4994]  RET         call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4995]  COND FALSE  !(revert)
[L4998]              __ret_0_ := __var_24;
[L8282]  RET         call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8283]  COND FALSE  !(revert)
[L8304]  COND FALSE  !(!__var_23)
[L5223]  RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5224]  COND FALSE  !(revert)
[L5227]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5227]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5228]  COND FALSE  !(revert)
[L5231]              _paused_Pausable[this] := true;
[L5232]              assert { :EventEmitted "Paused_Pausable" } true;
[L1339]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1340]              assume !revert && gas >= 0;
[L9837]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND TRUE   __exception
[L1514]              __tmp__Balance := Balance;
[L1515]              __tmp__DType := DType;
[L1516]              __tmp__Alloc := Alloc;
[L1517]              __tmp__balance_ADDR := balance_ADDR;
[L1518]              __tmp__M_Ref_int := M_Ref_int;
[L1519]              __tmp__sum__balances0 := sum__balances0;
[L1520]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]              __tmp__sum__allowed1 := sum__allowed1;
[L1523]              __tmp__M_Ref_bool := M_Ref_bool;
[L1524]              __tmp__sum := sum;
[L1525]              __tmp__Length := Length;
[L1526]              __tmp__now := now;
[L1527]              __tmp___balances_ERC20 := _balances_ERC20;
[L1528]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]              __tmp___paused_Pausable := _paused_Pausable;
[L1533]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8313]              revert := true;
[L5330]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE   revert
[L1537]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]              assume revert || gas < 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND TRUE   choice == 20
[L9778]              gas := gas - 21000;
[L9779]  COND TRUE   gas >= 0
[L9780]              assume msgvalue_MSG == 0;
[L9781]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L306]               havoc __exception;
[L307]               revert := false;
[L308]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]              __ret_0_ := _totalSupply_ERC20[this];
[L335]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L336]               assume !revert && gas >= 0;
[L9781]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:32:16,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:16,793 INFO  L82        PathProgramCache]: Analyzing trace with hash -1674022194, now seen corresponding path program 3 times
[2020-11-25 02:32:16,794 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:16,812 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:16,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:16,897 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:16,898 INFO  L82        PathProgramCache]: Analyzing trace with hash 1301629057, now seen corresponding path program 1 times
[2020-11-25 02:32:16,898 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:16,901 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:16,903 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:16,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:32:16,908 INFO  L82        PathProgramCache]: Analyzing trace with hash -2136232306, now seen corresponding path program 1 times
[2020-11-25 02:32:16,908 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:32:16,930 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:16,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 02:32:17,445 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
[2020-11-25 02:32:19,656 WARN  L188               SmtUtils]: Spent 1.30 s on a formula simplification. DAG size of input: 476 DAG size of output: 445
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:32:20,150 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 342
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 02:32:20,837 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification that was a NOOP. DAG size: 202
[2020-11-25 02:32:21,140 WARN  L188               SmtUtils]: Spent 301.00 ms on a formula simplification. DAG size of input: 267 DAG size of output: 264
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 02:32:21,357 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 336
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-25 02:32:21,485 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 271
[2020-11-25 02:32:23,137 WARN  L188               SmtUtils]: Spent 1.65 s on a formula simplification. DAG size of input: 753 DAG size of output: 740
Garbage collection #1: 307 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 307 to 613
Garbage collection #2: 613 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 613 to 1223
Garbage collection #3: 1223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1223 to 2441
Garbage collection #4: 2441 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2441 to 4877
Garbage collection #5: 4877 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4877 to 9749
Garbage collection #6: 9749 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9749 to 19489
Garbage collection #7: 19489 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19489 to 38977
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-25 02:32:23,411 WARN  L188               SmtUtils]: Spent 247.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 300
[2020-11-25 02:32:23,724 WARN  L188               SmtUtils]: Spent 293.00 ms on a formula simplification that was a NOOP. DAG size: 412
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 02:32:23,850 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 300
[2020-11-25 02:32:24,266 WARN  L188               SmtUtils]: Spent 414.00 ms on a formula simplification. DAG size of input: 414 DAG size of output: 413
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 02:32:24,478 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification that was a NOOP. DAG size: 409
[2020-11-25 02:32:24,498 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:24,523 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:32:24,534 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:32:24 BasicIcfg
[2020-11-25 02:32:24,534 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:32:24,534 INFO  L168              Benchmark]: Toolchain (without parser) took 116309.34 ms. Allocated memory was 1.0 GB in the beginning and 5.2 GB in the end (delta: 4.1 GB). Free memory was 924.5 MB in the beginning and 3.9 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.4 GB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,535 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,535 INFO  L168              Benchmark]: Boogie Preprocessor took 141.21 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,535 INFO  L168              Benchmark]: UtopiaSpecLang took 86.01 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,535 INFO  L168              Benchmark]: Boogie Printer took 29.05 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,535 INFO  L168              Benchmark]: RCFGBuilder took 1509.77 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 886.9 MB in the beginning and 833.5 MB in the end (delta: 53.4 MB). Peak memory consumption was 175.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,536 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.08 ms. Allocated memory is still 1.1 GB. Free memory was 833.5 MB in the beginning and 826.4 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,536 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3075.87 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 456.1 MB). Free memory was 826.4 MB in the beginning and 1.3 GB in the end (delta: -452.4 MB). Peak memory consumption was 404.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,537 INFO  L168              Benchmark]: BlockEncodingV2 took 226.48 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 125.7 MB). Peak memory consumption was 125.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,537 INFO  L168              Benchmark]: BuchiAutomizer took 111198.84 ms. Allocated memory was 1.6 GB in the beginning and 5.2 GB in the end (delta: 3.6 GB). Free memory was 1.2 GB in the beginning and 3.9 GB in the end (delta: -2.7 GB). Peak memory consumption was 4.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:32:24,539 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9262 locations, 17155 edges
  - StatisticsResult: Encoded RCFG
    9106 locations, 16728 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 141.21 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 86.01 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 29.05 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1509.77 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 886.9 MB in the beginning and 833.5 MB in the end (delta: 53.4 MB). Peak memory consumption was 175.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.08 ms. Allocated memory is still 1.1 GB. Free memory was 833.5 MB in the beginning and 826.4 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3075.87 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 456.1 MB). Free memory was 826.4 MB in the beginning and 1.3 GB in the end (delta: -452.4 MB). Peak memory consumption was 404.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 226.48 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 125.7 MB). Peak memory consumption was 125.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 111198.84 ms. Allocated memory was 1.6 GB in the beginning and 5.2 GB in the end (delta: 3.6 GB). Free memory was 1.2 GB in the beginning and 3.9 GB in the end (delta: -2.7 GB). Peak memory consumption was 4.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3603 locations, 5216 edges
  - StatisticsResult: BuchiProgram size
    9262 locations, 17155 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 32 terminating modules (32 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.32 modules have a trivial ranking function, the largest among these consists of 45 locations. The remainder module has 9418 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 111.1s and 33 iterations.  TraceHistogramMax:9. Analysis of lassos took 17.5s. Construction of modules took 71.2s. BÃ¼chi inclusion checks took 18.6s. Highest rank in rank-based complementation 0. Minimization of det autom 32. Minimization of nondet autom 0. Automata minimization 1.7s AutomataMinimizationTime, 32 MinimizatonAttempts, 10038 StatesRemovedByMinimization, 21 NontrivialMinimizations. Non-live state removal took 1.1s Buchi closure took 0.0s. Biggest automaton had 10483 states and ocurred in iteration 12.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 172450 SDtfs, 100349 SDslu, 743005 SDs, 0 SdLazy, 689107 SolverSat, 18818 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 71.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU30 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979029) = (new OMToken)({from : 3979024, name : 3979030, symbol : 3979033, decimals : 3979022});
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
Pausable(3979029).pause.gas(3979002)({from : 3979034});
[L1310]              havoc __exception;
[L1311]              revert := false;
[L1312]  COND FALSE  !(__exception)
[L1339]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8281]  COND TRUE   DType[this] == OMToken
[L8282]  CALL        call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4994]  CALL        call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4994]  RET         call __var_24 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s760);
[L4995]  COND FALSE  !(revert)
[L4998]              __ret_0_ := __var_24;
[L8282]  RET         call __var_23 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8283]  COND FALSE  !(revert)
[L8304]  COND FALSE  !(!__var_23)
[L5223]  RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5224]  COND FALSE  !(revert)
[L5227]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5227]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5228]  COND FALSE  !(revert)
[L5231]              _paused_Pausable[this] := true;
[L5232]              assert { :EventEmitted "Paused_Pausable" } true;
[L1339]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1340]              assume !revert && gas >= 0;
[L9837]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(3979029).transfer~address~uint256.gas(3979003)({from : 3979004, to : 3979004, value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s916 && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1511]             havoc __exception;
[L1512]             revert := false;
[L1513]  COND TRUE  __exception
[L1514]             __tmp__Balance := Balance;
[L1515]             __tmp__DType := DType;
[L1516]             __tmp__Alloc := Alloc;
[L1517]             __tmp__balance_ADDR := balance_ADDR;
[L1518]             __tmp__M_Ref_int := M_Ref_int;
[L1519]             __tmp__sum__balances0 := sum__balances0;
[L1520]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1521]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1522]             __tmp__sum__allowed1 := sum__allowed1;
[L1523]             __tmp__M_Ref_bool := M_Ref_bool;
[L1524]             __tmp__sum := sum;
[L1525]             __tmp__Length := Length;
[L1526]             __tmp__now := now;
[L1527]             __tmp___balances_ERC20 := _balances_ERC20;
[L1528]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1529]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1530]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1531]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1532]             __tmp___paused_Pausable := _paused_Pausable;
[L1533]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1534]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1535]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1536]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1537]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5330]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8312]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8313]             revert := true;
[L5330]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5331]  COND TRUE  revert
[L1537]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1538]             assume revert || gas < 0;
[L9761]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);

Loop:
ERC20(3979029).totalSupply.gas(3979001)({from : 3979020});
[L306]               havoc __exception;
[L307]               revert := false;
[L308]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]              __ret_0_ := _totalSupply_ERC20[this];
[L335]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L336]               assume !revert && gas >= 0;
[L9781]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
