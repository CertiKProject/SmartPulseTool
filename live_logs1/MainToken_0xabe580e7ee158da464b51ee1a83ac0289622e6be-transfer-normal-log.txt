This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:45:29,270 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:45:29,271 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:45:29,282 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:45:29,283 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:45:29,284 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:45:29,285 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:45:29,287 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:45:29,288 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:45:29,289 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:45:29,290 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:45:29,290 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:45:29,291 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:45:29,292 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:45:29,293 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:45:29,293 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:45:29,294 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:45:29,295 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:45:29,296 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:45:29,298 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:45:29,298 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:45:29,299 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:45:29,301 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:45:29,301 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:45:29,301 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:45:29,301 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:45:29,302 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:45:29,302 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:45:29,303 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:45:29,303 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:45:29,303 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:45:29,304 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:45:29,304 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:45:29,305 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:45:29,305 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:45:29,305 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:45:29,306 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:45:29,306 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:45:29,306 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:45:29,307 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:45:29,307 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:45:29,308 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:45:29,316 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:45:29,316 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:45:29,317 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:45:29,317 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:45:29,317 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:45:29,317 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:45:29,317 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:45:29,317 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:45:29,318 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:45:29,318 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:45:29,318 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:45:29,319 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:45:29,319 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:45:29,344 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:45:29,358 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:45:29,361 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:45:29,362 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:45:29,363 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:45:29,363 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl
[2020-11-24 21:45:29,363 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl'
[2020-11-24 21:45:29,541 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:45:29,542 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:45:29,542 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:45:29,542 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:45:29,543 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:45:29,559 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,561 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,617 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,618 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,666 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,692 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,712 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,738 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:45:29,738 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:45:29,738 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:45:29,741 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:45:29,745 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/1) ...
[2020-11-24 21:45:29,781 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_BasicToken[this][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && balances_BasicToken[this][msg.sender] == old(balances_BasicToken[this][msg.sender]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:29,787 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_BasicToken[this][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && balances_BasicToken[this][msg.sender] == old(balances_BasicToken[this][msg.sender]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:29,795 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_BasicToken[this][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && balances_BasicToken[this][msg.sender] == old(balances_BasicToken[this][msg.sender]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:29,808 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=_to_s1572 ) && msg.sender!=_to_s1572 ) && _value_s1572<=balances_BasicToken[this][msg.sender] ) && ( balances_BasicToken[this][_to_s1572] + _value_s1572 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s1572>=0 ) && _value_s1572<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1572]>=0 ) && balances_BasicToken[this][_to_s1572]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:45:29,811 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( _success_s1572==true && balances_BasicToken[this][msg.sender]==( ( old(balances_BasicToken[this][msg.sender]) ) - _value_s1572 ) ) && balances_BasicToken[this][_to_s1572]==( ( old(balances_BasicToken[this][_to_s1572]) ) + _value_s1572 ) ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && balances_BasicToken[this][p1]==( old(balances_BasicToken[this][p1]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1572,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]]
[2020-11-24 21:45:29,819 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_BasicToken[this][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && balances_BasicToken[this][msg.sender] == old(balances_BasicToken[this][msg.sender]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:29,819 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MainToken0) ==> ( <>AP(success_transfer_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:45:29,843 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:29 PropertyContainer
[2020-11-24 21:45:29,844 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:45:29,844 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:45:29,844 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:45:29,844 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:45:29,845 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/2) ...
[2020-11-24 21:45:29,845 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:45:29,846 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:45:29,879 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:29" (2/2) ...
[2020-11-24 21:45:29,879 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:45:29,880 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:45:29,880 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:45:29,880 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:45:29,881 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/2) ...
[2020-11-24 21:45:29,940 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:45:29,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:45:29,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:45:29,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:45:29,941 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:45:29,941 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:45:29,941 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:45:29,941 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:45:29,941 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:45:29,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:45:29,941 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,942 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,942 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,942 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,942 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:45:29,942 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:45:29,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:45:29,943 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:45:29,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:45:29,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:45:29,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:45:29,943 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:45:29,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:45:29,943 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:45:29,943 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:45:29,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:45:29,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:45:29,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:45:29,944 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:45:29,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:45:29,945 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:45:29,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:45:29,945 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:29,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:29,945 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:29,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:29,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:45:29,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:45:29,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:45:29,945 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:45:29,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:45:29,946 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:45:29,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:45:29,946 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:45:29,946 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:45:29,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:45:29,946 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:45:29,946 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:45:29,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:45:29,946 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:45:29,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:45:29,947 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:45:29,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:45:29,947 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:45:29,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:45:29,947 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:45:29,947 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:45:29,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:45:29,947 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:45:29,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:45:29,947 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:45:29,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:45:29,948 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:45:29,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:45:29,948 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:45:29,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:45:29,948 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:45:29,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:45:29,948 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:45:29,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:45:29,948 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:45:29,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:45:29,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:45:29,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:45:29,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:45:29,949 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:45:29,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:45:29,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:45:29,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:45:29,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:45:29,950 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:45:29,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:45:29,951 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:45:29,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:45:29,951 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:45:29,951 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:45:29,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:45:29,951 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:45:29,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:45:29,951 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:45:29,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:45:29,952 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:45:29,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:45:29,952 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:45:29,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:45:29,952 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:45:29,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:45:29,952 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:45:29,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:45:29,952 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:45:29,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:45:29,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:45:29,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:45:29,953 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:45:29,953 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:45:29,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:45:29,953 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:45:29,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:45:29,953 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:45:29,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:45:29,954 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:45:29,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:45:29,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:45:29,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:45:29,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:45:29,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:45:29,954 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:45:29,954 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:45:29,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:45:29,954 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:45:29,955 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:45:29,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:45:29,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:45:29,958 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:45:29,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:45:29,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:45:29,961 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:45:29,962 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:29,963 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:45:29,964 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:45:29,965 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:45:29,966 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:45:29,967 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:45:29,968 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:45:29,969 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:45:29,970 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:45:29,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:45:29,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:45:29,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:45:29,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:45:29,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:45:29,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:45:29,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:45:29,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:45:29,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:45:29,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:45:29,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:45:29,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:45:29,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:45:29,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:45:29,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:45:29,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:45:29,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:45:29,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:45:29,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:45:29,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:45:31,217 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:31,315 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:31,315 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:31,315 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:31,610 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:45:31,610 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:45:31,613 INFO  L202        PluginConnector]: Adding new model MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:31 BoogieIcfgContainer
[2020-11-24 21:45:31,613 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:29" (2/2) ...
[2020-11-24 21:45:31,613 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:45:31,614 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@fbfa4e0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:31, skipping insertion in model container
[2020-11-24 21:45:31,614 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:45:31,614 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:45:31,614 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:45:31,615 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:45:31,616 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/3) ...
[2020-11-24 21:45:31,616 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1fce4dba and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:31, skipping insertion in model container
[2020-11-24 21:45:31,616 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:29" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:45:31,651 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:31 NWAContainer
[2020-11-24 21:45:31,652 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:45:31,652 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:45:31,652 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:45:31,652 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:45:31,653 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:31" (3/4) ...
[2020-11-24 21:45:31,654 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1fe4808a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:31, skipping insertion in model container
[2020-11-24 21:45:31,654 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:31" (4/4) ...
[2020-11-24 21:45:31,657 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:45:31,666 INFO  L110   BuchiProductObserver]: Initial RCFG 5385 locations, 7561 edges
[2020-11-24 21:45:31,666 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:45:31,681 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:45:35,933 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:45:35,949 INFO  L110   BuchiProductObserver]: BuchiProgram size 13450 locations, 24720 edges
[2020-11-24 21:45:35,949 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:35 BoogieIcfgContainer
[2020-11-24 21:45:35,949 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:45:35,949 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:45:35,949 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:45:35,951 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:45:35,951 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:35" (1/1) ...
[2020-11-24 21:45:36,172 INFO  L313           BlockEncoder]: Initial Icfg 13450 locations, 24720 edges
[2020-11-24 21:45:36,172 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:45:36,172 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:45:36,172 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:45:36,173 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:45:36,197 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:45:36,218 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:45:36,241 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:45:36,248 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:45:36,256 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:45:36,256 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:45:36,261 INFO  L313           BlockEncoder]: Encoded RCFG 13240 locations, 24134 edges
[2020-11-24 21:45:36,262 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:45:36 BasicIcfg
[2020-11-24 21:45:36,262 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:45:36,262 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:45:36,262 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:45:36,264 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:45:36,264 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:36,264 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:29" (1/6) ...
[2020-11-24 21:45:36,265 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@58d5b7b1 and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:45:36, skipping insertion in model container
[2020-11-24 21:45:36,265 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:36,265 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:29" (2/6) ...
[2020-11-24 21:45:36,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@58d5b7b1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:45:36, skipping insertion in model container
[2020-11-24 21:45:36,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:36,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:31" (3/6) ...
[2020-11-24 21:45:36,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@58d5b7b1 and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:45:36, skipping insertion in model container
[2020-11-24 21:45:36,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:36,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:31" (4/6) ...
[2020-11-24 21:45:36,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@58d5b7b1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:45:36, skipping insertion in model container
[2020-11-24 21:45:36,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:36,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:35" (5/6) ...
[2020-11-24 21:45:36,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@58d5b7b1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:45:36, skipping insertion in model container
[2020-11-24 21:45:36,267 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:36,267 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:45:36" (6/6) ...
[2020-11-24 21:45:36,268 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-normal.bpl_BEv2
[2020-11-24 21:45:36,298 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:45:36,299 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:45:36,299 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:45:36,299 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:45:36,299 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:45:36,299 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:45:36,299 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:45:36,299 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:45:36,299 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:45:36,380 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13240 states.
[2020-11-24 21:45:36,475 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:36,475 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:36,476 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:36,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:36,493 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:36,493 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:45:36,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13240 states.
[2020-11-24 21:45:36,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:36,538 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:36,538 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:36,540 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:36,540 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND TRUE   choice == 38
[L14521]              gas := gas - 21000;
[L14522]  COND FALSE  !(gas >= 0)
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:36,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:36,556 INFO  L82        PathProgramCache]: Analyzing trace with hash 824094537, now seen corresponding path program 1 times
[2020-11-24 21:45:36,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:36,581 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:36,624 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:45:37,081 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:37,081 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:45:37,084 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:37,094 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:45:37,094 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:45:37,096 INFO  L87              Difference]: Start difference. First operand 13240 states. Second operand 4 states.
[2020-11-24 21:45:38,364 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:38,364 INFO  L93              Difference]: Finished difference Result 8277 states and 9692 transitions.
[2020-11-24 21:45:38,364 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:45:38,366 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8277 states and 9692 transitions.
[2020-11-24 21:45:38,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:38,441 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8277 states to 8273 states and 9684 transitions.
[2020-11-24 21:45:38,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:45:38,445 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-24 21:45:38,446 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8273 states and 9684 transitions.
[2020-11-24 21:45:38,464 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:38,464 INFO  L728         BuchiCegarLoop]: Abstraction has 8273 states and 9684 transitions.
[2020-11-24 21:45:38,486 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8273 states and 9684 transitions.
[2020-11-24 21:45:38,590 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8273 to 8273.
[2020-11-24 21:45:38,590 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8273 states.
[2020-11-24 21:45:38,604 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8273 states to 8273 states and 9684 transitions.
[2020-11-24 21:45:38,605 INFO  L751         BuchiCegarLoop]: Abstraction has 8273 states and 9684 transitions.
[2020-11-24 21:45:38,605 INFO  L631         BuchiCegarLoop]: Abstraction has 8273 states and 9684 transitions.
[2020-11-24 21:45:38,605 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:45:38,605 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8273 states and 9684 transitions.
[2020-11-24 21:45:38,618 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:38,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:38,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:38,620 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:38,620 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND FALSE  !(__exception)
[L4863]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9657]   COND TRUE   !!paused_Pausable[this]
[L9658]               revert := true;
[L4863]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4864]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((_success_s1572 == true && balances_BasicToken[this][msgsender_MSG] == old(balances_BasicToken[this][msgsender_MSG]) - _value_s1572) && balances_BasicToken[this][_to_s1572] == old(balances_BasicToken[this][_to_s1572]) + _value_s1572) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND FALSE  !(__exception)
[L4863]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9657]   COND TRUE   !!paused_Pausable[this]
[L9658]               revert := true;
[L4863]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4864]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((_success_s1572 == true && balances_BasicToken[this][msgsender_MSG] == old(balances_BasicToken[this][msgsender_MSG]) - _value_s1572) && balances_BasicToken[this][_to_s1572] == old(balances_BasicToken[this][_to_s1572]) + _value_s1572) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:38,625 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:38,625 INFO  L82        PathProgramCache]: Analyzing trace with hash 1366948440, now seen corresponding path program 1 times
[2020-11-24 21:45:38,626 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:38,637 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:38,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:45:38,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:38,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:45:38,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:38,665 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:45:38,665 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:45:38,665 INFO  L87              Difference]: Start difference. First operand 8273 states and 9684 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:45:38,910 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:38,911 INFO  L93              Difference]: Finished difference Result 9731 states and 11136 transitions.
[2020-11-24 21:45:38,911 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:45:38,911 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9731 states and 11136 transitions.
[2020-11-24 21:45:38,940 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:38,983 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9731 states to 9731 states and 11136 transitions.
[2020-11-24 21:45:38,983 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2286
[2020-11-24 21:45:38,985 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-24 21:45:38,985 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9731 states and 11136 transitions.
[2020-11-24 21:45:38,995 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:38,995 INFO  L728         BuchiCegarLoop]: Abstraction has 9731 states and 11136 transitions.
[2020-11-24 21:45:39,004 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9731 states and 11136 transitions.
[2020-11-24 21:45:39,085 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9731 to 8649.
[2020-11-24 21:45:39,085 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8649 states.
[2020-11-24 21:45:39,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8649 states to 8649 states and 9790 transitions.
[2020-11-24 21:45:39,096 INFO  L751         BuchiCegarLoop]: Abstraction has 8649 states and 9790 transitions.
[2020-11-24 21:45:39,097 INFO  L631         BuchiCegarLoop]: Abstraction has 8649 states and 9790 transitions.
[2020-11-24 21:45:39,097 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:45:39,097 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8649 states and 9790 transitions.
[2020-11-24 21:45:39,107 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:39,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:39,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:39,114 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:39,114 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND TRUE   !!initialized_MainToken[this]
[L9756]               revert := true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND TRUE   revert
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND FALSE  !(__exception)
[L4863]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9657]   COND TRUE   !!paused_Pausable[this]
[L9658]               revert := true;
[L4863]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4864]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((_success_s1572 == true && balances_BasicToken[this][msgsender_MSG] == old(balances_BasicToken[this][msgsender_MSG]) - _value_s1572) && balances_BasicToken[this][_to_s1572] == old(balances_BasicToken[this][_to_s1572]) + _value_s1572) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND FALSE  !(__exception)
[L4863]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9657]   COND TRUE   !!paused_Pausable[this]
[L9658]               revert := true;
[L4863]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4864]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((_success_s1572 == true && balances_BasicToken[this][msgsender_MSG] == old(balances_BasicToken[this][msgsender_MSG]) - _value_s1572) && balances_BasicToken[this][_to_s1572] == old(balances_BasicToken[this][_to_s1572]) + _value_s1572) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:39,124 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:39,125 INFO  L82        PathProgramCache]: Analyzing trace with hash 1801106253, now seen corresponding path program 1 times
[2020-11-24 21:45:39,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:39,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:39,712 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:45:39,713 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:39,713 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:45:39,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:39,714 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:45:39,714 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:45:39,714 INFO  L87              Difference]: Start difference. First operand 8649 states and 9790 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:45:39,837 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:39,837 INFO  L93              Difference]: Finished difference Result 9731 states and 10978 transitions.
[2020-11-24 21:45:39,837 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:45:39,838 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9731 states and 10978 transitions.
[2020-11-24 21:45:39,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:39,885 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9731 states to 9383 states and 10570 transitions.
[2020-11-24 21:45:39,885 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2166
[2020-11-24 21:45:39,887 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2195
[2020-11-24 21:45:39,887 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9383 states and 10570 transitions.
[2020-11-24 21:45:39,895 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:39,895 INFO  L728         BuchiCegarLoop]: Abstraction has 9383 states and 10570 transitions.
[2020-11-24 21:45:39,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9383 states and 10570 transitions.
[2020-11-24 21:45:39,963 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9383 to 8403.
[2020-11-24 21:45:39,963 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8403 states.
[2020-11-24 21:45:39,972 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8403 states to 8403 states and 9326 transitions.
[2020-11-24 21:45:39,972 INFO  L751         BuchiCegarLoop]: Abstraction has 8403 states and 9326 transitions.
[2020-11-24 21:45:39,972 INFO  L631         BuchiCegarLoop]: Abstraction has 8403 states and 9326 transitions.
[2020-11-24 21:45:39,972 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:45:39,972 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8403 states and 9326 transitions.
[2020-11-24 21:45:39,981 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:39,981 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:39,981 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:39,986 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:39,986 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:39,996 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:39,996 INFO  L82        PathProgramCache]: Analyzing trace with hash 710330292, now seen corresponding path program 1 times
[2020-11-24 21:45:39,997 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:40,029 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:40,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:45:40,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:40,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:45:40,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:40,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:45:40,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:45:40,605 INFO  L87              Difference]: Start difference. First operand 8403 states and 9326 transitions. cyclomatic complexity: 943 Second operand 7 states.
[2020-11-24 21:45:40,759 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:40,759 INFO  L93              Difference]: Finished difference Result 8414 states and 9337 transitions.
[2020-11-24 21:45:40,759 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:45:40,759 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8414 states and 9337 transitions.
[2020-11-24 21:45:40,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:40,799 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8414 states to 8403 states and 9325 transitions.
[2020-11-24 21:45:40,799 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1934
[2020-11-24 21:45:40,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1934
[2020-11-24 21:45:40,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8403 states and 9325 transitions.
[2020-11-24 21:45:40,805 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:40,805 INFO  L728         BuchiCegarLoop]: Abstraction has 8403 states and 9325 transitions.
[2020-11-24 21:45:40,813 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8403 states and 9325 transitions.
[2020-11-24 21:45:40,859 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8403 to 8403.
[2020-11-24 21:45:40,859 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8403 states.
[2020-11-24 21:45:40,867 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8403 states to 8403 states and 9325 transitions.
[2020-11-24 21:45:40,867 INFO  L751         BuchiCegarLoop]: Abstraction has 8403 states and 9325 transitions.
[2020-11-24 21:45:40,867 INFO  L631         BuchiCegarLoop]: Abstraction has 8403 states and 9325 transitions.
[2020-11-24 21:45:40,867 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:45:40,868 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8403 states and 9325 transitions.
[2020-11-24 21:45:40,875 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:40,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:40,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:40,879 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:40,879 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND TRUE   __exception
[L4389]               __tmp__Balance := Balance;
[L4390]               __tmp__DType := DType;
[L4391]               __tmp__Alloc := Alloc;
[L4392]               __tmp__balance_ADDR := balance_ADDR;
[L4393]               __tmp__M_Ref_int := M_Ref_int;
[L4394]               __tmp__sum_balances0 := sum_balances0;
[L4395]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4396]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4397]               __tmp__sum_allowed1 := sum_allowed1;
[L4398]               __tmp__M_int_int := M_int_int;
[L4399]               __tmp__sum_chains2 := sum_chains2;
[L4400]               __tmp__sum_freezings3 := sum_freezings3;
[L4401]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4402]               __tmp__M_int_Ref := M_int_Ref;
[L4403]               __tmp__sum := sum;
[L4404]               __tmp__Length := Length;
[L4405]               __tmp__now := now;
[L4406]               __tmp__balances_BasicToken := balances_BasicToken;
[L4407]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4408]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4409]               __tmp__owner_Ownable := owner_Ownable;
[L4410]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4411]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4412]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4413]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4414]               __tmp__paused_Pausable := paused_Pausable;
[L4415]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4416]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4417]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4418]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4419]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4420]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4421]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4422]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4423]               __tmp__initialized_MainToken := initialized_MainToken;
[L4424]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9455]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9301]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9267]               assume msgsender_MSG != null;
[L9268]               __tmp__Balance[this] := 0;
[L9269]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9270]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9271]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9272]               __tmp__TOKEN_NAME_Consts[this] := -1298559559;
[L9273]               __tmp__TOKEN_SYMBOL_Consts[this] := 120673937;
[L9274]               __tmp__PAUSED_Consts[this] := false;
[L9275]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9276]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9277]               __tmp__CONTINUE_MINTING_Consts[this] := false;
[L9301]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9302]   COND FALSE  !(revert)
[L9455]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9456]   COND FALSE  !(revert)
[L9459]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L9459]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9460]   COND FALSE  !(revert)
[L9463]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9463]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L9467]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9468]   COND FALSE  !(revert)
[L9471]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L9471]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9472]   COND FALSE  !(revert)
[L9475]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7631]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7639]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7643]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]               assume msgsender_MSG != null;
[L7605]               __tmp__Balance[this] := 0;
[L7606]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7607]               __tmp__sum_chains2[this] := 0;
[L7608]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7609]               __tmp__sum_freezings3[this] := 0;
[L7610]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7611]               __tmp__sum_freezingBalance4[this] := 0;
[L7647]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L9475]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9476]   COND FALSE  !(revert)
[L9479]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L9479]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9480]   COND FALSE  !(revert)
[L9483]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7446]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7450]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7454]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7458]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L7462]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L7466]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7429]               assume msgsender_MSG != null;
[L7430]               __tmp__Balance[this] := 0;
[L7431]               __tmp__mintingFinished_MintableToken[this] := false;
[L7466]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7467]   COND FALSE  !(revert)
[L9483]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9484]   COND FALSE  !(revert)
[L9487]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9058]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L9058]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9059]   COND FALSE  !(revert)
[L9062]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9062]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9063]   COND FALSE  !(revert)
[L9066]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L9066]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9067]   COND FALSE  !(revert)
[L9070]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L9070]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9071]   COND FALSE  !(revert)
[L9074]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7631]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7639]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7643]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]               assume msgsender_MSG != null;
[L7605]               __tmp__Balance[this] := 0;
[L7606]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7607]               __tmp__sum_chains2[this] := 0;
[L7608]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7609]               __tmp__sum_freezings3[this] := 0;
[L7610]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7611]               __tmp__sum_freezingBalance4[this] := 0;
[L7647]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L9074]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9075]   COND FALSE  !(revert)
[L9078]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L9078]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9079]   COND FALSE  !(revert)
[L9082]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7446]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7450]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7454]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7458]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L7462]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L7466]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7429]               assume msgsender_MSG != null;
[L7430]               __tmp__Balance[this] := 0;
[L7431]               __tmp__mintingFinished_MintableToken[this] := false;
[L7466]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7467]   COND FALSE  !(revert)
[L9082]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9083]   COND FALSE  !(revert)
[L9086]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9043]               assume msgsender_MSG != null;
[L9044]               __tmp__Balance[this] := 0;
[L9086]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9087]   COND FALSE  !(revert)
[L9487]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9488]   COND FALSE  !(revert)
[L9491]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8822]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L8822]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8823]   COND FALSE  !(revert)
[L8826]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L8826]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8827]   COND FALSE  !(revert)
[L8830]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8807]               assume msgsender_MSG != null;
[L8808]               __tmp__Balance[this] := 0;
[L8830]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8831]   COND FALSE  !(revert)
[L9491]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9492]   COND FALSE  !(revert)
[L9495]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8952]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L8952]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8953]   COND FALSE  !(revert)
[L8956]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8935]               assume msgsender_MSG != null;
[L8936]               __tmp__Balance[this] := 0;
[L8937]               __tmp__paused_Pausable[this] := false;
[L8956]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8957]   COND FALSE  !(revert)
[L9495]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(revert)
[L9499]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9414]               assume msgsender_MSG != null;
[L9415]               __tmp__Balance[this] := 0;
[L9416]               __tmp__initialized_MainToken[this] := false;
[L9418]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9685]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9689]               __tmp__initialized_MainToken[this] := true;
[L9690]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9700]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9701]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9702]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9703]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9704]               __var_59 := 0 % 18446744073709551616;
[L9705]               freezes_s1673 := 0 % 18446744073709551616;
[L9706]               i_s1673 := 0;
[L9707]   COND FALSE  !(i_s1673 < __tmp__Length[addresses_s1673])
[L9731]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9418]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9419]   COND FALSE  !(revert)
[L9422]   COND TRUE   __tmp__DType[this] == MainToken
[L9423]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7321]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12714]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7321]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7322]   COND FALSE  !(revert)
[L7325]   COND TRUE   __tmp__DType[this] == MainToken
[L7326]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7394]               __var_11 := null;
[L7395]   COND FALSE  !(!(_newOwner_s581 != null))
[L7399]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7326]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7327]   COND FALSE  !(revert)
[L9423]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9424]   COND FALSE  !(revert)
[L9499]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9500]   COND FALSE  !(revert)
[L4424]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4425]               assume revert || gas < 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:40,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:40,888 INFO  L82        PathProgramCache]: Analyzing trace with hash -2055659822, now seen corresponding path program 1 times
[2020-11-24 21:45:40,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:40,922 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:41,469 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:45:41,469 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:41,470 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:45:41,470 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:41,470 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:45:41,470 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:45:41,470 INFO  L87              Difference]: Start difference. First operand 8403 states and 9325 transitions. cyclomatic complexity: 942 Second operand 4 states.
[2020-11-24 21:45:42,257 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:42,258 INFO  L93              Difference]: Finished difference Result 10686 states and 12148 transitions.
[2020-11-24 21:45:42,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:45:42,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10686 states and 12148 transitions.
[2020-11-24 21:45:42,277 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:45:42,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10686 states to 9777 states and 11097 transitions.
[2020-11-24 21:45:42,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2343
[2020-11-24 21:45:42,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2352
[2020-11-24 21:45:42,300 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9777 states and 11097 transitions.
[2020-11-24 21:45:42,306 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:42,306 INFO  L728         BuchiCegarLoop]: Abstraction has 9777 states and 11097 transitions.
[2020-11-24 21:45:42,312 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9777 states and 11097 transitions.
[2020-11-24 21:45:42,357 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9777 to 8763.
[2020-11-24 21:45:42,357 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8763 states.
[2020-11-24 21:45:42,366 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8763 states to 8763 states and 9808 transitions.
[2020-11-24 21:45:42,366 INFO  L751         BuchiCegarLoop]: Abstraction has 8763 states and 9808 transitions.
[2020-11-24 21:45:42,366 INFO  L631         BuchiCegarLoop]: Abstraction has 8763 states and 9808 transitions.
[2020-11-24 21:45:42,366 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:45:42,366 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8763 states and 9808 transitions.
[2020-11-24 21:45:42,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:42,374 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:42,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:42,377 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:42,378 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:42,386 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:42,386 INFO  L82        PathProgramCache]: Analyzing trace with hash -1698455353, now seen corresponding path program 1 times
[2020-11-24 21:45:42,387 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:42,416 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:43,054 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:45:43,054 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:43,055 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 21:45:43,055 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:43,055 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 21:45:43,055 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 21:45:43,056 INFO  L87              Difference]: Start difference. First operand 8763 states and 9808 transitions. cyclomatic complexity: 1064 Second operand 12 states.
[2020-11-24 21:45:51,090 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:51,090 INFO  L93              Difference]: Finished difference Result 14004 states and 15790 transitions.
[2020-11-24 21:45:51,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 21:45:51,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14004 states and 15790 transitions.
[2020-11-24 21:45:51,157 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 21:45:51,187 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14004 states to 14004 states and 15790 transitions.
[2020-11-24 21:45:51,188 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3533
[2020-11-24 21:45:51,189 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3533
[2020-11-24 21:45:51,189 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14004 states and 15790 transitions.
[2020-11-24 21:45:51,198 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:51,198 INFO  L728         BuchiCegarLoop]: Abstraction has 14004 states and 15790 transitions.
[2020-11-24 21:45:51,205 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14004 states and 15790 transitions.
[2020-11-24 21:45:51,303 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14004 to 11988.
[2020-11-24 21:45:51,304 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11988 states.
[2020-11-24 21:45:51,319 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11988 states to 11988 states and 13774 transitions.
[2020-11-24 21:45:51,319 INFO  L751         BuchiCegarLoop]: Abstraction has 11988 states and 13774 transitions.
[2020-11-24 21:45:51,319 INFO  L631         BuchiCegarLoop]: Abstraction has 11988 states and 13774 transitions.
[2020-11-24 21:45:51,319 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:45:51,319 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11988 states and 13774 transitions.
[2020-11-24 21:45:51,334 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 21:45:51,334 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:51,334 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:51,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:51,339 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND TRUE   PAUSED_Consts[this]
[L9761]   COND TRUE   DType[this] == MainToken
[L9762]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8989]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8990]   COND FALSE  !(revert)
[L8993]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12770]  COND FALSE  !(!!paused_Pausable[this])
[L8993]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8994]   COND FALSE  !(revert)
[L8997]               paused_Pausable[this] := true;
[L8998]               assert { :EventEmitted "Pause_Pausable" } true;
[L9762]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9763]   COND FALSE  !(revert)
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9638]               revert := true;
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:51,383 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:51,383 INFO  L82        PathProgramCache]: Analyzing trace with hash -1890697030, now seen corresponding path program 1 times
[2020-11-24 21:45:51,384 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:51,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:51,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 9832 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9832 trivial. 0 not checked.
[2020-11-24 21:45:51,927 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:51,927 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:45:51,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:51,928 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:45:51,928 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:45:51,928 INFO  L87              Difference]: Start difference. First operand 11988 states and 13774 transitions. cyclomatic complexity: 1816 Second operand 7 states.
[2020-11-24 21:45:52,039 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:52,039 INFO  L93              Difference]: Finished difference Result 11978 states and 13763 transitions.
[2020-11-24 21:45:52,040 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:45:52,040 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11978 states and 13763 transitions.
[2020-11-24 21:45:52,062 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 21:45:52,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11978 states to 11938 states and 13716 transitions.
[2020-11-24 21:45:52,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2967
[2020-11-24 21:45:52,090 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2967
[2020-11-24 21:45:52,090 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11938 states and 13716 transitions.
[2020-11-24 21:45:52,097 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:52,097 INFO  L728         BuchiCegarLoop]: Abstraction has 11938 states and 13716 transitions.
[2020-11-24 21:45:52,104 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11938 states and 13716 transitions.
[2020-11-24 21:45:52,172 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11938 to 11938.
[2020-11-24 21:45:52,172 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11938 states.
[2020-11-24 21:45:52,187 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11938 states to 11938 states and 13716 transitions.
[2020-11-24 21:45:52,187 INFO  L751         BuchiCegarLoop]: Abstraction has 11938 states and 13716 transitions.
[2020-11-24 21:45:52,187 INFO  L631         BuchiCegarLoop]: Abstraction has 11938 states and 13716 transitions.
[2020-11-24 21:45:52,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:45:52,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11938 states and 13716 transitions.
[2020-11-24 21:45:52,200 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 21:45:52,200 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:52,200 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:52,203 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:52,203 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND FALSE  !(__exception)
[L4863]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9657]   COND FALSE  !(!!paused_Pausable[this])
[L9661]   COND TRUE   DType[this] == MainToken
[L9662]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6926]               __var_1 := null;
[L6927]   COND FALSE  !(!(_to_s202 != null))
[L6931]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6935]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6811]               assert b_s98 <= a_s98;
[L6812]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6935]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6936]   COND FALSE  !(revert)
[L6939]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6940]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6941]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6942]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6825]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6826]               assert c_s122 >= a_s122;
[L6827]               c_s122 := c_s122;
[L6942]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6943]   COND FALSE  !(revert)
[L6946]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6947]               balances_BasicToken[this][_to_s202] := __var_3;
[L6948]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6949]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6950]               __ret_0_ := true;
[L9662]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9663]   COND FALSE  !(revert)
[L9669]               _success_s1572 := __var_55;
[L4863]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4864]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((_success_s1572 == true && balances_BasicToken[this][msgsender_MSG] == old(balances_BasicToken[this][msgsender_MSG]) - _value_s1572) && balances_BasicToken[this][_to_s1572] == old(balances_BasicToken[this][_to_s1572]) + _value_s1572) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND FALSE  !(__exception)
[L4863]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9657]   COND FALSE  !(!!paused_Pausable[this])
[L9661]   COND TRUE   DType[this] == MainToken
[L9662]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6926]               __var_1 := null;
[L6927]   COND FALSE  !(!(_to_s202 != null))
[L6931]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6935]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6811]               assert b_s98 <= a_s98;
[L6812]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6935]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6936]   COND FALSE  !(revert)
[L6939]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6940]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6941]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6942]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6825]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6826]               assert c_s122 >= a_s122;
[L6827]               c_s122 := c_s122;
[L6942]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6943]   COND FALSE  !(revert)
[L6946]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6947]               balances_BasicToken[this][_to_s202] := __var_3;
[L6948]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6949]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6950]               __ret_0_ := true;
[L9662]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9663]   COND FALSE  !(revert)
[L9669]               _success_s1572 := __var_55;
[L4863]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4864]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((_success_s1572 == true && balances_BasicToken[this][msgsender_MSG] == old(balances_BasicToken[this][msgsender_MSG]) - _value_s1572) && balances_BasicToken[this][_to_s1572] == old(balances_BasicToken[this][_to_s1572]) + _value_s1572) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:52,209 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:52,210 INFO  L82        PathProgramCache]: Analyzing trace with hash 150518345, now seen corresponding path program 1 times
[2020-11-24 21:45:52,211 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:52,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:53,749 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 96 proven. 0 refuted. 0 times theorem prover too weak. 9730 trivial. 0 not checked.
[2020-11-24 21:45:53,749 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:53,750 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-24 21:45:53,750 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:53,750 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-24 21:45:53,751 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=493, Unknown=0, NotChecked=0, Total=552
[2020-11-24 21:45:53,751 INFO  L87              Difference]: Start difference. First operand 11938 states and 13716 transitions. cyclomatic complexity: 1807 Second operand 24 states.
[2020-11-24 21:46:11,236 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:46:11,236 INFO  L93              Difference]: Finished difference Result 12249 states and 14173 transitions.
[2020-11-24 21:46:11,236 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-24 21:46:11,236 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12249 states and 14173 transitions.
[2020-11-24 21:46:11,264 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 21:46:11,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12249 states to 12249 states and 14173 transitions.
[2020-11-24 21:46:11,293 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3040
[2020-11-24 21:46:11,294 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3040
[2020-11-24 21:46:11,294 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12249 states and 14173 transitions.
[2020-11-24 21:46:11,301 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:46:11,301 INFO  L728         BuchiCegarLoop]: Abstraction has 12249 states and 14173 transitions.
[2020-11-24 21:46:11,308 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12249 states and 14173 transitions.
[2020-11-24 21:46:11,379 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12249 to 12169.
[2020-11-24 21:46:11,379 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12169 states.
[2020-11-24 21:46:11,396 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12169 states to 12169 states and 14068 transitions.
[2020-11-24 21:46:11,396 INFO  L751         BuchiCegarLoop]: Abstraction has 12169 states and 14068 transitions.
[2020-11-24 21:46:11,396 INFO  L631         BuchiCegarLoop]: Abstraction has 12169 states and 14068 transitions.
[2020-11-24 21:46:11,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 21:46:11,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12169 states and 14068 transitions.
[2020-11-24 21:46:11,410 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 21:46:11,410 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:46:11,410 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:46:11,412 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:46:11,413 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_MainToken0 := false;
[L3]                  call_transfer_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9641]   COND TRUE   __tmp__DType[this] == MainToken
[L9642]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6894]               __var_1 := null;
[L6895]   COND TRUE   !(_to_s202 != null)
[L6896]               revert := true;
[L9642]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9643]   COND TRUE   revert
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND TRUE   choice == 36
[L14533]              gas := gas - 21000;
[L14534]  COND TRUE   gas >= 0
[L14535]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14536]              assume msgvalue_MSG == 0;
[L14537]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9641]   COND TRUE   __tmp__DType[this] == MainToken
[L9642]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6894]               __var_1 := null;
[L6895]   COND TRUE   !(_to_s202 != null)
[L6896]               revert := true;
[L9642]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9643]   COND TRUE   revert
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:46:11,419 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:46:11,420 INFO  L82        PathProgramCache]: Analyzing trace with hash 1198943891, now seen corresponding path program 1 times
[2020-11-24 21:46:11,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:46:11,453 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:11,489 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:11,945 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:46:11,945 INFO  L82        PathProgramCache]: Analyzing trace with hash 1196517105, now seen corresponding path program 1 times
[2020-11-24 21:46:11,946 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:46:11,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:11,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:11,968 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:46:11,969 INFO  L82        PathProgramCache]: Analyzing trace with hash -147751137, now seen corresponding path program 1 times
[2020-11-24 21:46:11,969 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:46:12,005 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:12,048 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #4: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
[2020-11-24 21:46:12,484 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 186
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3517 to 7027
[2020-11-24 21:46:12,767 WARN  L188               SmtUtils]: Spent 174.00 ms on a formula simplification that was a NOOP. DAG size: 367
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
[2020-11-24 21:46:12,999 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 289
[2020-11-24 21:46:13,600 WARN  L188               SmtUtils]: Spent 597.00 ms on a formula simplification. DAG size of input: 362 DAG size of output: 350
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.004s / 0.007s total
Resizing node table from 15859 to 31699
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
[2020-11-24 21:46:14,022 WARN  L188               SmtUtils]: Spent 392.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 209
[2020-11-24 21:46:14,414 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification that was a NOOP. DAG size: 474
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-24 21:46:14,676 WARN  L188               SmtUtils]: Spent 252.00 ms on a formula simplification that was a NOOP. DAG size: 385
[2020-11-24 21:46:14,936 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification that was a NOOP. DAG size: 385
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5003 to 9973
[2020-11-24 21:46:15,052 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:46:16,571 WARN  L188               SmtUtils]: Spent 209.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-24 21:46:23,351 WARN  L188               SmtUtils]: Spent 6.51 s on a formula simplification. DAG size of input: 544 DAG size of output: 513
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:46:23,812 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-24 21:46:23,961 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification that was a NOOP. DAG size: 365
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #4: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-24 21:46:24,249 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification that was a NOOP. DAG size: 367
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:46:24,461 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 289
[2020-11-24 21:46:25,105 WARN  L188               SmtUtils]: Spent 642.00 ms on a formula simplification. DAG size of input: 361 DAG size of output: 350
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-24 21:46:25,274 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 209
[2020-11-24 21:46:25,559 WARN  L188               SmtUtils]: Spent 283.00 ms on a formula simplification that was a NOOP. DAG size: 474
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-24 21:46:25,809 WARN  L188               SmtUtils]: Spent 243.00 ms on a formula simplification that was a NOOP. DAG size: 385
[2020-11-24 21:46:27,196 WARN  L188               SmtUtils]: Spent 1.38 s on a formula simplification. DAG size of input: 701 DAG size of output: 685
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 21:46:27,417 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification. DAG size of input: 284 DAG size of output: 281
[2020-11-24 21:46:27,680 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification that was a NOOP. DAG size: 454
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 21:46:27,790 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 281
[2020-11-24 21:46:28,242 WARN  L188               SmtUtils]: Spent 451.00 ms on a formula simplification. DAG size of input: 456 DAG size of output: 455
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9973 to 19937
[2020-11-24 21:46:28,469 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification that was a NOOP. DAG size: 451
[2020-11-24 21:46:28,508 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:28,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:46:28,573 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:46:28 BasicIcfg
[2020-11-24 21:46:28,573 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:46:28,574 INFO  L168              Benchmark]: Toolchain (without parser) took 59032.47 ms. Allocated memory was 1.0 GB in the beginning and 4.9 GB in the end (delta: 3.8 GB). Free memory was 913.7 MB in the beginning and 2.6 GB in the end (delta: -1.7 GB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,574 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,574 INFO  L168              Benchmark]: Boogie Preprocessor took 195.67 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,574 INFO  L168              Benchmark]: UtopiaSpecLang took 105.41 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,575 INFO  L168              Benchmark]: Boogie Printer took 35.52 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.8 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,576 INFO  L168              Benchmark]: RCFGBuilder took 1734.08 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.4 MB). Free memory was 859.8 MB in the beginning and 1.1 GB in the end (delta: -273.4 MB). Peak memory consumption was 264.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,576 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.47 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.0 MB). Peak memory consumption was 8.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,576 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4297.49 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 331.9 MB). Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 104.8 MB). Peak memory consumption was 840.6 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,576 INFO  L168              Benchmark]: BlockEncodingV2 took 312.27 ms. Allocated memory is still 1.6 GB. Free memory was 1.0 GB in the beginning and 832.7 MB in the end (delta: 187.8 MB). Peak memory consumption was 187.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,576 INFO  L168              Benchmark]: BuchiAutomizer took 52311.50 ms. Allocated memory was 1.6 GB in the beginning and 4.9 GB in the end (delta: 3.3 GB). Free memory was 832.7 MB in the beginning and 2.6 GB in the end (delta: -1.8 GB). Peak memory consumption was 3.4 GB. Max. memory is 15.3 GB.
[2020-11-24 21:46:28,579 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13450 locations, 24720 edges
  - StatisticsResult: Encoded RCFG
    13240 locations, 24134 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 195.67 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 105.41 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.52 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.8 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1734.08 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.4 MB). Free memory was 859.8 MB in the beginning and 1.1 GB in the end (delta: -273.4 MB). Peak memory consumption was 264.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.47 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.0 MB). Peak memory consumption was 8.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4297.49 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 331.9 MB). Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 104.8 MB). Peak memory consumption was 840.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 312.27 ms. Allocated memory is still 1.6 GB. Free memory was 1.0 GB in the beginning and 832.7 MB in the end (delta: 187.8 MB). Peak memory consumption was 187.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 52311.50 ms. Allocated memory was 1.6 GB in the beginning and 4.9 GB in the end (delta: 3.3 GB). Free memory was 832.7 MB in the beginning and 2.6 GB in the end (delta: -1.8 GB). Peak memory consumption was 3.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5385 locations, 7561 edges
  - StatisticsResult: BuchiProgram size
    13450 locations, 24720 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.8 modules have a trivial ranking function, the largest among these consists of 24 locations. The remainder module has 12169 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 52.2s and 9 iterations.  TraceHistogramMax:38. Analysis of lassos took 22.3s. Construction of modules took 22.1s. BÃ¼chi inclusion checks took 6.0s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 8 MinimizatonAttempts, 5172 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 12169 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 76345 SDtfs, 54581 SDslu, 168220 SDs, 0 SdLazy, 217043 SolverSat, 9032 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 22.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(726363746593025037757646358436107745018220041103) = (new MainToken)({from : 726363746593025037757646358436107745018220041099});
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
MainToken(726363746593025037757646358436107745018220041103).transfer~address~uint256.gas(3979002)({from : 726363746593025037757646358436107745018220041106, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9641]   COND TRUE   __tmp__DType[this] == MainToken
[L9642]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6894]               __var_1 := null;
[L6895]   COND TRUE   !(_to_s202 != null)
[L6896]               revert := true;
[L9642]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9643]   COND TRUE   revert
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);

Loop:
MainToken(726363746593025037757646358436107745018220041103).transfer~address~uint256.gas(3979001)({from : 726363746593025037757646358436107745018220041092, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != _to_s1572) && msgsender_MSG != _to_s1572) && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && balances_BasicToken[this][_to_s1572] + _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_MainToken0 := true;
[L3]                  call_transfer_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4822]               havoc __exception;
[L4823]               revert := false;
[L4824]   COND TRUE   __exception
[L4825]               __tmp__Balance := Balance;
[L4826]               __tmp__DType := DType;
[L4827]               __tmp__Alloc := Alloc;
[L4828]               __tmp__balance_ADDR := balance_ADDR;
[L4829]               __tmp__M_Ref_int := M_Ref_int;
[L4830]               __tmp__sum_balances0 := sum_balances0;
[L4831]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4832]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4833]               __tmp__sum_allowed1 := sum_allowed1;
[L4834]               __tmp__M_int_int := M_int_int;
[L4835]               __tmp__sum_chains2 := sum_chains2;
[L4836]               __tmp__sum_freezings3 := sum_freezings3;
[L4837]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4838]               __tmp__M_int_Ref := M_int_Ref;
[L4839]               __tmp__sum := sum;
[L4840]               __tmp__Length := Length;
[L4841]               __tmp__now := now;
[L4842]               __tmp__balances_BasicToken := balances_BasicToken;
[L4843]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4844]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4845]               __tmp__owner_Ownable := owner_Ownable;
[L4846]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4847]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4848]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4849]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4850]               __tmp__paused_Pausable := paused_Pausable;
[L4851]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4852]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4853]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4854]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4855]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4856]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4857]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4858]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4859]               __tmp__initialized_MainToken := initialized_MainToken;
[L4860]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9637]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9641]   COND TRUE   __tmp__DType[this] == MainToken
[L9642]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6894]               __var_1 := null;
[L6895]   COND TRUE   !(_to_s202 != null)
[L6896]               revert := true;
[L9642]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9643]   COND TRUE   revert
[L4860]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4861]               assume revert || gas < 0;
[L14537]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
