This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:51:49,859 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:51:49,860 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:51:49,872 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:51:49,872 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:51:49,872 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:51:49,874 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:51:49,875 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:51:49,877 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:51:49,878 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:51:49,878 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:51:49,879 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:51:49,880 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:51:49,881 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:51:49,882 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:51:49,882 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:51:49,883 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:51:49,884 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:51:49,886 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:51:49,887 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:51:49,888 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:51:49,888 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:51:49,890 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:51:49,890 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:51:49,891 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:51:49,891 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:51:49,892 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:51:49,893 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:51:49,893 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:51:49,893 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:51:49,893 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:51:49,894 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:51:49,895 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:51:49,895 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:51:49,896 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:51:49,896 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:51:49,897 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:51:49,897 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:51:49,897 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:51:49,898 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:51:49,898 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:51:49,898 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:51:49,906 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:51:49,906 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:51:49,907 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:51:49,907 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:51:49,908 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:51:49,908 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:51:49,908 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:51:49,908 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:51:49,908 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:51:49,908 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:51:49,908 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:51:49,908 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:51:49,909 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:51:49,909 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:51:49,910 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:51:49,910 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:51:49,910 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:51:49,910 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:51:49,910 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:51:49,910 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:51:49,933 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:51:49,947 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:51:49,951 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:51:49,952 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:51:49,953 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:51:49,954 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl
[2020-11-25 16:51:49,954 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl'
[2020-11-25 16:51:50,067 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:51:50,068 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:51:50,069 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:51:50,069 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:51:50,069 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:51:50,086 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,087 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,126 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,127 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,155 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,168 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,178 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,192 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:51:50,193 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:51:50,193 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:51:50,196 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:51:50,201 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/1) ...
[2020-11-25 16:51:50,222 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this]) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 16:51:50,227 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this]) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 16:51:50,235 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this]) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 16:51:50,241 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s437 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s437,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-25 16:51:50,244 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s437]==_value_s437 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && transferPaused_GatherToken[this]==( old(transferPaused_GatherToken[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && mintPermissions_MintableToken[this]==( old(mintPermissions_MintableToken[this]) ) ) && maxMintLimit_MintableToken[this]==( old(maxMintLimit_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s437,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s437,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[transferPaused_GatherToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[transferPaused_GatherToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintPermissions_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintPermissions_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[maxMintLimit_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[maxMintLimit_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-25 16:51:50,251 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this]) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 16:51:50,252 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:51:50,264 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:50 PropertyContainer
[2020-11-25 16:51:50,265 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:51:50,265 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:51:50,265 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:51:50,265 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:51:50,266 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/2) ...
[2020-11-25 16:51:50,266 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:51:50,267 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:51:50,287 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:50" (2/2) ...
[2020-11-25 16:51:50,287 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:51:50,288 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:51:50,288 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:51:50,288 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:51:50,289 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/2) ...
[2020-11-25 16:51:50,344 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:51:50,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,345 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:51:50,346 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:51:50,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:51:50,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:51:50,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:51:50,346 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:51:50,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:51:50,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 16:51:50,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 16:51:50,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 16:51:50,346 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:51:50,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 16:51:50,347 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 16:51:50,348 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 16:51:50,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 16:51:50,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 16:51:50,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 16:51:50,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 16:51:50,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure checkMintPermission~address_MintableToken__success
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken
[2020-11-25 16:51:50,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken
[2020-11-25 16:51:50,349 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 16:51:50,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure mintInternal~address~uint256_MintableToken__success
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken
[2020-11-25 16:51:50,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 16:51:50,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 16:51:50,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken
[2020-11-25 16:51:50,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken_NoBaseCtor__success
[2020-11-25 16:51:50,350 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken
[2020-11-25 16:51:50,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken
[2020-11-25 16:51:50,351 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken
[2020-11-25 16:51:50,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken
[2020-11-25 16:51:50,351 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken
[2020-11-25 16:51:50,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken
[2020-11-25 16:51:50,351 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken
[2020-11-25 16:51:50,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken
[2020-11-25 16:51:50,351 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken
[2020-11-25 16:51:50,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken
[2020-11-25 16:51:50,351 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken
[2020-11-25 16:51:50,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken
[2020-11-25 16:51:50,351 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken
[2020-11-25 16:51:50,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken
[2020-11-25 16:51:50,352 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken
[2020-11-25 16:51:50,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken
[2020-11-25 16:51:50,352 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken
[2020-11-25 16:51:50,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken
[2020-11-25 16:51:50,352 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:51:50,352 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:51:50,352 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:51:50,352 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure tranferable_pre__success
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:51:50,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GatherToken
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:51:50,354 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:51:50,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:51:50,356 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 16:51:50,357 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 16:51:50,358 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 16:51:50,358 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 16:51:50,358 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 16:51:50,358 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,358 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 16:51:50,358 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 16:51:50,359 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure checkMintPermission~address_MintableToken__fail
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken__success
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken__fail
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure mintInternal~address~uint256_MintableToken__fail
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken__success
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken__fail
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 16:51:50,360 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken__success
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken_NoBaseCtor__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken__success
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken__success
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken__success
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken__fail
[2020-11-25 16:51:50,361 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken__success
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken__fail
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken__success
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken__fail
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken__success
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken__fail
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken__success
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken__fail
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken__success
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken__fail
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken__success
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken__fail
[2020-11-25 16:51:50,362 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:51:50,363 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:51:50,363 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:51:50,363 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:51:50,364 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 16:51:50,364 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 16:51:50,364 INFO  L130     BoogieDeclarations]: Found specification of procedure tranferable_pre__fail
[2020-11-25 16:51:50,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:51:50,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:51:50,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:51:50,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:51:50,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:51:50,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:51:50,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:50,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:51:50,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:51:50,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:51:50,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:51:50,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:51:50,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:51:50,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:51:50,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:51:50,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:51:50,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 16:51:50,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 16:51:50,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 16:51:50,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 16:51:50,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:51:50,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:51:50,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:51:50,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:51:50,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 16:51:50,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 16:51:50,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 16:51:50,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 16:51:50,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 16:51:50,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 16:51:50,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 16:51:50,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 16:51:50,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 16:51:50,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 16:51:50,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 16:51:50,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 16:51:50,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 16:51:50,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 16:51:50,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 16:51:50,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 16:51:50,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 16:51:50,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 16:51:50,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:51:50,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:51:50,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:51:50,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 16:51:50,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 16:51:50,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 16:51:50,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 16:51:50,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkMintPermission~address_MintableToken__fail
[2020-11-25 16:51:50,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkMintPermission~address_MintableToken__success
[2020-11-25 16:51:50,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken__fail
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken__success
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintInternal~address~uint256_MintableToken__fail
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintInternal~address~uint256_MintableToken__success
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken__fail
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken__success
[2020-11-25 16:51:50,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken__fail
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken__success
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken_NoBaseCtor__fail
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken_NoBaseCtor__success
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken__fail
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken__success
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken__fail
[2020-11-25 16:51:50,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken__success
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken__fail
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken__success
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken__fail
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken__success
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken__fail
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken__success
[2020-11-25 16:51:50,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken__fail
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken__success
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken__fail
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken__success
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken__fail
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken__success
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken__fail
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken__success
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:51:50,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure tranferable_pre__fail
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure tranferable_pre__success
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:51:50,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 16:51:50,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GatherToken
[2020-11-25 16:51:50,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:51:50,382 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:51:50,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:51:50,879 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:51:50,951 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:51:50,951 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:51:50,952 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:51:51,284 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:51:51,284 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:51:51,286 INFO  L202        PluginConnector]: Adding new model GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:51 BoogieIcfgContainer
[2020-11-25 16:51:51,286 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:50" (2/2) ...
[2020-11-25 16:51:51,286 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:51:51,286 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@258bbaac and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:51, skipping insertion in model container
[2020-11-25 16:51:51,287 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:51:51,287 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:51:51,287 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:51:51,288 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:51:51,288 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/3) ...
[2020-11-25 16:51:51,289 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@170161f2 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:51, skipping insertion in model container
[2020-11-25 16:51:51,289 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:50" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:51:51,323 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:51 NWAContainer
[2020-11-25 16:51:51,323 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:51:51,323 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:51:51,323 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:51:51,324 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:51:51,325 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:51" (3/4) ...
[2020-11-25 16:51:51,325 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@153c4f0a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:51, skipping insertion in model container
[2020-11-25 16:51:51,325 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:51" (4/4) ...
[2020-11-25 16:51:51,328 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:51:51,332 INFO  L110   BuchiProductObserver]: Initial RCFG 2397 locations, 3204 edges
[2020-11-25 16:51:51,333 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:51:51,344 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:51:53,262 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:51:53,269 INFO  L110   BuchiProductObserver]: BuchiProgram size 5908 locations, 10490 edges
[2020-11-25 16:51:53,270 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:53 BoogieIcfgContainer
[2020-11-25 16:51:53,270 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:51:53,270 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:51:53,270 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:51:53,271 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:51:53,272 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:53" (1/1) ...
[2020-11-25 16:51:53,387 INFO  L313           BlockEncoder]: Initial Icfg 5908 locations, 10490 edges
[2020-11-25 16:51:53,388 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:51:53,388 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:51:53,388 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:51:53,389 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:51:53,402 INFO  L70    emoveInfeasibleEdges]: Removed 99 edges and 19 locations because of local infeasibility
[2020-11-25 16:51:53,413 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 16:51:53,427 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:51:53,430 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:51:53,434 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:51:53,434 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:51:53,437 INFO  L313           BlockEncoder]: Encoded RCFG 5842 locations, 10321 edges
[2020-11-25 16:51:53,438 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:51:53 BasicIcfg
[2020-11-25 16:51:53,438 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:51:53,438 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:51:53,438 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:51:53,440 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:51:53,440 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:53,440 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:50" (1/6) ...
[2020-11-25 16:51:53,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5da3d3 and model type GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:51:53, skipping insertion in model container
[2020-11-25 16:51:53,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:53,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:50" (2/6) ...
[2020-11-25 16:51:53,442 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5da3d3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:51:53, skipping insertion in model container
[2020-11-25 16:51:53,442 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:53,442 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:51" (3/6) ...
[2020-11-25 16:51:53,442 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5da3d3 and model type GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:51:53, skipping insertion in model container
[2020-11-25 16:51:53,442 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:53,443 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:51" (4/6) ...
[2020-11-25 16:51:53,443 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5da3d3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:51:53, skipping insertion in model container
[2020-11-25 16:51:53,443 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:53,443 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:53" (5/6) ...
[2020-11-25 16:51:53,443 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d5da3d3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:51:53, skipping insertion in model container
[2020-11-25 16:51:53,443 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:53,443 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:51:53" (6/6) ...
[2020-11-25 16:51:53,444 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_approve.bpl_BEv2
[2020-11-25 16:51:53,476 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:51:53,477 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:51:53,477 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:51:53,477 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:51:53,477 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:51:53,477 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:51:53,477 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:51:53,477 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:51:53,477 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:51:53,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5842 states.
[2020-11-25 16:51:53,568 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:53,568 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:53,568 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:53,575 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:53,575 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:53,575 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:51:53,575 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5842 states.
[2020-11-25 16:51:53,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:53,595 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:53,595 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:53,597 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:53,597 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6693]              assume null == 0;
[L6694]  CALL        call this := FreshRefGenerator__success();
[L2968]              havoc newRef;
[L2969]              assume Alloc[newRef] == false;
[L2970]              Alloc[newRef] := true;
[L2971]              assume newRef != null;
[L6694]  RET         call this := FreshRefGenerator__success();
[L6695]              assume now >= 0;
[L6696]              assume DType[this] == GatherToken;
[L6697]              assume msgvalue_MSG == 0;
[L6698]              gas := gas - 53000;
[L6699]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1622]              havoc __exception;
[L1623]              revert := false;
[L1624]  COND FALSE  !(__exception)
[L1651]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3998]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND TRUE   revert
[L1651]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1652]              assume !revert && gas >= 0;
[L6699]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6700]              assume !revert && gas >= 0;

Loop:
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND TRUE   choice == 22
[L6547]              gas := gas - 21000;
[L6548]  COND FALSE  !(gas >= 0)
[L6703]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:51:53,613 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:53,613 INFO  L82        PathProgramCache]: Analyzing trace with hash -1594926804, now seen corresponding path program 1 times
[2020-11-25 16:51:53,618 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:53,634 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:53,664 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:51:53,665 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:53,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:51:54,063 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:54,073 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:51:54,073 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:51:54,074 INFO  L87              Difference]: Start difference. First operand 5842 states. Second operand 3 states.
[2020-11-25 16:51:54,377 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:54,377 INFO  L93              Difference]: Finished difference Result 3503 states and 3936 transitions.
[2020-11-25 16:51:54,377 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:51:54,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3503 states and 3936 transitions.
[2020-11-25 16:51:54,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:54,420 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3503 states to 3499 states and 3928 transitions.
[2020-11-25 16:51:54,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:51:54,423 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 874
[2020-11-25 16:51:54,423 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3499 states and 3928 transitions.
[2020-11-25 16:51:54,431 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:54,431 INFO  L728         BuchiCegarLoop]: Abstraction has 3499 states and 3928 transitions.
[2020-11-25 16:51:54,445 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3499 states and 3928 transitions.
[2020-11-25 16:51:54,489 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3499 to 3499.
[2020-11-25 16:51:54,489 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3499 states.
[2020-11-25 16:51:54,495 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3499 states to 3499 states and 3928 transitions.
[2020-11-25 16:51:54,496 INFO  L751         BuchiCegarLoop]: Abstraction has 3499 states and 3928 transitions.
[2020-11-25 16:51:54,496 INFO  L631         BuchiCegarLoop]: Abstraction has 3499 states and 3928 transitions.
[2020-11-25 16:51:54,496 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:51:54,496 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3499 states and 3928 transitions.
[2020-11-25 16:51:54,503 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:54,504 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:54,504 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:54,505 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:54,506 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6693]              assume null == 0;
[L6694]  CALL        call this := FreshRefGenerator__success();
[L2968]              havoc newRef;
[L2969]              assume Alloc[newRef] == false;
[L2970]              Alloc[newRef] := true;
[L2971]              assume newRef != null;
[L6694]  RET         call this := FreshRefGenerator__success();
[L6695]              assume now >= 0;
[L6696]              assume DType[this] == GatherToken;
[L6697]              assume msgvalue_MSG == 0;
[L6698]              gas := gas - 53000;
[L6699]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1622]              havoc __exception;
[L1623]              revert := false;
[L1624]  COND FALSE  !(__exception)
[L1651]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3998]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND TRUE   revert
[L1651]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1652]              assume !revert && gas >= 0;
[L6699]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6700]              assume !revert && gas >= 0;
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:51:54,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:54,510 INFO  L82        PathProgramCache]: Analyzing trace with hash 57234208, now seen corresponding path program 1 times
[2020-11-25 16:51:54,511 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:54,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:54,540 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:51:54,540 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:54,540 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:51:54,541 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:54,542 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:51:54,542 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:51:54,542 INFO  L87              Difference]: Start difference. First operand 3499 states and 3928 transitions. cyclomatic complexity: 431 Second operand 4 states.
[2020-11-25 16:51:55,047 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:55,048 INFO  L93              Difference]: Finished difference Result 4829 states and 5446 transitions.
[2020-11-25 16:51:55,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:51:55,048 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4829 states and 5446 transitions.
[2020-11-25 16:51:55,063 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:51:55,079 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4829 states to 4657 states and 5252 transitions.
[2020-11-25 16:51:55,079 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-25 16:51:55,080 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1149
[2020-11-25 16:51:55,080 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4657 states and 5252 transitions.
[2020-11-25 16:51:55,087 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:55,087 INFO  L728         BuchiCegarLoop]: Abstraction has 4657 states and 5252 transitions.
[2020-11-25 16:51:55,091 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4657 states and 5252 transitions.
[2020-11-25 16:51:55,125 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4657 to 3743.
[2020-11-25 16:51:55,125 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3743 states.
[2020-11-25 16:51:55,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3743 states to 3743 states and 4062 transitions.
[2020-11-25 16:51:55,129 INFO  L751         BuchiCegarLoop]: Abstraction has 3743 states and 4062 transitions.
[2020-11-25 16:51:55,129 INFO  L631         BuchiCegarLoop]: Abstraction has 3743 states and 4062 transitions.
[2020-11-25 16:51:55,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:51:55,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3743 states and 4062 transitions.
[2020-11-25 16:51:55,135 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:51:55,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:55,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:55,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:55,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6693]              assume null == 0;
[L6694]  CALL        call this := FreshRefGenerator__success();
[L2968]              havoc newRef;
[L2969]              assume Alloc[newRef] == false;
[L2970]              Alloc[newRef] := true;
[L2971]              assume newRef != null;
[L6694]  RET         call this := FreshRefGenerator__success();
[L6695]              assume now >= 0;
[L6696]              assume DType[this] == GatherToken;
[L6697]              assume msgvalue_MSG == 0;
[L6698]              gas := gas - 53000;
[L6699]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1622]              havoc __exception;
[L1623]              revert := false;
[L1624]  COND FALSE  !(__exception)
[L1651]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3998]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND FALSE  !(revert)
[L4002]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L4002]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L4006]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3397]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3401]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L3405]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3405]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3406]  COND FALSE  !(revert)
[L3409]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]              assume msgsender_MSG != null;
[L3369]              Balance[this] := 0;
[L3370]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3371]              sum_allowed1[this] := 0;
[L3409]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3410]  COND FALSE  !(revert)
[L4010]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]              assume msgsender_MSG != null;
[L3083]              Balance[this] := 0;
[L3084]              owner_Ownable[this] := null;
[L3086]              owner_Ownable[this] := msgsender_MSG;
[L3099]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3100]  COND FALSE  !(revert)
[L4014]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3663]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]  COND FALSE  !(revert)
[L3667]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3667]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]  COND FALSE  !(revert)
[L3671]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3671]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3672]  COND FALSE  !(revert)
[L3675]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3397]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3401]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L3405]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3405]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3406]  COND FALSE  !(revert)
[L3409]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]              assume msgsender_MSG != null;
[L3369]              Balance[this] := 0;
[L3370]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3371]              sum_allowed1[this] := 0;
[L3409]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3410]  COND FALSE  !(revert)
[L3675]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]  COND FALSE  !(revert)
[L3679]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]              assume msgsender_MSG != null;
[L3083]              Balance[this] := 0;
[L3084]              owner_Ownable[this] := null;
[L3086]              owner_Ownable[this] := msgsender_MSG;
[L3099]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3100]  COND FALSE  !(revert)
[L3679]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3680]  COND FALSE  !(revert)
[L3683]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3624]              assume msgsender_MSG != null;
[L3625]              Balance[this] := 0;
[L3626]              mintingFinished_MintableToken[this] := false;
[L3627]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3628]              sum_mintPermissions2[this] := 0;
[L3629]              maxMintLimit_MintableToken[this] := 0;
[L3683]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3684]  COND FALSE  !(revert)
[L4018]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              Balance[this] := 0;
[L3953]              name_GatherToken[this] := 1979683959;
[L3954]              symbol_GatherToken[this] := -286833360;
[L3955]              decimals_GatherToken[this] := 18;
[L3956]              transferPaused_GatherToken[this] := true;
[L3958]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3959]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4022]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L1651]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1652]              assume !revert && gas >= 0;
[L6699]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6700]              assume !revert && gas >= 0;
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:51:55,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:55,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 923441824, now seen corresponding path program 1 times
[2020-11-25 16:51:55,145 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:55,192 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:55,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 875 trivial. 0 not checked.
[2020-11-25 16:51:55,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:55,434 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 16:51:55,434 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:55,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 16:51:55,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 16:51:55,434 INFO  L87              Difference]: Start difference. First operand 3743 states and 4062 transitions. cyclomatic complexity: 321 Second operand 15 states.
[2020-11-25 16:51:57,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:57,970 INFO  L93              Difference]: Finished difference Result 3899 states and 4253 transitions.
[2020-11-25 16:51:57,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 16:51:57,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3899 states and 4253 transitions.
[2020-11-25 16:51:57,978 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:51:57,990 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3899 states to 3899 states and 4253 transitions.
[2020-11-25 16:51:57,990 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1062
[2020-11-25 16:51:57,991 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1062
[2020-11-25 16:51:57,991 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3899 states and 4253 transitions.
[2020-11-25 16:51:57,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:57,994 INFO  L728         BuchiCegarLoop]: Abstraction has 3899 states and 4253 transitions.
[2020-11-25 16:51:57,997 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3899 states and 4253 transitions.
[2020-11-25 16:51:58,028 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3899 to 3862.
[2020-11-25 16:51:58,029 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3862 states.
[2020-11-25 16:51:58,032 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3862 states to 3862 states and 4202 transitions.
[2020-11-25 16:51:58,033 INFO  L751         BuchiCegarLoop]: Abstraction has 3862 states and 4202 transitions.
[2020-11-25 16:51:58,033 INFO  L631         BuchiCegarLoop]: Abstraction has 3862 states and 4202 transitions.
[2020-11-25 16:51:58,033 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:51:58,033 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3862 states and 4202 transitions.
[2020-11-25 16:51:58,037 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 16:51:58,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:58,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:58,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:58,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6693]              assume null == 0;
[L6694]  CALL        call this := FreshRefGenerator__success();
[L2968]              havoc newRef;
[L2969]              assume Alloc[newRef] == false;
[L2970]              Alloc[newRef] := true;
[L2971]              assume newRef != null;
[L6694]  RET         call this := FreshRefGenerator__success();
[L6695]              assume now >= 0;
[L6696]              assume DType[this] == GatherToken;
[L6697]              assume msgvalue_MSG == 0;
[L6698]              gas := gas - 53000;
[L6699]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1622]              havoc __exception;
[L1623]              revert := false;
[L1624]  COND TRUE   __exception
[L1625]              __tmp__Balance := Balance;
[L1626]              __tmp__DType := DType;
[L1627]              __tmp__Alloc := Alloc;
[L1628]              __tmp__balance_ADDR := balance_ADDR;
[L1629]              __tmp__M_Ref_int := M_Ref_int;
[L1630]              __tmp__sum_balances0 := sum_balances0;
[L1631]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1632]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1633]              __tmp__sum_allowed1 := sum_allowed1;
[L1634]              __tmp__sum_mintPermissions2 := sum_mintPermissions2;
[L1635]              __tmp__Length := Length;
[L1636]              __tmp__now := now;
[L1637]              __tmp__owner_Ownable := owner_Ownable;
[L1638]              __tmp__balances_BasicToken := balances_BasicToken;
[L1639]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1640]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1641]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1642]              __tmp__mintPermissions_MintableToken := mintPermissions_MintableToken;
[L1643]              __tmp__maxMintLimit_MintableToken := maxMintLimit_MintableToken;
[L1644]              __tmp__name_GatherToken := name_GatherToken;
[L1645]              __tmp__symbol_GatherToken := symbol_GatherToken;
[L1646]              __tmp__decimals_GatherToken := decimals_GatherToken;
[L1647]              __tmp__transferPaused_GatherToken := transferPaused_GatherToken;
[L1648]  CALL        call GatherToken_GatherToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3965]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3966]  COND FALSE  !(revert)
[L3969]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3198]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3199]  COND FALSE  !(revert)
[L3202]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3183]              assume msgsender_MSG != null;
[L3184]              __tmp__Balance[this] := 0;
[L3202]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3203]  COND FALSE  !(revert)
[L3969]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  COND FALSE  !(revert)
[L3973]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3244]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3245]  COND FALSE  !(revert)
[L3248]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3223]              assume msgsender_MSG != null;
[L3224]              __tmp__Balance[this] := 0;
[L3225]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3226]              __tmp__sum_balances0[this] := 0;
[L3227]              __tmp__totalSupply__BasicToken[this] := 0;
[L3248]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(revert)
[L3973]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3974]  COND FALSE  !(revert)
[L3977]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3377]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3378]  COND FALSE  !(revert)
[L3381]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3198]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3199]  COND FALSE  !(revert)
[L3202]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3183]              assume msgsender_MSG != null;
[L3184]              __tmp__Balance[this] := 0;
[L3202]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3203]  COND FALSE  !(revert)
[L3381]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3385]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3244]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3245]  COND FALSE  !(revert)
[L3248]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3223]              assume msgsender_MSG != null;
[L3224]              __tmp__Balance[this] := 0;
[L3225]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3226]              __tmp__sum_balances0[this] := 0;
[L3227]              __tmp__totalSupply__BasicToken[this] := 0;
[L3248]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(revert)
[L3385]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3358]              assume msgsender_MSG != null;
[L3359]              __tmp__Balance[this] := 0;
[L3360]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3361]              __tmp__sum_allowed1[this] := 0;
[L3389]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3390]  COND FALSE  !(revert)
[L3977]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3978]  COND FALSE  !(revert)
[L3981]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3091]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3072]              assume msgsender_MSG != null;
[L3073]              __tmp__Balance[this] := 0;
[L3074]              __tmp__owner_Ownable[this] := null;
[L3076]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3091]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3981]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]  COND FALSE  !(revert)
[L3985]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3635]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3635]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3636]  COND FALSE  !(revert)
[L3639]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3198]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3199]  COND FALSE  !(revert)
[L3202]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3183]              assume msgsender_MSG != null;
[L3184]              __tmp__Balance[this] := 0;
[L3202]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3203]  COND FALSE  !(revert)
[L3639]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3640]  COND FALSE  !(revert)
[L3643]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3244]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3245]  COND FALSE  !(revert)
[L3248]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3223]              assume msgsender_MSG != null;
[L3224]              __tmp__Balance[this] := 0;
[L3225]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3226]              __tmp__sum_balances0[this] := 0;
[L3227]              __tmp__totalSupply__BasicToken[this] := 0;
[L3248]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(revert)
[L3643]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3644]  COND FALSE  !(revert)
[L3647]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3377]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3378]  COND FALSE  !(revert)
[L3381]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3198]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3199]  COND FALSE  !(revert)
[L3202]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3183]              assume msgsender_MSG != null;
[L3184]              __tmp__Balance[this] := 0;
[L3202]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3203]  COND FALSE  !(revert)
[L3381]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3385]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3151]              assume msgsender_MSG != null;
[L3152]              __tmp__Balance[this] := 0;
[L3166]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3167]  COND FALSE  !(revert)
[L3244]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3245]  COND FALSE  !(revert)
[L3248]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3223]              assume msgsender_MSG != null;
[L3224]              __tmp__Balance[this] := 0;
[L3225]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3226]              __tmp__sum_balances0[this] := 0;
[L3227]              __tmp__totalSupply__BasicToken[this] := 0;
[L3248]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(revert)
[L3385]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3358]              assume msgsender_MSG != null;
[L3359]              __tmp__Balance[this] := 0;
[L3360]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3361]              __tmp__sum_allowed1[this] := 0;
[L3389]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3390]  COND FALSE  !(revert)
[L3647]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3648]  COND FALSE  !(revert)
[L3651]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3091]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3072]              assume msgsender_MSG != null;
[L3073]              __tmp__Balance[this] := 0;
[L3074]              __tmp__owner_Ownable[this] := null;
[L3076]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3091]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3651]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3652]  COND FALSE  !(revert)
[L3655]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]              assume msgsender_MSG != null;
[L3613]              __tmp__Balance[this] := 0;
[L3614]              __tmp__mintingFinished_MintableToken[this] := false;
[L3615]              __tmp__mintPermissions_MintableToken[this] := zeroRefintArr();
[L3616]              __tmp__sum_mintPermissions2[this] := 0;
[L3617]              __tmp__maxMintLimit_MintableToken[this] := 0;
[L3655]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3656]  COND FALSE  !(revert)
[L3985]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3986]  COND FALSE  !(revert)
[L3989]  CALL        call GatherToken_GatherToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3936]              assume msgsender_MSG != null;
[L3937]              __tmp__Balance[this] := 0;
[L3938]              __tmp__name_GatherToken[this] := 1979683959;
[L3939]              __tmp__symbol_GatherToken[this] := -286833360;
[L3940]              __tmp__decimals_GatherToken[this] := 18;
[L3941]              __tmp__transferPaused_GatherToken[this] := true;
[L3943]              __var_16 := __tmp__decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3944]              __tmp__maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, __tmp__decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3989]  RET         call GatherToken_GatherToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3990]  COND FALSE  !(revert)
[L1648]  RET         call GatherToken_GatherToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1649]              assume revert || gas < 0;
[L6699]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6700]              assume !revert && gas >= 0;
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND TRUE   __exception
[L877]               __tmp__Balance := Balance;
[L878]               __tmp__DType := DType;
[L879]               __tmp__Alloc := Alloc;
[L880]               __tmp__balance_ADDR := balance_ADDR;
[L881]               __tmp__M_Ref_int := M_Ref_int;
[L882]               __tmp__sum_balances0 := sum_balances0;
[L883]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L884]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L885]               __tmp__sum_allowed1 := sum_allowed1;
[L886]               __tmp__sum_mintPermissions2 := sum_mintPermissions2;
[L887]               __tmp__Length := Length;
[L888]               __tmp__now := now;
[L889]               __tmp__owner_Ownable := owner_Ownable;
[L890]               __tmp__balances_BasicToken := balances_BasicToken;
[L891]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L892]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L893]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L894]               __tmp__mintPermissions_MintableToken := mintPermissions_MintableToken;
[L895]               __tmp__maxMintLimit_MintableToken := maxMintLimit_MintableToken;
[L896]               __tmp__name_GatherToken := name_GatherToken;
[L897]               __tmp__symbol_GatherToken := symbol_GatherToken;
[L898]               __tmp__decimals_GatherToken := decimals_GatherToken;
[L899]               __tmp__transferPaused_GatherToken := transferPaused_GatherToken;
[L900]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3506]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3507]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3508]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3509]              __ret_0_ := true;
[L900]   RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L901]               assume revert || gas < 0;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:51:58,048 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:58,048 INFO  L82        PathProgramCache]: Analyzing trace with hash -2126549999, now seen corresponding path program 1 times
[2020-11-25 16:51:58,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:58,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:58,203 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 16:51:58,203 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:58,203 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:51:58,204 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:58,204 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:51:58,204 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:51:58,204 INFO  L87              Difference]: Start difference. First operand 3862 states and 4202 transitions. cyclomatic complexity: 344 Second operand 4 states.
[2020-11-25 16:51:58,492 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:58,492 INFO  L93              Difference]: Finished difference Result 4622 states and 5212 transitions.
[2020-11-25 16:51:58,492 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:51:58,492 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4622 states and 5212 transitions.
[2020-11-25 16:51:58,503 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 14
[2020-11-25 16:51:58,516 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4622 states to 4440 states and 5020 transitions.
[2020-11-25 16:51:58,516 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1209
[2020-11-25 16:51:58,517 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1209
[2020-11-25 16:51:58,517 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4440 states and 5020 transitions.
[2020-11-25 16:51:58,520 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:58,521 INFO  L728         BuchiCegarLoop]: Abstraction has 4440 states and 5020 transitions.
[2020-11-25 16:51:58,523 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4440 states and 5020 transitions.
[2020-11-25 16:51:58,547 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4440 to 3866.
[2020-11-25 16:51:58,548 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3866 states.
[2020-11-25 16:51:58,551 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3866 states to 3866 states and 4251 transitions.
[2020-11-25 16:51:58,551 INFO  L751         BuchiCegarLoop]: Abstraction has 3866 states and 4251 transitions.
[2020-11-25 16:51:58,551 INFO  L631         BuchiCegarLoop]: Abstraction has 3866 states and 4251 transitions.
[2020-11-25 16:51:58,551 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:51:58,551 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3866 states and 4251 transitions.
[2020-11-25 16:51:58,555 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 16:51:58,556 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:58,556 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:58,557 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:58,557 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6693]              assume null == 0;
[L6694]  CALL        call this := FreshRefGenerator__success();
[L2968]              havoc newRef;
[L2969]              assume Alloc[newRef] == false;
[L2970]              Alloc[newRef] := true;
[L2971]              assume newRef != null;
[L6694]  RET         call this := FreshRefGenerator__success();
[L6695]              assume now >= 0;
[L6696]              assume DType[this] == GatherToken;
[L6697]              assume msgvalue_MSG == 0;
[L6698]              gas := gas - 53000;
[L6699]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1622]              havoc __exception;
[L1623]              revert := false;
[L1624]  COND FALSE  !(__exception)
[L1651]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3998]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND FALSE  !(revert)
[L4002]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L4002]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L4006]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3397]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3401]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L3405]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3405]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3406]  COND FALSE  !(revert)
[L3409]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]              assume msgsender_MSG != null;
[L3369]              Balance[this] := 0;
[L3370]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3371]              sum_allowed1[this] := 0;
[L3409]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3410]  COND FALSE  !(revert)
[L4010]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]              assume msgsender_MSG != null;
[L3083]              Balance[this] := 0;
[L3084]              owner_Ownable[this] := null;
[L3086]              owner_Ownable[this] := msgsender_MSG;
[L3099]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3100]  COND FALSE  !(revert)
[L4014]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3663]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]  COND FALSE  !(revert)
[L3667]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3667]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]  COND FALSE  !(revert)
[L3671]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3671]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3672]  COND FALSE  !(revert)
[L3675]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3397]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3401]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L3405]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3405]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3406]  COND FALSE  !(revert)
[L3409]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]              assume msgsender_MSG != null;
[L3369]              Balance[this] := 0;
[L3370]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3371]              sum_allowed1[this] := 0;
[L3409]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3410]  COND FALSE  !(revert)
[L3675]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]  COND FALSE  !(revert)
[L3679]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]              assume msgsender_MSG != null;
[L3083]              Balance[this] := 0;
[L3084]              owner_Ownable[this] := null;
[L3086]              owner_Ownable[this] := msgsender_MSG;
[L3099]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3100]  COND FALSE  !(revert)
[L3679]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3680]  COND FALSE  !(revert)
[L3683]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3624]              assume msgsender_MSG != null;
[L3625]              Balance[this] := 0;
[L3626]              mintingFinished_MintableToken[this] := false;
[L3627]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3628]              sum_mintPermissions2[this] := 0;
[L3629]              maxMintLimit_MintableToken[this] := 0;
[L3683]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3684]  COND FALSE  !(revert)
[L4018]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              Balance[this] := 0;
[L3953]              name_GatherToken[this] := 1979683959;
[L3954]              symbol_GatherToken[this] := -286833360;
[L3955]              decimals_GatherToken[this] := 18;
[L3956]              transferPaused_GatherToken[this] := true;
[L3958]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3959]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4022]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L1651]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1652]              assume !revert && gas >= 0;
[L6699]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6700]              assume !revert && gas >= 0;
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND TRUE   __exception
[L877]               __tmp__Balance := Balance;
[L878]               __tmp__DType := DType;
[L879]               __tmp__Alloc := Alloc;
[L880]               __tmp__balance_ADDR := balance_ADDR;
[L881]               __tmp__M_Ref_int := M_Ref_int;
[L882]               __tmp__sum_balances0 := sum_balances0;
[L883]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L884]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L885]               __tmp__sum_allowed1 := sum_allowed1;
[L886]               __tmp__sum_mintPermissions2 := sum_mintPermissions2;
[L887]               __tmp__Length := Length;
[L888]               __tmp__now := now;
[L889]               __tmp__owner_Ownable := owner_Ownable;
[L890]               __tmp__balances_BasicToken := balances_BasicToken;
[L891]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L892]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L893]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L894]               __tmp__mintPermissions_MintableToken := mintPermissions_MintableToken;
[L895]               __tmp__maxMintLimit_MintableToken := maxMintLimit_MintableToken;
[L896]               __tmp__name_GatherToken := name_GatherToken;
[L897]               __tmp__symbol_GatherToken := symbol_GatherToken;
[L898]               __tmp__decimals_GatherToken := decimals_GatherToken;
[L899]               __tmp__transferPaused_GatherToken := transferPaused_GatherToken;
[L900]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3506]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3507]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3508]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3509]              __ret_0_ := true;
[L900]   RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L901]               assume revert || gas < 0;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND TRUE   choice == 22
[L6547]              gas := gas - 21000;
[L6548]  COND TRUE   gas >= 0
[L6549]              assume msgvalue_MSG == 0;
[L6550]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L274]               havoc __exception;
[L275]               revert := false;
[L276]   COND FALSE  !(__exception)
[L303]   CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]              __ret_0_ := owner_Ownable[this];
[L303]   RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L304]               assume !revert && gas >= 0;
[L6550]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L6703]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:51:58,562 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:58,562 INFO  L82        PathProgramCache]: Analyzing trace with hash 1599243525, now seen corresponding path program 1 times
[2020-11-25 16:51:58,563 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:58,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:58,655 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 16:51:58,655 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:58,655 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 16:51:58,656 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:58,656 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 16:51:58,656 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 16:51:58,656 INFO  L87              Difference]: Start difference. First operand 3866 states and 4251 transitions. cyclomatic complexity: 389 Second operand 5 states.
[2020-11-25 16:51:59,147 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:59,148 INFO  L93              Difference]: Finished difference Result 4446 states and 4935 transitions.
[2020-11-25 16:51:59,148 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:51:59,148 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4446 states and 4935 transitions.
[2020-11-25 16:51:59,156 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 16:51:59,164 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4446 states to 3320 states and 3787 transitions.
[2020-11-25 16:51:59,164 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 16:51:59,165 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 941
[2020-11-25 16:51:59,165 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3320 states and 3787 transitions.
[2020-11-25 16:51:59,168 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:59,168 INFO  L728         BuchiCegarLoop]: Abstraction has 3320 states and 3787 transitions.
[2020-11-25 16:51:59,170 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3320 states and 3787 transitions.
[2020-11-25 16:51:59,184 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3320 to 2405.
[2020-11-25 16:51:59,184 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2405 states.
[2020-11-25 16:51:59,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2405 states to 2405 states and 2610 transitions.
[2020-11-25 16:51:59,186 INFO  L751         BuchiCegarLoop]: Abstraction has 2405 states and 2610 transitions.
[2020-11-25 16:51:59,186 INFO  L631         BuchiCegarLoop]: Abstraction has 2405 states and 2610 transitions.
[2020-11-25 16:51:59,186 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:51:59,186 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2405 states and 2610 transitions.
[2020-11-25 16:51:59,189 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:59,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:59,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:59,190 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:59,191 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6693]              assume null == 0;
[L6694]  CALL        call this := FreshRefGenerator__success();
[L2968]              havoc newRef;
[L2969]              assume Alloc[newRef] == false;
[L2970]              Alloc[newRef] := true;
[L2971]              assume newRef != null;
[L6694]  RET         call this := FreshRefGenerator__success();
[L6695]              assume now >= 0;
[L6696]              assume DType[this] == GatherToken;
[L6697]              assume msgvalue_MSG == 0;
[L6698]              gas := gas - 53000;
[L6699]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1622]              havoc __exception;
[L1623]              revert := false;
[L1624]  COND FALSE  !(__exception)
[L1651]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3998]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND FALSE  !(revert)
[L4002]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L4002]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L4006]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3397]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3401]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L3405]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3405]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3406]  COND FALSE  !(revert)
[L3409]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]              assume msgsender_MSG != null;
[L3369]              Balance[this] := 0;
[L3370]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3371]              sum_allowed1[this] := 0;
[L3409]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3410]  COND FALSE  !(revert)
[L4010]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]              assume msgsender_MSG != null;
[L3083]              Balance[this] := 0;
[L3084]              owner_Ownable[this] := null;
[L3086]              owner_Ownable[this] := msgsender_MSG;
[L3099]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3100]  COND FALSE  !(revert)
[L4014]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3663]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]  COND FALSE  !(revert)
[L3667]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3667]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]  COND FALSE  !(revert)
[L3671]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3671]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3672]  COND FALSE  !(revert)
[L3675]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3397]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3210]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3211]  COND FALSE  !(revert)
[L3214]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3191]              assume msgsender_MSG != null;
[L3192]              Balance[this] := 0;
[L3214]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]  COND FALSE  !(revert)
[L3401]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L3405]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3159]              assume msgsender_MSG != null;
[L3160]              Balance[this] := 0;
[L3174]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3175]  COND FALSE  !(revert)
[L3256]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              assume msgsender_MSG != null;
[L3235]              Balance[this] := 0;
[L3236]              balances_BasicToken[this] := zeroRefintArr();
[L3237]              sum_balances0[this] := 0;
[L3238]              totalSupply__BasicToken[this] := 0;
[L3260]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3405]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3406]  COND FALSE  !(revert)
[L3409]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]              assume msgsender_MSG != null;
[L3369]              Balance[this] := 0;
[L3370]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3371]              sum_allowed1[this] := 0;
[L3409]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3410]  COND FALSE  !(revert)
[L3675]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]  COND FALSE  !(revert)
[L3679]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]              assume msgsender_MSG != null;
[L3083]              Balance[this] := 0;
[L3084]              owner_Ownable[this] := null;
[L3086]              owner_Ownable[this] := msgsender_MSG;
[L3099]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3100]  COND FALSE  !(revert)
[L3679]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3680]  COND FALSE  !(revert)
[L3683]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3624]              assume msgsender_MSG != null;
[L3625]              Balance[this] := 0;
[L3626]              mintingFinished_MintableToken[this] := false;
[L3627]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3628]              sum_mintPermissions2[this] := 0;
[L3629]              maxMintLimit_MintableToken[this] := 0;
[L3683]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3684]  COND FALSE  !(revert)
[L4018]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              Balance[this] := 0;
[L3953]              name_GatherToken[this] := 1979683959;
[L3954]              symbol_GatherToken[this] := -286833360;
[L3955]              decimals_GatherToken[this] := 18;
[L3956]              transferPaused_GatherToken[this] := true;
[L3958]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3959]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4022]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L1651]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1652]              assume !revert && gas >= 0;
[L6699]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6700]              assume !revert && gas >= 0;
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND FALSE  !(choice == 15)
[L6597]  COND FALSE  !(choice == 14)
[L6604]  COND TRUE   choice == 13
[L6605]              gas := gas - 21000;
[L6606]  COND TRUE   gas >= 0
[L6607]              assume _subtractedValue_s555 >= 0 && _subtractedValue_s555 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6608]              assume msgvalue_MSG == 0;
[L6609]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s555, _subtractedValue_s555);
[L1064]              havoc __exception;
[L1065]              revert := false;
[L1066]  COND FALSE  !(__exception)
[L1093]  CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s555, _subtractedValue_s555);
[L3590]              oldValue_s555 := allowed_StandardToken[this][msgsender_MSG][_spender_s555];
[L3591]  COND TRUE   _subtractedValue_s555 > oldValue_s555
[L3592]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s555];
[L3593]              allowed_StandardToken[this][msgsender_MSG][_spender_s555] := 0;
[L3594]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s555];
[L3604]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3605]              __ret_0_ := true;
[L1093]  RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s555, _subtractedValue_s555);
[L1094]              assume !revert && gas >= 0;
[L6609]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s555, _subtractedValue_s555);
[L6703]  RET         call CorralChoice_GatherToken(this);
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6703]  CALL        call CorralChoice_GatherToken(this);
[L6489]              havoc msgsender_MSG;
[L6490]              havoc msgvalue_MSG;
[L6491]              havoc choice;
[L6492]              havoc __ret_0_owner;
[L6493]              havoc newOwner_s150;
[L6494]              havoc __ret_0_totalSupply;
[L6495]              havoc _owner_s312;
[L6496]              havoc __ret_0_balanceOf;
[L6497]              havoc _to_s867;
[L6498]              havoc _value_s867;
[L6499]              havoc __ret_0_transfer;
[L6500]              havoc _owner_s453;
[L6501]              havoc _spender_s453;
[L6502]              havoc __ret_0_allowance;
[L6503]              havoc _from_s849;
[L6504]              havoc _to_s849;
[L6505]              havoc _value_s849;
[L6506]              havoc __ret_0_transferFrom;
[L6507]              havoc _spender_s437;
[L6508]              havoc _value_s437;
[L6509]              havoc __ret_0_approve;
[L6510]              havoc _spender_s495;
[L6511]              havoc _addedValue_s495;
[L6512]              havoc __ret_0_increaseApproval;
[L6513]              havoc _spender_s555;
[L6514]              havoc _subtractedValue_s555;
[L6515]              havoc __ret_0_decreaseApproval;
[L6516]              havoc __ret_0_mintingFinished;
[L6517]              havoc __ret_0_maxMintLimit;
[L6518]              havoc _minter_s650;
[L6519]              havoc _amount_s650;
[L6520]              havoc _to_s669;
[L6521]              havoc _amount_s669;
[L6522]              havoc __ret_0_mint;
[L6523]              havoc _minter_s749;
[L6524]              havoc __ret_0_mintAllowed;
[L6525]              havoc __ret_0_finishMinting;
[L6526]              havoc __ret_0_name;
[L6527]              havoc __ret_0_symbol;
[L6528]              havoc __ret_0_decimals;
[L6529]              havoc __ret_0_transferPaused;
[L6530]              havoc tmpNow;
[L6531]              havoc gas;
[L6532]              assume gas > 4000000 && gas <= 8000000;
[L6533]              tmpNow := now;
[L6534]              havoc now;
[L6535]              assume now > tmpNow;
[L6536]              assume msgsender_MSG != null;
[L6537]              assume DType[msgsender_MSG] != SafeMath;
[L6538]              assume DType[msgsender_MSG] != Ownable;
[L6539]              assume DType[msgsender_MSG] != ERC20Basic;
[L6540]              assume DType[msgsender_MSG] != ERC20;
[L6541]              assume DType[msgsender_MSG] != BasicToken;
[L6542]              assume DType[msgsender_MSG] != StandardToken;
[L6543]              assume DType[msgsender_MSG] != MintableToken;
[L6544]              assume DType[msgsender_MSG] != GatherToken;
[L6545]              Alloc[msgsender_MSG] := true;
[L6546]  COND FALSE  !(choice == 22)
[L6552]  COND FALSE  !(choice == 21)
[L6558]  COND FALSE  !(choice == 20)
[L6564]  COND FALSE  !(choice == 19)
[L6570]  COND FALSE  !(choice == 18)
[L6577]  COND FALSE  !(choice == 17)
[L6583]  COND FALSE  !(choice == 16)
[L6590]  COND TRUE   choice == 15
[L6591]              gas := gas - 21000;
[L6592]  COND TRUE   gas >= 0
[L6593]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6594]              assume msgvalue_MSG == 0;
[L6595]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s437;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L874]               havoc __exception;
[L875]               revert := false;
[L876]   COND FALSE  !(__exception)
[L903]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3515]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3516]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3517]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3518]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3519]              __ret_0_ := true;
[L903]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L904]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s437] == _value_s437) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && transferPaused_GatherToken[this] == old(transferPaused_GatherToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && mintPermissions_MintableToken[this] == old(mintPermissions_MintableToken[this])) && maxMintLimit_MintableToken[this] == old(maxMintLimit_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6595]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6703]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:51:59,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:59,195 INFO  L82        PathProgramCache]: Analyzing trace with hash 286407025, now seen corresponding path program 1 times
[2020-11-25 16:51:59,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:59,221 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:59,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 949 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 949 trivial. 0 not checked.
[2020-11-25 16:51:59,359 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:59,359 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:51:59,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:59,359 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:51:59,359 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:51:59,359 INFO  L87              Difference]: Start difference. First operand 2405 states and 2610 transitions. cyclomatic complexity: 208 Second operand 7 states.
[2020-11-25 16:51:59,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:59,682 INFO  L93              Difference]: Finished difference Result 1325 states and 1433 transitions.
[2020-11-25 16:51:59,682 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:51:59,682 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1325 states and 1433 transitions.
[2020-11-25 16:51:59,684 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:51:59,684 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1325 states to 0 states and 0 transitions.
[2020-11-25 16:51:59,684 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:51:59,684 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:51:59,684 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:51:59,684 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:59,685 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:51:59,685 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:51:59,685 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:51:59,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:51:59,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:51:59,685 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:51:59,685 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:51:59,688 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:51:59 BasicIcfg
[2020-11-25 16:51:59,688 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:51:59,688 INFO  L168              Benchmark]: Toolchain (without parser) took 9620.71 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 903.9 MB). Free memory was 929.8 MB in the beginning and 927.7 MB in the end (delta: 2.2 MB). Peak memory consumption was 906.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,689 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.23 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,689 INFO  L168              Benchmark]: Boogie Preprocessor took 123.76 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,689 INFO  L168              Benchmark]: UtopiaSpecLang took 72.16 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,689 INFO  L168              Benchmark]: Boogie Printer took 22.46 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,690 INFO  L168              Benchmark]: RCFGBuilder took 998.78 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.9 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -111.5 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,690 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.11 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,690 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1946.78 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 151.5 MB). Free memory was 1.0 GB in the beginning and 966.2 MB in the end (delta: 41.2 MB). Peak memory consumption was 531.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,691 INFO  L168              Benchmark]: BlockEncodingV2 took 167.98 ms. Allocated memory is still 1.3 GB. Free memory was 966.2 MB in the beginning and 877.1 MB in the end (delta: 89.2 MB). Peak memory consumption was 89.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,691 INFO  L168              Benchmark]: BuchiAutomizer took 6249.60 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 679.5 MB). Free memory was 877.1 MB in the beginning and 927.7 MB in the end (delta: -50.6 MB). Peak memory consumption was 628.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:59,693 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5908 locations, 10490 edges
  - StatisticsResult: Encoded RCFG
    5842 locations, 10321 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.23 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 123.76 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 72.16 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.46 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 998.78 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.9 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -111.5 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.11 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1946.78 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 151.5 MB). Free memory was 1.0 GB in the beginning and 966.2 MB in the end (delta: 41.2 MB). Peak memory consumption was 531.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 167.98 ms. Allocated memory is still 1.3 GB. Free memory was 966.2 MB in the beginning and 877.1 MB in the end (delta: 89.2 MB). Peak memory consumption was 89.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6249.60 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 679.5 MB). Free memory was 877.1 MB in the beginning and 927.7 MB in the end (delta: -50.6 MB). Peak memory consumption was 628.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2397 locations, 3204 edges
  - StatisticsResult: BuchiProgram size
    5908 locations, 10490 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 15 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.2s and 7 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.2s. Construction of modules took 3.3s. BÃ¼chi inclusion checks took 1.1s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 2440 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3866 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21235 SDtfs, 23030 SDslu, 25184 SDs, 0 SdLazy, 43600 SolverSat, 3914 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
