This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 07:48:42,388 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 07:48:42,390 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 07:48:42,400 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 07:48:42,400 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 07:48:42,401 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 07:48:42,402 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 07:48:42,403 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 07:48:42,405 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 07:48:42,405 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 07:48:42,406 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 07:48:42,406 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 07:48:42,407 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 07:48:42,408 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 07:48:42,409 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 07:48:42,409 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 07:48:42,410 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 07:48:42,411 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 07:48:42,412 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 07:48:42,414 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 07:48:42,414 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 07:48:42,415 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 07:48:42,417 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 07:48:42,417 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 07:48:42,417 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 07:48:42,418 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 07:48:42,418 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 07:48:42,419 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 07:48:42,419 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 07:48:42,419 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 07:48:42,419 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 07:48:42,420 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 07:48:42,420 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 07:48:42,421 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 07:48:42,422 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 07:48:42,422 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 07:48:42,422 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 07:48:42,422 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 07:48:42,423 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 07:48:42,423 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 07:48:42,424 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 07:48:42,424 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 07:48:42,432 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 07:48:42,432 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 07:48:42,433 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 07:48:42,433 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 07:48:42,433 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 07:48:42,433 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 07:48:42,433 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 07:48:42,434 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 07:48:42,434 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 07:48:42,434 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 07:48:42,434 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 07:48:42,434 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 07:48:42,434 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 07:48:42,434 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 07:48:42,434 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 07:48:42,435 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 07:48:42,435 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 07:48:42,436 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 07:48:42,436 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 07:48:42,460 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 07:48:42,474 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 07:48:42,477 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 07:48:42,478 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 07:48:42,478 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 07:48:42,479 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl
[2020-11-25 07:48:42,479 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl'
[2020-11-25 07:48:42,581 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 07:48:42,583 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 07:48:42,583 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 07:48:42,583 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 07:48:42,583 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 07:48:42,600 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,602 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,644 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,646 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,671 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,683 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,692 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,703 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 07:48:42,703 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 07:48:42,703 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 07:48:42,705 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 07:48:42,709 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/1) ...
[2020-11-25 07:48:42,728 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:48:42,733 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:48:42,741 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:48:42,749 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s211!=recipient_s211 && ( ( amount_s211>_balances_ERC20[this][sender_s211] || amount_s211>_allowances_ERC20[this][sender_s211][msg.sender] ) || ( _balances_ERC20[this][recipient_s211] + amount_s211 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s211>=0 ) && amount_s211<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s211]>=0 ) && _balances_ERC20[this][recipient_s211]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s211]>=0 ) && _balances_ERC20[this][sender_s211]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s211][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s211][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 07:48:42,755 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:48:42,755 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 07:48:42,766 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:48:42 PropertyContainer
[2020-11-25 07:48:42,766 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 07:48:42,767 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 07:48:42,767 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 07:48:42,767 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 07:48:42,768 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/2) ...
[2020-11-25 07:48:42,768 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 07:48:42,768 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 07:48:42,785 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:48:42" (2/2) ...
[2020-11-25 07:48:42,786 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 07:48:42,786 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 07:48:42,786 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 07:48:42,786 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 07:48:42,787 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/2) ...
[2020-11-25 07:48:42,842 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 07:48:42,842 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:48:42,842 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 07:48:42,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 07:48:42,843 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 07:48:42,844 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 07:48:42,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 07:48:42,844 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 07:48:42,844 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:48:42,844 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 07:48:42,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 07:48:42,845 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 07:48:42,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 07:48:42,845 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 07:48:42,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 07:48:42,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 07:48:42,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 07:48:42,846 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:48:42,846 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:48:42,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:48:42,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:48:42,847 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 07:48:42,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 07:48:42,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 07:48:42,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 07:48:42,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 07:48:42,848 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU_NoBaseCtor__success
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU
[2020-11-25 07:48:42,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ULU
[2020-11-25 07:48:42,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ULU
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ULU
[2020-11-25 07:48:42,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ULU
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ULU
[2020-11-25 07:48:42,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ULU
[2020-11-25 07:48:42,849 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L130     BoogieDeclarations]: Found specification of procedure cancelAddMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure cancelAddMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L130     BoogieDeclarations]: Found specification of procedure executeAddMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure executeAddMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ULU
[2020-11-25 07:48:42,850 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ULU
[2020-11-25 07:48:42,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ULU
[2020-11-25 07:48:42,851 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ULU
[2020-11-25 07:48:42,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ULU
[2020-11-25 07:48:42,851 INFO  L130     BoogieDeclarations]: Found specification of procedure GRACE_PERIOD_ULU
[2020-11-25 07:48:42,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure GRACE_PERIOD_ULU
[2020-11-25 07:48:42,851 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinters~address_ULU
[2020-11-25 07:48:42,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinters~address_ULU
[2020-11-25 07:48:42,851 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 07:48:42,851 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 07:48:42,851 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 07:48:42,852 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ULU
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 07:48:42,853 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:48:42,854 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:48:42,855 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:48:42,856 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU_NoBaseCtor__fail
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU__success
[2020-11-25 07:48:42,857 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU__fail
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ULU__success
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ULU__fail
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ULU__success
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ULU__fail
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ULU__success
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ULU__fail
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ULU__success
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ULU__fail
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinter~address_ULU__success
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinter~address_ULU__fail
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure cancelAddMinter~address_ULU__success
[2020-11-25 07:48:42,858 INFO  L130     BoogieDeclarations]: Found specification of procedure cancelAddMinter~address_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure executeAddMinter~address_ULU__success
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure executeAddMinter~address_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ULU__success
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ULU__success
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ULU__success
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure GRACE_PERIOD_ULU__success
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure GRACE_PERIOD_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinters~address_ULU__success
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinters~address_ULU__fail
[2020-11-25 07:48:42,859 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 07:48:42,860 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 07:48:42,860 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 07:48:42,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 07:48:42,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:48:42,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:48:42,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:48:42,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU_NoBaseCtor__fail
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU_NoBaseCtor__success
[2020-11-25 07:48:42,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU__fail
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU__success
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ULU__fail
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ULU__success
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ULU__fail
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ULU__success
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ULU__fail
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ULU__success
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ULU__fail
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ULU__success
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinter~address_ULU__fail
[2020-11-25 07:48:42,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinter~address_ULU__success
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure cancelAddMinter~address_ULU__fail
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure cancelAddMinter~address_ULU__success
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure executeAddMinter~address_ULU__fail
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure executeAddMinter~address_ULU__success
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ULU__fail
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ULU__success
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ULU__fail
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ULU__success
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ULU__fail
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ULU__success
[2020-11-25 07:48:42,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure GRACE_PERIOD_ULU__fail
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure GRACE_PERIOD_ULU__success
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinters~address_ULU__fail
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinters~address_ULU__success
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 07:48:42,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 07:48:42,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ULU
[2020-11-25 07:48:42,870 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 07:48:42,870 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 07:48:42,870 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 07:48:43,222 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:48:43,222 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:48:43,607 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 07:48:43,608 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 07:48:43,610 INFO  L202        PluginConnector]: Adding new model ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:48:43 BoogieIcfgContainer
[2020-11-25 07:48:43,610 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:48:42" (2/2) ...
[2020-11-25 07:48:43,610 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 07:48:43,610 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@37a6921a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:48:43, skipping insertion in model container
[2020-11-25 07:48:43,610 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 07:48:43,611 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 07:48:43,611 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 07:48:43,612 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 07:48:43,612 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/3) ...
[2020-11-25 07:48:43,612 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@f36472c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:48:43, skipping insertion in model container
[2020-11-25 07:48:43,613 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:48:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 07:48:43,647 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:48:43 NWAContainer
[2020-11-25 07:48:43,648 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 07:48:43,648 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 07:48:43,648 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 07:48:43,649 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 07:48:43,649 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:48:43" (3/4) ...
[2020-11-25 07:48:43,650 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@af40a1a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:48:43, skipping insertion in model container
[2020-11-25 07:48:43,650 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:48:43" (4/4) ...
[2020-11-25 07:48:43,653 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 07:48:43,657 INFO  L110   BuchiProductObserver]: Initial RCFG 2185 locations, 2924 edges
[2020-11-25 07:48:43,657 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 07:48:43,669 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 07:48:45,149 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 07:48:45,156 INFO  L110   BuchiProductObserver]: BuchiProgram size 5340 locations, 9458 edges
[2020-11-25 07:48:45,156 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:48:45 BoogieIcfgContainer
[2020-11-25 07:48:45,156 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 07:48:45,157 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 07:48:45,157 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 07:48:45,158 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 07:48:45,159 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:48:45" (1/1) ...
[2020-11-25 07:48:45,298 INFO  L313           BlockEncoder]: Initial Icfg 5340 locations, 9458 edges
[2020-11-25 07:48:45,298 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 07:48:45,299 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 07:48:45,299 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 07:48:45,300 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 07:48:45,315 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 15 locations because of local infeasibility
[2020-11-25 07:48:45,329 INFO  L70        RemoveSinkStates]: Removed 150 edges and 91 locations by removing sink states
[2020-11-25 07:48:45,346 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 07:48:45,352 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 07:48:45,357 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 07:48:45,358 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 07:48:45,363 INFO  L313           BlockEncoder]: Encoded RCFG 5214 locations, 9129 edges
[2020-11-25 07:48:45,363 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:48:45 BasicIcfg
[2020-11-25 07:48:45,363 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 07:48:45,364 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 07:48:45,364 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 07:48:45,366 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 07:48:45,367 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:48:45,367 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:48:42" (1/6) ...
[2020-11-25 07:48:45,368 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@47475cd0 and model type ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:48:45, skipping insertion in model container
[2020-11-25 07:48:45,368 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:48:45,369 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:48:42" (2/6) ...
[2020-11-25 07:48:45,369 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@47475cd0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:48:45, skipping insertion in model container
[2020-11-25 07:48:45,369 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:48:45,369 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:48:43" (3/6) ...
[2020-11-25 07:48:45,369 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@47475cd0 and model type ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:48:45, skipping insertion in model container
[2020-11-25 07:48:45,369 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:48:45,370 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:48:43" (4/6) ...
[2020-11-25 07:48:45,370 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@47475cd0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:48:45, skipping insertion in model container
[2020-11-25 07:48:45,370 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:48:45,370 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:48:45" (5/6) ...
[2020-11-25 07:48:45,370 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@47475cd0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 07:48:45, skipping insertion in model container
[2020-11-25 07:48:45,370 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:48:45,371 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:48:45" (6/6) ...
[2020-11-25 07:48:45,372 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transferfrom-fail.bpl_BEv2
[2020-11-25 07:48:45,419 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 07:48:45,419 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 07:48:45,419 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 07:48:45,419 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 07:48:45,419 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 07:48:45,420 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 07:48:45,420 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 07:48:45,420 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 07:48:45,420 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 07:48:45,492 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5214 states.
[2020-11-25 07:48:45,545 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:45,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:45,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:45,562 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:45,562 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:45,562 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 07:48:45,562 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5214 states.
[2020-11-25 07:48:45,590 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:45,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:45,590 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:45,592 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:45,592 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND TRUE   revert
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:45,610 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:45,610 INFO  L82        PathProgramCache]: Analyzing trace with hash 1619093345, now seen corresponding path program 1 times
[2020-11-25 07:48:45,615 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:45,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:45,681 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:48:45,684 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:45,684 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:48:45,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:45,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:48:45,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:48:45,970 INFO  L87              Difference]: Start difference. First operand 5214 states. Second operand 3 states.
[2020-11-25 07:48:46,244 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:46,244 INFO  L93              Difference]: Finished difference Result 3710 states and 4269 transitions.
[2020-11-25 07:48:46,244 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:48:46,246 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3710 states and 4269 transitions.
[2020-11-25 07:48:46,271 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:46,303 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3710 states to 3710 states and 4269 transitions.
[2020-11-25 07:48:46,304 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 07:48:46,308 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1102
[2020-11-25 07:48:46,308 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3710 states and 4269 transitions.
[2020-11-25 07:48:46,318 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:46,318 INFO  L728         BuchiCegarLoop]: Abstraction has 3710 states and 4269 transitions.
[2020-11-25 07:48:46,338 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3710 states and 4269 transitions.
[2020-11-25 07:48:46,400 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3710 to 3710.
[2020-11-25 07:48:46,401 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3710 states.
[2020-11-25 07:48:46,409 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3710 states to 3710 states and 4269 transitions.
[2020-11-25 07:48:46,410 INFO  L751         BuchiCegarLoop]: Abstraction has 3710 states and 4269 transitions.
[2020-11-25 07:48:46,411 INFO  L631         BuchiCegarLoop]: Abstraction has 3710 states and 4269 transitions.
[2020-11-25 07:48:46,411 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 07:48:46,411 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3710 states and 4269 transitions.
[2020-11-25 07:48:46,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:46,423 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:46,423 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:46,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:46,426 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND TRUE   revert
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND TRUE   !(sender_s323 != null)
[L3372]              revert := true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND TRUE   revert
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND TRUE   !(sender_s323 != null)
[L3372]              revert := true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND TRUE   revert
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:46,431 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:46,431 INFO  L82        PathProgramCache]: Analyzing trace with hash 1056076640, now seen corresponding path program 1 times
[2020-11-25 07:48:46,432 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:46,445 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:46,472 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:48:46,472 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:46,472 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:48:46,473 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:46,473 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:48:46,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:48:46,474 INFO  L87              Difference]: Start difference. First operand 3710 states and 4269 transitions. cyclomatic complexity: 561 Second operand 4 states.
[2020-11-25 07:48:47,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:47,126 INFO  L93              Difference]: Finished difference Result 4739 states and 5338 transitions.
[2020-11-25 07:48:47,126 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:48:47,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4739 states and 5338 transitions.
[2020-11-25 07:48:47,140 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:48:47,155 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4739 states to 4485 states and 5042 transitions.
[2020-11-25 07:48:47,156 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1341
[2020-11-25 07:48:47,157 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1353
[2020-11-25 07:48:47,157 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4485 states and 5042 transitions.
[2020-11-25 07:48:47,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:47,163 INFO  L728         BuchiCegarLoop]: Abstraction has 4485 states and 5042 transitions.
[2020-11-25 07:48:47,167 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4485 states and 5042 transitions.
[2020-11-25 07:48:47,201 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4485 to 4013.
[2020-11-25 07:48:47,201 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4013 states.
[2020-11-25 07:48:47,205 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4013 states to 4013 states and 4449 transitions.
[2020-11-25 07:48:47,205 INFO  L751         BuchiCegarLoop]: Abstraction has 4013 states and 4449 transitions.
[2020-11-25 07:48:47,205 INFO  L631         BuchiCegarLoop]: Abstraction has 4013 states and 4449 transitions.
[2020-11-25 07:48:47,205 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 07:48:47,205 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4013 states and 4449 transitions.
[2020-11-25 07:48:47,211 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:48:47,211 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:47,211 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:47,214 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:47,214 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:47,220 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:47,220 INFO  L82        PathProgramCache]: Analyzing trace with hash 1061050912, now seen corresponding path program 1 times
[2020-11-25 07:48:47,220 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:47,248 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:47,521 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-11-25 07:48:47,521 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:47,521 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 07:48:47,522 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:47,522 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 07:48:47,522 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=301, Unknown=0, NotChecked=0, Total=342
[2020-11-25 07:48:47,523 INFO  L87              Difference]: Start difference. First operand 4013 states and 4449 transitions. cyclomatic complexity: 438 Second operand 19 states.
[2020-11-25 07:48:50,357 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:50,358 INFO  L93              Difference]: Finished difference Result 4128 states and 4584 transitions.
[2020-11-25 07:48:50,358 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 07:48:50,358 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4128 states and 4584 transitions.
[2020-11-25 07:48:50,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:48:50,378 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4128 states to 4128 states and 4584 transitions.
[2020-11-25 07:48:50,378 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1297
[2020-11-25 07:48:50,379 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1297
[2020-11-25 07:48:50,379 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4128 states and 4584 transitions.
[2020-11-25 07:48:50,382 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:50,382 INFO  L728         BuchiCegarLoop]: Abstraction has 4128 states and 4584 transitions.
[2020-11-25 07:48:50,385 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4128 states and 4584 transitions.
[2020-11-25 07:48:50,412 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4128 to 3848.
[2020-11-25 07:48:50,412 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3848 states.
[2020-11-25 07:48:50,416 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3848 states to 3848 states and 4241 transitions.
[2020-11-25 07:48:50,416 INFO  L751         BuchiCegarLoop]: Abstraction has 3848 states and 4241 transitions.
[2020-11-25 07:48:50,417 INFO  L631         BuchiCegarLoop]: Abstraction has 3848 states and 4241 transitions.
[2020-11-25 07:48:50,417 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 07:48:50,417 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3848 states and 4241 transitions.
[2020-11-25 07:48:50,421 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:50,421 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:50,421 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:50,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:50,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND TRUE   __exception
[L1209]              __tmp__Balance := Balance;
[L1210]              __tmp__DType := DType;
[L1211]              __tmp__Alloc := Alloc;
[L1212]              __tmp__balance_ADDR := balance_ADDR;
[L1213]              __tmp__M_Ref_int := M_Ref_int;
[L1214]              __tmp__sum__balances0 := sum__balances0;
[L1215]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1216]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1217]              __tmp__sum__allowances1 := sum__allowances1;
[L1218]              __tmp__M_Ref_bool := M_Ref_bool;
[L1219]              __tmp__sum_minters2 := sum_minters2;
[L1220]              __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L1221]              __tmp__Length := Length;
[L1222]              __tmp__now := now;
[L1223]              __tmp___balances_ERC20 := _balances_ERC20;
[L1224]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1225]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1226]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1227]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1228]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1229]              __tmp__governance_ULU := governance_ULU;
[L1230]              __tmp__minters_ULU := minters_ULU;
[L1231]              __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L1232]              __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L1233]  CALL        call ULU_ULU__fail(this, msgsender_MSG, msgvalue_MSG);
[L3788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2742]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2727]              assume msgsender_MSG != null;
[L2728]              __tmp__Balance[this] := 0;
[L2742]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(revert)
[L3788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3789]  COND FALSE  !(revert)
[L3792]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2710]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2695]              assume msgsender_MSG != null;
[L2696]              __tmp__Balance[this] := 0;
[L2710]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2711]  COND FALSE  !(revert)
[L3792]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3793]  COND FALSE  !(revert)
[L3796]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2796]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2742]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2727]              assume msgsender_MSG != null;
[L2728]              __tmp__Balance[this] := 0;
[L2742]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(revert)
[L2796]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2797]  COND FALSE  !(revert)
[L2800]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2710]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2695]              assume msgsender_MSG != null;
[L2696]              __tmp__Balance[this] := 0;
[L2710]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2711]  COND FALSE  !(revert)
[L2800]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]  COND FALSE  !(revert)
[L2804]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              __tmp__Balance[this] := 0;
[L2773]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2774]              __tmp__sum__balances0[this] := 0;
[L2775]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              __tmp__sum__allowances1[this] := 0;
[L2777]              __tmp___totalSupply_ERC20[this] := 0;
[L2804]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2805]  COND FALSE  !(revert)
[L3796]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3797]  COND FALSE  !(revert)
[L3800]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3564]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2710]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2695]              assume msgsender_MSG != null;
[L2696]              __tmp__Balance[this] := 0;
[L2710]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2711]  COND FALSE  !(revert)
[L3564]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3565]  COND FALSE  !(revert)
[L3568]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3537]              assume msgsender_MSG != null;
[L3538]              __tmp__Balance[this] := 0;
[L3539]              __tmp___name_ERC20Detailed[this] := 26060051;
[L3540]              __tmp___symbol_ERC20Detailed[this] := 26060051;
[L3541]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3543]              __tmp___name_ERC20Detailed[this] := name_s484;
[L3544]              __tmp___symbol_ERC20Detailed[this] := symbol_s484;
[L3545]              __tmp___decimals_ERC20Detailed[this] := decimals_s484;
[L3568]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3569]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call ULU_ULU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3761]              assume msgsender_MSG != null;
[L3762]              __tmp__Balance[this] := 0;
[L3763]              __tmp__governance_ULU[this] := null;
[L3764]              __tmp__minters_ULU[this] := zeroRefboolArr();
[L3765]              __tmp__GRACE_PERIOD_ULU[this] := 2;
[L3766]              __tmp__pendingAddMinters_ULU[this] := zeroRefintArr();
[L3767]              __tmp__sum_pendingAddMinters3[this] := 0;
[L3769]              __tmp__governance_ULU[this] := msgsender_MSG;
[L3804]  RET         call ULU_ULU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L1233]  RET         call ULU_ULU__fail(this, msgsender_MSG, msgvalue_MSG);
[L1234]              assume revert || gas < 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:50,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:50,428 INFO  L82        PathProgramCache]: Analyzing trace with hash -1811708491, now seen corresponding path program 1 times
[2020-11-25 07:48:50,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:50,437 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:50,497 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-25 07:48:50,497 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:50,497 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:48:50,498 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:50,498 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:48:50,498 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:48:50,498 INFO  L87              Difference]: Start difference. First operand 3848 states and 4241 transitions. cyclomatic complexity: 396 Second operand 4 states.
[2020-11-25 07:48:50,869 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:50,869 INFO  L93              Difference]: Finished difference Result 4762 states and 5395 transitions.
[2020-11-25 07:48:50,869 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:48:50,869 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4762 states and 5395 transitions.
[2020-11-25 07:48:50,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 07:48:50,894 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4762 states to 4635 states and 5265 transitions.
[2020-11-25 07:48:50,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1431
[2020-11-25 07:48:50,895 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1431
[2020-11-25 07:48:50,895 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4635 states and 5265 transitions.
[2020-11-25 07:48:50,898 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:50,898 INFO  L728         BuchiCegarLoop]: Abstraction has 4635 states and 5265 transitions.
[2020-11-25 07:48:50,901 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4635 states and 5265 transitions.
[2020-11-25 07:48:50,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4635 to 3721.
[2020-11-25 07:48:50,926 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3721 states.
[2020-11-25 07:48:50,929 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3721 states to 3721 states and 4110 transitions.
[2020-11-25 07:48:50,930 INFO  L751         BuchiCegarLoop]: Abstraction has 3721 states and 4110 transitions.
[2020-11-25 07:48:50,930 INFO  L631         BuchiCegarLoop]: Abstraction has 3721 states and 4110 transitions.
[2020-11-25 07:48:50,930 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 07:48:50,930 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3721 states and 4110 transitions.
[2020-11-25 07:48:50,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:50,934 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:50,934 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:50,936 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:50,936 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND TRUE   choice == 19
[L5688]              gas := gas - 21000;
[L5689]  COND TRUE   gas >= 0
[L5690]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5691]              assume msgvalue_MSG == 0;
[L5692]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L556]               havoc __exception;
[L557]               revert := false;
[L558]   COND FALSE  !(__exception)
[L586]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2964]  COND FALSE  !(DType[this] == ULU)
[L2969]  COND TRUE   DType[this] == ERC20
[L2970]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2970]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L2977]  COND TRUE   DType[this] == ULU
[L2978]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L2978]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2979]  COND FALSE  !(revert)
[L2990]              __ret_0_ := true;
[L586]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L587]               assume !revert && gas >= 0;
[L5692]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:50,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:50,941 INFO  L82        PathProgramCache]: Analyzing trace with hash 8159965, now seen corresponding path program 1 times
[2020-11-25 07:48:50,941 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:50,954 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:51,005 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-11-25 07:48:51,006 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:51,006 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:48:51,006 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:51,006 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:48:51,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:48:51,006 INFO  L87              Difference]: Start difference. First operand 3721 states and 4110 transitions. cyclomatic complexity: 392 Second operand 3 states.
[2020-11-25 07:48:51,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:51,028 INFO  L93              Difference]: Finished difference Result 3729 states and 4118 transitions.
[2020-11-25 07:48:51,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:48:51,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3729 states and 4118 transitions.
[2020-11-25 07:48:51,033 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:51,040 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3729 states to 3729 states and 4118 transitions.
[2020-11-25 07:48:51,040 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1151
[2020-11-25 07:48:51,041 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1151
[2020-11-25 07:48:51,041 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3729 states and 4118 transitions.
[2020-11-25 07:48:51,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:51,043 INFO  L728         BuchiCegarLoop]: Abstraction has 3729 states and 4118 transitions.
[2020-11-25 07:48:51,046 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3729 states and 4118 transitions.
[2020-11-25 07:48:51,061 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3729 to 3723.
[2020-11-25 07:48:51,061 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3723 states.
[2020-11-25 07:48:51,064 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3723 states to 3723 states and 4112 transitions.
[2020-11-25 07:48:51,064 INFO  L751         BuchiCegarLoop]: Abstraction has 3723 states and 4112 transitions.
[2020-11-25 07:48:51,064 INFO  L631         BuchiCegarLoop]: Abstraction has 3723 states and 4112 transitions.
[2020-11-25 07:48:51,064 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 07:48:51,064 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3723 states and 4112 transitions.
[2020-11-25 07:48:51,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:51,067 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:51,067 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:51,069 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:51,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND TRUE   choice == 19
[L5688]              gas := gas - 21000;
[L5689]  COND TRUE   gas >= 0
[L5690]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5691]              assume msgvalue_MSG == 0;
[L5692]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L556]               havoc __exception;
[L557]               revert := false;
[L558]   COND FALSE  !(__exception)
[L586]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2964]  COND FALSE  !(DType[this] == ULU)
[L2969]  COND TRUE   DType[this] == ERC20
[L2970]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2970]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L2977]  COND FALSE  !(DType[this] == ULU)
[L2982]  COND TRUE   DType[this] == ERC20
[L2983]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L2983]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2984]  COND FALSE  !(revert)
[L2990]              __ret_0_ := true;
[L586]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L587]               assume !revert && gas >= 0;
[L5692]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:51,074 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:51,074 INFO  L82        PathProgramCache]: Analyzing trace with hash 1393459211, now seen corresponding path program 1 times
[2020-11-25 07:48:51,074 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:51,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:51,146 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-11-25 07:48:51,147 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:51,147 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 07:48:51,147 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:51,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 07:48:51,147 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 07:48:51,147 INFO  L87              Difference]: Start difference. First operand 3723 states and 4112 transitions. cyclomatic complexity: 392 Second operand 6 states.
[2020-11-25 07:48:51,199 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:51,199 INFO  L93              Difference]: Finished difference Result 3745 states and 4132 transitions.
[2020-11-25 07:48:51,199 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 07:48:51,199 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3745 states and 4132 transitions.
[2020-11-25 07:48:51,205 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:51,212 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3745 states to 3701 states and 4082 transitions.
[2020-11-25 07:48:51,212 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1140
[2020-11-25 07:48:51,212 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1140
[2020-11-25 07:48:51,212 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3701 states and 4082 transitions.
[2020-11-25 07:48:51,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:51,215 INFO  L728         BuchiCegarLoop]: Abstraction has 3701 states and 4082 transitions.
[2020-11-25 07:48:51,218 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3701 states and 4082 transitions.
[2020-11-25 07:48:51,234 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3701 to 3701.
[2020-11-25 07:48:51,234 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3701 states.
[2020-11-25 07:48:51,237 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3701 states to 3701 states and 4082 transitions.
[2020-11-25 07:48:51,237 INFO  L751         BuchiCegarLoop]: Abstraction has 3701 states and 4082 transitions.
[2020-11-25 07:48:51,237 INFO  L631         BuchiCegarLoop]: Abstraction has 3701 states and 4082 transitions.
[2020-11-25 07:48:51,237 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 07:48:51,237 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3701 states and 4082 transitions.
[2020-11-25 07:48:51,241 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:51,241 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:51,241 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:51,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:51,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND TRUE   choice == 19
[L5688]              gas := gas - 21000;
[L5689]  COND TRUE   gas >= 0
[L5690]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5691]              assume msgvalue_MSG == 0;
[L5692]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L556]               havoc __exception;
[L557]               revert := false;
[L558]   COND FALSE  !(__exception)
[L586]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2964]  COND TRUE   DType[this] == ULU
[L2965]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2965]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2977]  COND TRUE   DType[this] == ULU
[L2978]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L2978]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2979]  COND FALSE  !(revert)
[L2990]              __ret_0_ := true;
[L586]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L587]               assume !revert && gas >= 0;
[L5692]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND FALSE  !(DType[this] == ULU)
[L3095]  COND TRUE   DType[this] == ERC20
[L3096]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3096]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3097]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:51,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:51,245 INFO  L82        PathProgramCache]: Analyzing trace with hash 513831855, now seen corresponding path program 1 times
[2020-11-25 07:48:51,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:51,260 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:51,347 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 115 trivial. 0 not checked.
[2020-11-25 07:48:51,348 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:51,348 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:48:51,349 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:51,349 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:48:51,349 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:48:51,349 INFO  L87              Difference]: Start difference. First operand 3701 states and 4082 transitions. cyclomatic complexity: 384 Second operand 3 states.
[2020-11-25 07:48:51,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:51,383 INFO  L93              Difference]: Finished difference Result 3719 states and 4104 transitions.
[2020-11-25 07:48:51,383 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:48:51,383 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3719 states and 4104 transitions.
[2020-11-25 07:48:51,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:51,401 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3719 states to 3719 states and 4104 transitions.
[2020-11-25 07:48:51,401 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1146
[2020-11-25 07:48:51,402 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1146
[2020-11-25 07:48:51,402 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3719 states and 4104 transitions.
[2020-11-25 07:48:51,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:51,405 INFO  L728         BuchiCegarLoop]: Abstraction has 3719 states and 4104 transitions.
[2020-11-25 07:48:51,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3719 states and 4104 transitions.
[2020-11-25 07:48:51,433 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3719 to 3713.
[2020-11-25 07:48:51,433 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3713 states.
[2020-11-25 07:48:51,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3713 states to 3713 states and 4096 transitions.
[2020-11-25 07:48:51,438 INFO  L751         BuchiCegarLoop]: Abstraction has 3713 states and 4096 transitions.
[2020-11-25 07:48:51,438 INFO  L631         BuchiCegarLoop]: Abstraction has 3713 states and 4096 transitions.
[2020-11-25 07:48:51,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 07:48:51,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3713 states and 4096 transitions.
[2020-11-25 07:48:51,443 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:51,443 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:51,443 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:51,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:51,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND TRUE   choice == 19
[L5688]              gas := gas - 21000;
[L5689]  COND TRUE   gas >= 0
[L5690]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5691]              assume msgvalue_MSG == 0;
[L5692]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L556]               havoc __exception;
[L557]               revert := false;
[L558]   COND FALSE  !(__exception)
[L586]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2964]  COND TRUE   DType[this] == ULU
[L2965]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2965]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2977]  COND TRUE   DType[this] == ULU
[L2978]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L2978]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2979]  COND FALSE  !(revert)
[L2990]              __ret_0_ := true;
[L586]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L587]               assume !revert && gas >= 0;
[L5692]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:51,450 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:51,450 INFO  L82        PathProgramCache]: Analyzing trace with hash 1155348692, now seen corresponding path program 1 times
[2020-11-25 07:48:51,451 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:51,471 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:51,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 111 trivial. 0 not checked.
[2020-11-25 07:48:51,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:48:51,676 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 07:48:51,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:51,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 07:48:51,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 07:48:51,677 INFO  L87              Difference]: Start difference. First operand 3713 states and 4096 transitions. cyclomatic complexity: 386 Second operand 15 states.
[2020-11-25 07:48:53,555 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:53,555 INFO  L93              Difference]: Finished difference Result 3762 states and 4150 transitions.
[2020-11-25 07:48:53,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 07:48:53,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3762 states and 4150 transitions.
[2020-11-25 07:48:53,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:53,570 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3762 states to 3762 states and 4150 transitions.
[2020-11-25 07:48:53,570 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1154
[2020-11-25 07:48:53,570 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1154
[2020-11-25 07:48:53,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3762 states and 4150 transitions.
[2020-11-25 07:48:53,572 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:53,572 INFO  L728         BuchiCegarLoop]: Abstraction has 3762 states and 4150 transitions.
[2020-11-25 07:48:53,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3762 states and 4150 transitions.
[2020-11-25 07:48:53,592 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3762 to 3704.
[2020-11-25 07:48:53,592 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3704 states.
[2020-11-25 07:48:53,595 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3704 states to 3704 states and 4087 transitions.
[2020-11-25 07:48:53,595 INFO  L751         BuchiCegarLoop]: Abstraction has 3704 states and 4087 transitions.
[2020-11-25 07:48:53,595 INFO  L631         BuchiCegarLoop]: Abstraction has 3704 states and 4087 transitions.
[2020-11-25 07:48:53,595 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 07:48:53,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3704 states and 4087 transitions.
[2020-11-25 07:48:53,599 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:48:53,599 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:53,599 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:53,600 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:53,600 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND TRUE   choice == 8
[L5758]              gas := gas - 21000;
[L5759]  COND TRUE   gas >= 0
[L5760]              assume amount_s678 >= 0 && amount_s678 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5761]              assume msgvalue_MSG == 0;
[L5762]  CALL        call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1273]              havoc __exception;
[L1274]              revert := false;
[L1275]  COND FALSE  !(__exception)
[L1303]  CALL        call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3852]  COND FALSE  !(!minters_ULU[this][msgsender_MSG])
[L3856]  COND TRUE   DType[this] == ULU
[L3857]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3426]              __var_16 := null;
[L3427]  COND FALSE  !(!(account_s366 != null))
[L3431]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3431]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3432]  COND FALSE  !(revert)
[L3435]              _totalSupply_ERC20[this] := __var_17;
[L3436]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3436]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3437]  COND FALSE  !(revert)
[L3440]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L3441]              _balances_ERC20[this][account_s366] := __var_18;
[L3442]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L3443]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3857]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3858]  COND FALSE  !(revert)
[L1303]  RET         call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1304]              assume !revert && gas >= 0;
[L5762]  RET         call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:53,603 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:53,603 INFO  L82        PathProgramCache]: Analyzing trace with hash 1437959794, now seen corresponding path program 1 times
[2020-11-25 07:48:53,604 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:53,616 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:53,755 INFO  L134       CoverageAnalysis]: Checked inductivity of 121 backedges. 1 proven. 67 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 07:48:53,755 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:48:53,755 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 07:48:53,756 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:53,756 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 07:48:53,756 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 07:48:53,756 INFO  L87              Difference]: Start difference. First operand 3704 states and 4087 transitions. cyclomatic complexity: 386 Second operand 10 states.
[2020-11-25 07:48:54,785 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:54,785 INFO  L93              Difference]: Finished difference Result 3739 states and 4135 transitions.
[2020-11-25 07:48:54,785 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 07:48:54,785 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3739 states and 4135 transitions.
[2020-11-25 07:48:54,792 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:48:54,800 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3739 states to 3739 states and 4135 transitions.
[2020-11-25 07:48:54,800 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1161
[2020-11-25 07:48:54,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1161
[2020-11-25 07:48:54,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3739 states and 4135 transitions.
[2020-11-25 07:48:54,802 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:54,803 INFO  L728         BuchiCegarLoop]: Abstraction has 3739 states and 4135 transitions.
[2020-11-25 07:48:54,806 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3739 states and 4135 transitions.
[2020-11-25 07:48:54,826 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3739 to 3739.
[2020-11-25 07:48:54,826 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3739 states.
[2020-11-25 07:48:54,830 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3739 states to 3739 states and 4135 transitions.
[2020-11-25 07:48:54,830 INFO  L751         BuchiCegarLoop]: Abstraction has 3739 states and 4135 transitions.
[2020-11-25 07:48:54,830 INFO  L631         BuchiCegarLoop]: Abstraction has 3739 states and 4135 transitions.
[2020-11-25 07:48:54,830 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 07:48:54,830 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3739 states and 4135 transitions.
[2020-11-25 07:48:54,835 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:48:54,835 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:54,835 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:54,836 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:54,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:54,840 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:54,841 INFO  L82        PathProgramCache]: Analyzing trace with hash -540146432, now seen corresponding path program 1 times
[2020-11-25 07:48:54,841 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:54,857 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:55,000 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 07:48:55,000 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:48:55,000 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 07:48:55,001 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:55,001 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 07:48:55,001 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 07:48:55,001 INFO  L87              Difference]: Start difference. First operand 3739 states and 4135 transitions. cyclomatic complexity: 402 Second operand 16 states.
[2020-11-25 07:48:56,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:48:56,758 INFO  L93              Difference]: Finished difference Result 3805 states and 4231 transitions.
[2020-11-25 07:48:56,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 07:48:56,758 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3805 states and 4231 transitions.
[2020-11-25 07:48:56,765 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:48:56,772 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3805 states to 3805 states and 4231 transitions.
[2020-11-25 07:48:56,772 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1172
[2020-11-25 07:48:56,772 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1172
[2020-11-25 07:48:56,772 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3805 states and 4231 transitions.
[2020-11-25 07:48:56,775 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:48:56,775 INFO  L728         BuchiCegarLoop]: Abstraction has 3805 states and 4231 transitions.
[2020-11-25 07:48:56,778 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3805 states and 4231 transitions.
[2020-11-25 07:48:56,794 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3805 to 3760.
[2020-11-25 07:48:56,794 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3760 states.
[2020-11-25 07:48:56,798 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3760 states to 3760 states and 4184 transitions.
[2020-11-25 07:48:56,798 INFO  L751         BuchiCegarLoop]: Abstraction has 3760 states and 4184 transitions.
[2020-11-25 07:48:56,798 INFO  L631         BuchiCegarLoop]: Abstraction has 3760 states and 4184 transitions.
[2020-11-25 07:48:56,798 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 07:48:56,798 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3760 states and 4184 transitions.
[2020-11-25 07:48:56,802 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:48:56,802 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:48:56,802 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:48:56,803 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:48:56,803 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:48:56,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:48:56,807 INFO  L82        PathProgramCache]: Analyzing trace with hash -2016642179, now seen corresponding path program 1 times
[2020-11-25 07:48:56,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:48:56,835 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:48:57,412 INFO  L134       CoverageAnalysis]: Checked inductivity of 133 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 132 trivial. 0 not checked.
[2020-11-25 07:48:57,412 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:48:57,412 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 07:48:57,413 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:48:57,413 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 07:48:57,413 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=954, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 07:48:57,413 INFO  L87              Difference]: Start difference. First operand 3760 states and 4184 transitions. cyclomatic complexity: 434 Second operand 33 states.
[2020-11-25 07:49:00,862 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:49:00,862 INFO  L93              Difference]: Finished difference Result 2147 states and 2410 transitions.
[2020-11-25 07:49:00,862 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 07:49:00,862 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2147 states and 2410 transitions.
[2020-11-25 07:49:00,865 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 07:49:00,866 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2147 states to 0 states and 0 transitions.
[2020-11-25 07:49:00,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 07:49:00,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 07:49:00,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 07:49:00,866 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:49:00,866 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 07:49:00,866 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 07:49:00,866 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 07:49:00,866 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 07:49:00,866 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 07:49:00,866 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 07:49:00,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 07:49:00,869 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:49:00 BasicIcfg
[2020-11-25 07:49:00,869 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 07:49:00,869 INFO  L168              Benchmark]: Toolchain (without parser) took 18287.58 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 935.2 MB in the beginning and 1.1 GB in the end (delta: -184.8 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,870 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,870 INFO  L168              Benchmark]: Boogie Preprocessor took 119.81 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,871 INFO  L168              Benchmark]: UtopiaSpecLang took 63.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,871 INFO  L168              Benchmark]: Boogie Printer took 19.11 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,871 INFO  L168              Benchmark]: RCFGBuilder took 824.14 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 758.0 MB in the end (delta: 150.4 MB). Peak memory consumption was 150.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,871 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.18 ms. Allocated memory is still 1.0 GB. Free memory was 758.0 MB in the beginning and 754.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,872 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1508.70 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 194.5 MB). Free memory was 754.4 MB in the beginning and 770.0 MB in the end (delta: -15.6 MB). Peak memory consumption was 178.9 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,872 INFO  L168              Benchmark]: BlockEncodingV2 took 206.42 ms. Allocated memory is still 1.2 GB. Free memory was 770.0 MB in the beginning and 689.7 MB in the end (delta: 80.3 MB). Peak memory consumption was 80.3 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,872 INFO  L168              Benchmark]: BuchiAutomizer took 15505.59 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 689.7 MB in the beginning and 1.1 GB in the end (delta: -430.3 MB). Peak memory consumption was 697.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:49:00,875 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5340 locations, 9458 edges
  - StatisticsResult: Encoded RCFG
    5214 locations, 9129 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 119.81 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.11 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 824.14 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 758.0 MB in the end (delta: 150.4 MB). Peak memory consumption was 150.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.18 ms. Allocated memory is still 1.0 GB. Free memory was 758.0 MB in the beginning and 754.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1508.70 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 194.5 MB). Free memory was 754.4 MB in the beginning and 770.0 MB in the end (delta: -15.6 MB). Peak memory consumption was 178.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 206.42 ms. Allocated memory is still 1.2 GB. Free memory was 770.0 MB in the beginning and 689.7 MB in the end (delta: 80.3 MB). Peak memory consumption was 80.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15505.59 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 689.7 MB in the beginning and 1.1 GB in the end (delta: -430.3 MB). Peak memory consumption was 697.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2185 locations, 2924 edges
  - StatisticsResult: BuchiProgram size
    5340 locations, 9458 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 33 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 15.4s and 12 iterations.  TraceHistogramMax:3. Analysis of lassos took 2.2s. Construction of modules took 9.0s. BÃ¼chi inclusion checks took 3.2s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 10 MinimizatonAttempts, 1781 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4013 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 41785 SDtfs, 32368 SDslu, 80339 SDs, 0 SdLazy, 181252 SolverSat, 4743 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
