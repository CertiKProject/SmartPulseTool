This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:35:21,828 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:35:21,829 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:35:21,839 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:35:21,839 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:35:21,840 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:35:21,841 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:35:21,842 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:35:21,843 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:35:21,844 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:35:21,845 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:35:21,845 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:35:21,846 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:35:21,846 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:35:21,847 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:35:21,848 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:35:21,848 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:35:21,849 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:35:21,851 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:35:21,852 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:35:21,852 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:35:21,853 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:35:21,855 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:35:21,855 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:35:21,855 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:35:21,855 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:35:21,856 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:35:21,856 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:35:21,856 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:35:21,857 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:35:21,857 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:35:21,858 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:35:21,858 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:35:21,859 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:35:21,859 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:35:21,859 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:35:21,860 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:35:21,860 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:35:21,860 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:35:21,861 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:35:21,861 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:35:21,861 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:35:21,869 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:35:21,869 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:35:21,870 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:35:21,870 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:35:21,870 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:35:21,870 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:35:21,870 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:35:21,870 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:35:21,870 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:35:21,871 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:35:21,871 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:35:21,871 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:35:21,872 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:35:21,872 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:35:21,892 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:35:21,901 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:35:21,904 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:35:21,905 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:35:21,906 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:35:21,906 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl
[2020-11-25 12:35:21,906 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl'
[2020-11-25 12:35:21,988 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:35:21,989 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:35:21,989 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:35:21,989 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:35:21,989 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:35:22,005 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,007 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,041 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,041 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,061 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,071 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,078 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,087 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:35:22,087 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:35:22,088 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:35:22,089 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:35:22,093 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/1) ...
[2020-11-25 12:35:22,114 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(COM.transferFrom(from, to, value), from != to && (value > _balances_COM[this][from] || value > _allowed_COM[this][from][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][from] >= 0 &&  _balances_COM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_COM[this][from][msg.sender] >= 0 && _allowed_COM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transferFrom)))
[2020-11-25 12:35:22,119 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(COM.transferFrom(from, to, value), from != to && (value > _balances_COM[this][from] || value > _allowed_COM[this][from][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][from] >= 0 &&  _balances_COM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_COM[this][from][msg.sender] >= 0 && _allowed_COM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transferFrom)))
[2020-11-25 12:35:22,130 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(COM.transferFrom(from, to, value), from != to && (value > _balances_COM[this][from] || value > _allowed_COM[this][from][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][from] >= 0 &&  _balances_COM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_COM[this][from][msg.sender] >= 0 && _allowed_COM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transferFrom)))
[2020-11-25 12:35:22,138 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s702!=to_s702 && ( ( value_s702>_balances_COM[this][from_s702] || value_s702>_allowed_COM[this][from_s702][msg.sender] ) || ( _balances_COM[this][to_s702] + value_s702 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s702>=0 ) && value_s702<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_COM[this][to_s702]>=0 ) && _balances_COM[this][to_s702]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_COM[this][from_s702]>=0 ) && _balances_COM[this][from_s702]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_COM[this][from_s702][msg.sender]>=0 ) && _allowed_COM[this][from_s702][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>],IdentifierExpression[to_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[to_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IdentifierExpression[value_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[to_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[to_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[from_s702,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:35:22,143 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(COM.transferFrom(from, to, value), from != to && (value > _balances_COM[this][from] || value > _allowed_COM[this][from][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][from] >= 0 &&  _balances_COM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_COM[this][from][msg.sender] >= 0 && _allowed_COM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transferFrom)))
[2020-11-25 12:35:22,143 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_COM0) ==> ( <>AP(fail_transferFrom_COM0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:35:22,151 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:35:22 PropertyContainer
[2020-11-25 12:35:22,151 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:35:22,151 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:35:22,152 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:35:22,152 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:35:22,152 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/2) ...
[2020-11-25 12:35:22,153 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:35:22,153 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:35:22,167 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:35:22" (2/2) ...
[2020-11-25 12:35:22,167 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:35:22,167 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:35:22,167 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:35:22,167 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:35:22,168 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/2) ...
[2020-11-25 12:35:22,218 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:35:22,218 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 12:35:22,218 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 12:35:22,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 12:35:22,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,219 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ceil~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 12:35:22,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 12:35:22,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 12:35:22,220 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 12:35:22,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 12:35:22,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM_NoBaseCtor__success
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM
[2020-11-25 12:35:22,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM
[2020-11-25 12:35:22,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM
[2020-11-25 12:35:22,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM
[2020-11-25 12:35:22,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM
[2020-11-25 12:35:22,221 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM
[2020-11-25 12:35:22,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM
[2020-11-25 12:35:22,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM
[2020-11-25 12:35:22,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnYes~address~uint256_COM__success
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnNo~address~uint256_COM__success
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM
[2020-11-25 12:35:22,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM
[2020-11-25 12:35:22,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnYes~address~address~uint256_COM__success
[2020-11-25 12:35:22,222 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnNo~address~address~uint256_COM__success
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM
[2020-11-25 12:35:22,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM
[2020-11-25 12:35:22,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_COM__success
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM
[2020-11-25 12:35:22,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_COM__success
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM
[2020-11-25 12:35:22,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:35:22,223 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_COM
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:35:22,224 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,225 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure ceil~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 12:35:22,226 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM_NoBaseCtor__fail
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM__success
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM__fail
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM__success
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM__fail
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM__success
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM__fail
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM__success
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM__fail
[2020-11-25 12:35:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM__success
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM__fail
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM__success
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM__fail
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM__success
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM__fail
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnYes~address~uint256_COM__fail
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnNo~address~uint256_COM__fail
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM__success
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM__fail
[2020-11-25 12:35:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM__success
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM__fail
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnYes~address~address~uint256_COM__fail
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnNo~address~address~uint256_COM__fail
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM__success
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM__fail
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM__success
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM__fail
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_COM__fail
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM__success
[2020-11-25 12:35:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM__fail
[2020-11-25 12:35:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_COM__fail
[2020-11-25 12:35:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM__success
[2020-11-25 12:35:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM__fail
[2020-11-25 12:35:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:35:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:35:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:35:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:35:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:35:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 12:35:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ceil~uint256~uint256_SafeMath__fail
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ceil~uint256~uint256_SafeMath__success
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 12:35:22,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM_NoBaseCtor__fail
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM_NoBaseCtor__success
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM__fail
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM__success
[2020-11-25 12:35:22,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM__fail
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM__success
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM__fail
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM__success
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM__fail
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM__success
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM__fail
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM__success
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM__fail
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM__success
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM__fail
[2020-11-25 12:35:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM__success
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnYes~address~uint256_COM__fail
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnYes~address~uint256_COM__success
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnNo~address~uint256_COM__fail
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnNo~address~uint256_COM__success
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM__fail
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM__success
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM__fail
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM__success
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnYes~address~address~uint256_COM__fail
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnYes~address~address~uint256_COM__success
[2020-11-25 12:35:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnNo~address~address~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnNo~address~address~uint256_COM__success
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM__success
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM__success
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_COM__success
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM__success
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_COM__success
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM__fail
[2020-11-25 12:35:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM__success
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 12:35:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 12:35:22,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 12:35:22,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_COM
[2020-11-25 12:35:22,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:35:22,238 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:35:22,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:35:22,523 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:35:22,523 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:35:22,865 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:35:22,865 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 12:35:22,867 INFO  L202        PluginConnector]: Adding new model COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:35:22 BoogieIcfgContainer
[2020-11-25 12:35:22,867 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:35:22" (2/2) ...
[2020-11-25 12:35:22,867 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:35:22,867 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4089860c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:35:22, skipping insertion in model container
[2020-11-25 12:35:22,868 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:35:22,868 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:35:22,868 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:35:22,869 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:35:22,869 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/3) ...
[2020-11-25 12:35:22,870 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@f7843b2 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:35:22, skipping insertion in model container
[2020-11-25 12:35:22,870 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:35:22" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:35:22,906 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:35:22 NWAContainer
[2020-11-25 12:35:22,906 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:35:22,907 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:35:22,907 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:35:22,907 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:35:22,908 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:35:22" (3/4) ...
[2020-11-25 12:35:22,909 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@248075ad and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:35:22, skipping insertion in model container
[2020-11-25 12:35:22,909 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:35:22" (4/4) ...
[2020-11-25 12:35:22,912 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:35:22,915 INFO  L110   BuchiProductObserver]: Initial RCFG 1653 locations, 2145 edges
[2020-11-25 12:35:22,916 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:35:22,926 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:35:24,150 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:35:24,156 INFO  L110   BuchiProductObserver]: BuchiProgram size 3968 locations, 6926 edges
[2020-11-25 12:35:24,156 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:35:24 BoogieIcfgContainer
[2020-11-25 12:35:24,156 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:35:24,156 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:35:24,156 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:35:24,158 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:35:24,158 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:35:24" (1/1) ...
[2020-11-25 12:35:24,229 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call c_s197 := add~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s197, m_s197);
[2020-11-25 12:35:24,230 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call c_s197 := add~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s197, m_s197);
[2020-11-25 12:35:24,240 INFO  L313           BlockEncoder]: Initial Icfg 3968 locations, 6926 edges
[2020-11-25 12:35:24,240 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:35:24,240 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:35:24,240 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:35:24,241 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:35:24,253 INFO  L70    emoveInfeasibleEdges]: Removed 63 edges and 11 locations because of local infeasibility
[2020-11-25 12:35:24,263 INFO  L70        RemoveSinkStates]: Removed 54 edges and 27 locations by removing sink states
[2020-11-25 12:35:24,274 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:35:24,278 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:35:24,282 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:35:24,282 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:35:24,287 INFO  L313           BlockEncoder]: Encoded RCFG 3900 locations, 6765 edges
[2020-11-25 12:35:24,287 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:35:24 BasicIcfg
[2020-11-25 12:35:24,287 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:35:24,288 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:35:24,288 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:35:24,289 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:35:24,290 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:35:24,290 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:35:21" (1/6) ...
[2020-11-25 12:35:24,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@279cab89 and model type COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:35:24, skipping insertion in model container
[2020-11-25 12:35:24,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:35:24,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:35:22" (2/6) ...
[2020-11-25 12:35:24,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@279cab89 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:35:24, skipping insertion in model container
[2020-11-25 12:35:24,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:35:24,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:35:22" (3/6) ...
[2020-11-25 12:35:24,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@279cab89 and model type COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:35:24, skipping insertion in model container
[2020-11-25 12:35:24,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:35:24,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:35:22" (4/6) ...
[2020-11-25 12:35:24,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@279cab89 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:35:24, skipping insertion in model container
[2020-11-25 12:35:24,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:35:24,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:35:24" (5/6) ...
[2020-11-25 12:35:24,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@279cab89 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:35:24, skipping insertion in model container
[2020-11-25 12:35:24,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:35:24,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:35:24" (6/6) ...
[2020-11-25 12:35:24,295 INFO  L404   chiAutomizerObserver]: Analyzing ICFG COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transferfrom-fail.bpl_BEv2
[2020-11-25 12:35:24,330 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:35:24,330 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:35:24,330 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:35:24,330 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:35:24,330 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:35:24,330 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:35:24,330 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:35:24,330 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:35:24,330 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:35:24,366 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3900 states.
[2020-11-25 12:35:24,416 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:24,417 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:24,417 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:24,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:24,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:24,425 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:35:24,425 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3900 states.
[2020-11-25 12:35:24,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:24,444 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:24,444 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:24,446 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:24,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND TRUE   revert
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:24,460 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:24,460 INFO  L82        PathProgramCache]: Analyzing trace with hash 589392678, now seen corresponding path program 1 times
[2020-11-25 12:35:24,464 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:24,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:24,525 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:35:24,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:24,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:35:24,530 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:24,732 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:35:24,732 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:35:24,733 INFO  L87              Difference]: Start difference. First operand 3900 states. Second operand 4 states.
[2020-11-25 12:35:25,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:25,069 INFO  L93              Difference]: Finished difference Result 2786 states and 3199 transitions.
[2020-11-25 12:35:25,069 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:35:25,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2786 states and 3199 transitions.
[2020-11-25 12:35:25,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:25,103 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2786 states to 2782 states and 3191 transitions.
[2020-11-25 12:35:25,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 12:35:25,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 12:35:25,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2782 states and 3191 transitions.
[2020-11-25 12:35:25,115 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:25,115 INFO  L728         BuchiCegarLoop]: Abstraction has 2782 states and 3191 transitions.
[2020-11-25 12:35:25,133 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2782 states and 3191 transitions.
[2020-11-25 12:35:25,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2782 to 2782.
[2020-11-25 12:35:25,189 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2782 states.
[2020-11-25 12:35:25,194 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2782 states to 2782 states and 3191 transitions.
[2020-11-25 12:35:25,195 INFO  L751         BuchiCegarLoop]: Abstraction has 2782 states and 3191 transitions.
[2020-11-25 12:35:25,195 INFO  L631         BuchiCegarLoop]: Abstraction has 2782 states and 3191 transitions.
[2020-11-25 12:35:25,196 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:35:25,196 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2782 states and 3191 transitions.
[2020-11-25 12:35:25,203 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:25,203 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:25,204 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:25,206 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:25,206 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND TRUE   revert
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND TRUE   !(value_s702 <= _balances_COM[this][from_s702])
[L2658]              revert := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND TRUE   !(value_s702 <= _balances_COM[this][from_s702])
[L2658]              revert := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:25,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:25,211 INFO  L82        PathProgramCache]: Analyzing trace with hash 1343232262, now seen corresponding path program 1 times
[2020-11-25 12:35:25,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:25,220 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:25,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:35:25,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:25,242 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:35:25,243 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:25,244 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:35:25,244 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:35:25,244 INFO  L87              Difference]: Start difference. First operand 2782 states and 3191 transitions. cyclomatic complexity: 411 Second operand 3 states.
[2020-11-25 12:35:25,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:25,308 INFO  L93              Difference]: Finished difference Result 3404 states and 3832 transitions.
[2020-11-25 12:35:25,309 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:35:25,309 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3404 states and 3832 transitions.
[2020-11-25 12:35:25,324 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:25,339 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3404 states to 3404 states and 3832 transitions.
[2020-11-25 12:35:25,340 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 762
[2020-11-25 12:35:25,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 762
[2020-11-25 12:35:25,341 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3404 states and 3832 transitions.
[2020-11-25 12:35:25,345 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:25,345 INFO  L728         BuchiCegarLoop]: Abstraction has 3404 states and 3832 transitions.
[2020-11-25 12:35:25,348 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3404 states and 3832 transitions.
[2020-11-25 12:35:25,378 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3404 to 3022.
[2020-11-25 12:35:25,378 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3022 states.
[2020-11-25 12:35:25,382 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3022 states to 3022 states and 3373 transitions.
[2020-11-25 12:35:25,382 INFO  L751         BuchiCegarLoop]: Abstraction has 3022 states and 3373 transitions.
[2020-11-25 12:35:25,382 INFO  L631         BuchiCegarLoop]: Abstraction has 3022 states and 3373 transitions.
[2020-11-25 12:35:25,382 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:35:25,382 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3022 states and 3373 transitions.
[2020-11-25 12:35:25,388 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:25,388 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:25,388 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:25,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:25,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND TRUE   !(amount_s1039 != 0)
[L3010]              revert := true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND TRUE   revert
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND TRUE   !(value_s702 <= _balances_COM[this][from_s702])
[L2658]              revert := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND TRUE   !(value_s702 <= _balances_COM[this][from_s702])
[L2658]              revert := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:25,393 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:25,393 INFO  L82        PathProgramCache]: Analyzing trace with hash 703271769, now seen corresponding path program 1 times
[2020-11-25 12:35:25,394 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:25,403 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:25,434 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:35:25,435 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:25,435 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:35:25,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:25,435 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:35:25,435 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:35:25,435 INFO  L87              Difference]: Start difference. First operand 3022 states and 3373 transitions. cyclomatic complexity: 353 Second operand 4 states.
[2020-11-25 12:35:25,475 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:25,475 INFO  L93              Difference]: Finished difference Result 3016 states and 3364 transitions.
[2020-11-25 12:35:25,475 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:35:25,475 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3016 states and 3364 transitions.
[2020-11-25 12:35:25,483 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:25,492 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3016 states to 3013 states and 3361 transitions.
[2020-11-25 12:35:25,492 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 692
[2020-11-25 12:35:25,492 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 692
[2020-11-25 12:35:25,492 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3013 states and 3361 transitions.
[2020-11-25 12:35:25,495 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:25,495 INFO  L728         BuchiCegarLoop]: Abstraction has 3013 states and 3361 transitions.
[2020-11-25 12:35:25,497 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3013 states and 3361 transitions.
[2020-11-25 12:35:25,520 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3013 to 3013.
[2020-11-25 12:35:25,520 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3013 states.
[2020-11-25 12:35:25,524 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3013 states to 3013 states and 3361 transitions.
[2020-11-25 12:35:25,524 INFO  L751         BuchiCegarLoop]: Abstraction has 3013 states and 3361 transitions.
[2020-11-25 12:35:25,524 INFO  L631         BuchiCegarLoop]: Abstraction has 3013 states and 3361 transitions.
[2020-11-25 12:35:25,524 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:35:25,524 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3013 states and 3361 transitions.
[2020-11-25 12:35:25,529 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:25,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:25,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:25,531 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:25,531 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND TRUE   !(value_s702 <= _balances_COM[this][from_s702])
[L2658]              revert := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND TRUE   !(value_s702 <= _balances_COM[this][from_s702])
[L2658]              revert := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:25,534 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:25,534 INFO  L82        PathProgramCache]: Analyzing trace with hash 1244757125, now seen corresponding path program 1 times
[2020-11-25 12:35:25,535 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:25,547 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:25,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:35:25,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:25,591 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:35:25,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:25,592 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:35:25,592 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:35:25,592 INFO  L87              Difference]: Start difference. First operand 3013 states and 3361 transitions. cyclomatic complexity: 350 Second operand 3 states.
[2020-11-25 12:35:25,638 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:25,638 INFO  L93              Difference]: Finished difference Result 3391 states and 3777 transitions.
[2020-11-25 12:35:25,638 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:35:25,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3391 states and 3777 transitions.
[2020-11-25 12:35:25,649 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:25,661 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3391 states to 3224 states and 3572 transitions.
[2020-11-25 12:35:25,661 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 687
[2020-11-25 12:35:25,661 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 687
[2020-11-25 12:35:25,661 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3224 states and 3572 transitions.
[2020-11-25 12:35:25,664 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:25,664 INFO  L728         BuchiCegarLoop]: Abstraction has 3224 states and 3572 transitions.
[2020-11-25 12:35:25,668 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3224 states and 3572 transitions.
[2020-11-25 12:35:25,697 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3224 to 2910.
[2020-11-25 12:35:25,697 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2910 states.
[2020-11-25 12:35:25,704 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2910 states to 2910 states and 3181 transitions.
[2020-11-25 12:35:25,704 INFO  L751         BuchiCegarLoop]: Abstraction has 2910 states and 3181 transitions.
[2020-11-25 12:35:25,704 INFO  L631         BuchiCegarLoop]: Abstraction has 2910 states and 3181 transitions.
[2020-11-25 12:35:25,704 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:35:25,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2910 states and 3181 transitions.
[2020-11-25 12:35:25,709 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:25,709 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:25,709 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:25,712 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:25,712 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:25,715 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:25,716 INFO  L82        PathProgramCache]: Analyzing trace with hash 1311892472, now seen corresponding path program 1 times
[2020-11-25 12:35:25,717 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:25,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:25,874 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-11-25 12:35:25,875 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:25,875 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 12:35:25,875 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:25,875 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 12:35:25,875 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 12:35:25,875 INFO  L87              Difference]: Start difference. First operand 2910 states and 3181 transitions. cyclomatic complexity: 273 Second operand 12 states.
[2020-11-25 12:35:27,205 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:27,205 INFO  L93              Difference]: Finished difference Result 3007 states and 3290 transitions.
[2020-11-25 12:35:27,205 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:35:27,205 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3007 states and 3290 transitions.
[2020-11-25 12:35:27,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:35:27,219 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3007 states to 3007 states and 3290 transitions.
[2020-11-25 12:35:27,219 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 667
[2020-11-25 12:35:27,220 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 667
[2020-11-25 12:35:27,220 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3007 states and 3290 transitions.
[2020-11-25 12:35:27,222 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:27,222 INFO  L728         BuchiCegarLoop]: Abstraction has 3007 states and 3290 transitions.
[2020-11-25 12:35:27,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3007 states and 3290 transitions.
[2020-11-25 12:35:27,246 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3007 to 2816.
[2020-11-25 12:35:27,246 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2816 states.
[2020-11-25 12:35:27,249 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2816 states to 2816 states and 3060 transitions.
[2020-11-25 12:35:27,249 INFO  L751         BuchiCegarLoop]: Abstraction has 2816 states and 3060 transitions.
[2020-11-25 12:35:27,249 INFO  L631         BuchiCegarLoop]: Abstraction has 2816 states and 3060 transitions.
[2020-11-25 12:35:27,249 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:35:27,249 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2816 states and 3060 transitions.
[2020-11-25 12:35:27,252 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:27,252 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:27,252 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:27,254 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:27,254 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:27,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:27,258 INFO  L82        PathProgramCache]: Analyzing trace with hash -460394820, now seen corresponding path program 1 times
[2020-11-25 12:35:27,258 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:27,281 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:27,524 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 12:35:27,524 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:27,524 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 12:35:27,525 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:27,525 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 12:35:27,525 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=370, Unknown=0, NotChecked=0, Total=420
[2020-11-25 12:35:27,525 INFO  L87              Difference]: Start difference. First operand 2816 states and 3060 transitions. cyclomatic complexity: 247 Second operand 21 states.
[2020-11-25 12:35:30,766 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:30,767 INFO  L93              Difference]: Finished difference Result 2890 states and 3157 transitions.
[2020-11-25 12:35:30,767 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 12:35:30,767 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2890 states and 3157 transitions.
[2020-11-25 12:35:30,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:30,778 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2890 states to 2890 states and 3157 transitions.
[2020-11-25 12:35:30,778 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 613
[2020-11-25 12:35:30,779 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 613
[2020-11-25 12:35:30,779 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2890 states and 3157 transitions.
[2020-11-25 12:35:30,782 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:30,782 INFO  L728         BuchiCegarLoop]: Abstraction has 2890 states and 3157 transitions.
[2020-11-25 12:35:30,784 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2890 states and 3157 transitions.
[2020-11-25 12:35:30,799 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2890 to 2830.
[2020-11-25 12:35:30,799 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2830 states.
[2020-11-25 12:35:30,802 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2830 states to 2830 states and 3084 transitions.
[2020-11-25 12:35:30,802 INFO  L751         BuchiCegarLoop]: Abstraction has 2830 states and 3084 transitions.
[2020-11-25 12:35:30,802 INFO  L631         BuchiCegarLoop]: Abstraction has 2830 states and 3084 transitions.
[2020-11-25 12:35:30,802 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:35:30,802 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2830 states and 3084 transitions.
[2020-11-25 12:35:30,804 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:30,804 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:30,804 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:30,806 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:30,806 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND TRUE   __exception
[L526]               __tmp__Balance := Balance;
[L527]               __tmp__DType := DType;
[L528]               __tmp__Alloc := Alloc;
[L529]               __tmp__balance_ADDR := balance_ADDR;
[L530]               __tmp__M_Ref_int := M_Ref_int;
[L531]               __tmp__sum__balances0 := sum__balances0;
[L532]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L533]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L534]               __tmp__sum__allowed1 := sum__allowed1;
[L535]               __tmp__Length := Length;
[L536]               __tmp__now := now;
[L537]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L538]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L539]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L540]               __tmp___balances_COM := _balances_COM;
[L541]               __tmp___allowed_COM := _allowed_COM;
[L542]               __tmp__tokenName_COM := tokenName_COM;
[L543]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L544]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L545]               __tmp___totalSupply_COM := _totalSupply_COM;
[L546]               __tmp__noFee_COM := noFee_COM;
[L547]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L548]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L549]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L550]   CALL        call COM_COM__fail(this, msgsender_MSG, msgvalue_MSG);
[L2221]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              __tmp__Balance[this] := 0;
[L1896]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2221]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokenName_COM[this], __tmp__tokenSymbol_COM[this], __tmp__tokenDecimals_COM[this]);
[L2103]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              __tmp__Balance[this] := 0;
[L1896]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2103]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2104]  COND FALSE  !(revert)
[L2107]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2076]              assume msgsender_MSG != null;
[L2077]              __tmp__Balance[this] := 0;
[L2078]              __tmp___name_ERC20Detailed[this] := -1465673266;
[L2079]              __tmp___symbol_ERC20Detailed[this] := -1465673266;
[L2080]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2082]              __tmp___name_ERC20Detailed[this] := name_s228;
[L2083]              __tmp___symbol_ERC20Detailed[this] := symbol_s228;
[L2084]              __tmp___decimals_ERC20Detailed[this] := decimals_s228;
[L2107]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2108]  COND FALSE  !(revert)
[L2225]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokenName_COM[this], __tmp__tokenSymbol_COM[this], __tmp__tokenDecimals_COM[this]);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call COM_COM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2164]              assume msgsender_MSG != null;
[L2165]              __tmp__Balance[this] := 0;
[L2166]              __tmp___balances_COM[this] := zeroRefintArr();
[L2167]              __tmp__sum__balances0[this] := 0;
[L2168]              __tmp___allowed_COM[this] := zeroRefRefintArr();
[L2169]              __tmp__sum__allowed1[this] := 0;
[L2170]              __tmp__tokenName_COM[this] := -963585000;
[L2171]              __tmp__tokenSymbol_COM[this] := -1124477489;
[L2172]              __tmp__tokenDecimals_COM[this] := 18;
[L2173]              __tmp___totalSupply_COM[this] := 1000000000000000000000000;
[L2174]              __tmp__noFee_COM[this] := 10000000000000000001;
[L2175]              __tmp__heightEnd20Percent_COM[this] := 10328752;
[L2176]              __tmp__heightEnd10Percent_COM[this] := 12582818;
[L2177]              __tmp__heightEnd05Percent_COM[this] := 14836884;
[L2180]              assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L2181]              __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L2182]              __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L2184]  CALL        call _mint~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp___totalSupply_COM[this]);
[L2993]  COND FALSE  !(!(amount_s1039 != 0))
[L2997]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][account_s1039], amount_s1039);
[L1999]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2000]              __ret_0_ := c_s163;
[L2997]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][account_s1039], amount_s1039);
[L2998]  COND FALSE  !(revert)
[L3001]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_COM[this][account_s1039];
[L3002]              __tmp___balances_COM[this][account_s1039] := __var_27;
[L3003]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_COM[this][account_s1039];
[L2184]  RET         call _mint~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp___totalSupply_COM[this]);
[L2185]  COND FALSE  !(revert)
[L2229]  RET         call COM_COM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2230]  COND FALSE  !(revert)
[L550]   RET         call COM_COM__fail(this, msgsender_MSG, msgvalue_MSG);
[L551]               assume revert || gas < 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:30,810 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:30,810 INFO  L82        PathProgramCache]: Analyzing trace with hash 217403383, now seen corresponding path program 1 times
[2020-11-25 12:35:30,810 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:30,818 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:30,845 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-11-25 12:35:30,845 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:30,845 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:35:30,846 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:30,846 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:35:30,846 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:35:30,846 INFO  L87              Difference]: Start difference. First operand 2830 states and 3084 transitions. cyclomatic complexity: 259 Second operand 4 states.
[2020-11-25 12:35:30,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:30,931 INFO  L93              Difference]: Finished difference Result 3545 states and 4037 transitions.
[2020-11-25 12:35:30,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 12:35:30,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3545 states and 4037 transitions.
[2020-11-25 12:35:30,938 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:35:30,948 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3545 states to 3436 states and 3926 transitions.
[2020-11-25 12:35:30,948 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 745
[2020-11-25 12:35:30,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 745
[2020-11-25 12:35:30,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3436 states and 3926 transitions.
[2020-11-25 12:35:30,951 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:30,951 INFO  L728         BuchiCegarLoop]: Abstraction has 3436 states and 3926 transitions.
[2020-11-25 12:35:30,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3436 states and 3926 transitions.
[2020-11-25 12:35:30,972 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3436 to 2721.
[2020-11-25 12:35:30,972 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2721 states.
[2020-11-25 12:35:30,975 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2721 states to 2721 states and 2972 transitions.
[2020-11-25 12:35:30,975 INFO  L751         BuchiCegarLoop]: Abstraction has 2721 states and 2972 transitions.
[2020-11-25 12:35:30,975 INFO  L631         BuchiCegarLoop]: Abstraction has 2721 states and 2972 transitions.
[2020-11-25 12:35:30,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:35:30,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2721 states and 2972 transitions.
[2020-11-25 12:35:30,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:30,978 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:30,978 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:30,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:30,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:30,988 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:30,989 INFO  L82        PathProgramCache]: Analyzing trace with hash 1144876224, now seen corresponding path program 1 times
[2020-11-25 12:35:30,990 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:31,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:31,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 89 trivial. 0 not checked.
[2020-11-25 12:35:31,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:35:31,221 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 12:35:31,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:31,221 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 12:35:31,222 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=121, Unknown=0, NotChecked=0, Total=156
[2020-11-25 12:35:31,222 INFO  L87              Difference]: Start difference. First operand 2721 states and 2972 transitions. cyclomatic complexity: 256 Second operand 13 states.
[2020-11-25 12:35:33,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:33,009 INFO  L93              Difference]: Finished difference Result 2783 states and 3035 transitions.
[2020-11-25 12:35:33,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 12:35:33,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2783 states and 3035 transitions.
[2020-11-25 12:35:33,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:33,019 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2783 states to 2783 states and 3035 transitions.
[2020-11-25 12:35:33,019 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 616
[2020-11-25 12:35:33,020 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 616
[2020-11-25 12:35:33,020 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2783 states and 3035 transitions.
[2020-11-25 12:35:33,022 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:33,022 INFO  L728         BuchiCegarLoop]: Abstraction has 2783 states and 3035 transitions.
[2020-11-25 12:35:33,024 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2783 states and 3035 transitions.
[2020-11-25 12:35:33,037 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2783 to 2727.
[2020-11-25 12:35:33,037 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2727 states.
[2020-11-25 12:35:33,039 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2727 states to 2727 states and 2978 transitions.
[2020-11-25 12:35:33,039 INFO  L751         BuchiCegarLoop]: Abstraction has 2727 states and 2978 transitions.
[2020-11-25 12:35:33,039 INFO  L631         BuchiCegarLoop]: Abstraction has 2727 states and 2978 transitions.
[2020-11-25 12:35:33,040 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:35:33,040 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2727 states and 2978 transitions.
[2020-11-25 12:35:33,042 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:33,042 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:33,042 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:33,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:33,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:33,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:33,047 INFO  L82        PathProgramCache]: Analyzing trace with hash 692131521, now seen corresponding path program 1 times
[2020-11-25 12:35:33,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:33,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:35,057 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 100 trivial. 0 not checked.
[2020-11-25 12:35:35,057 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:35:35,057 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 12:35:35,057 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:35,058 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 12:35:35,058 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=161, Invalid=1561, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 12:35:35,058 INFO  L87              Difference]: Start difference. First operand 2727 states and 2978 transitions. cyclomatic complexity: 256 Second operand 42 states.
[2020-11-25 12:35:35,580 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification that was a NOOP. DAG size: 171
[2020-11-25 12:35:36,173 WARN  L188               SmtUtils]: Spent 259.00 ms on a formula simplification that was a NOOP. DAG size: 178
[2020-11-25 12:35:39,093 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification that was a NOOP. DAG size: 168
[2020-11-25 12:35:40,261 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification that was a NOOP. DAG size: 193
[2020-11-25 12:35:52,056 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:52,056 INFO  L93              Difference]: Finished difference Result 2805 states and 3075 transitions.
[2020-11-25 12:35:52,056 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 12:35:52,056 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2805 states and 3075 transitions.
[2020-11-25 12:35:52,060 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:52,066 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2805 states to 2805 states and 3075 transitions.
[2020-11-25 12:35:52,066 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 625
[2020-11-25 12:35:52,067 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 625
[2020-11-25 12:35:52,067 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2805 states and 3075 transitions.
[2020-11-25 12:35:52,068 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:52,068 INFO  L728         BuchiCegarLoop]: Abstraction has 2805 states and 3075 transitions.
[2020-11-25 12:35:52,071 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2805 states and 3075 transitions.
[2020-11-25 12:35:52,084 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2805 to 2736.
[2020-11-25 12:35:52,084 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2736 states.
[2020-11-25 12:35:52,086 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2736 states to 2736 states and 2995 transitions.
[2020-11-25 12:35:52,086 INFO  L751         BuchiCegarLoop]: Abstraction has 2736 states and 2995 transitions.
[2020-11-25 12:35:52,086 INFO  L631         BuchiCegarLoop]: Abstraction has 2736 states and 2995 transitions.
[2020-11-25 12:35:52,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 12:35:52,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2736 states and 2995 transitions.
[2020-11-25 12:35:52,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:52,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:52,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:52,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:52,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:52,093 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:52,094 INFO  L82        PathProgramCache]: Analyzing trace with hash -1475207947, now seen corresponding path program 1 times
[2020-11-25 12:35:52,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:52,112 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:52,557 INFO  L134       CoverageAnalysis]: Checked inductivity of 103 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-11-25 12:35:52,558 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:35:52,558 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 12:35:52,558 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:52,558 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 12:35:52,559 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=123, Invalid=933, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 12:35:52,559 INFO  L87              Difference]: Start difference. First operand 2736 states and 2995 transitions. cyclomatic complexity: 265 Second operand 33 states.
[2020-11-25 12:35:58,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:58,028 INFO  L93              Difference]: Finished difference Result 2806 states and 3088 transitions.
[2020-11-25 12:35:58,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 12:35:58,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2806 states and 3088 transitions.
[2020-11-25 12:35:58,033 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:58,039 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2806 states to 2806 states and 3088 transitions.
[2020-11-25 12:35:58,039 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 622
[2020-11-25 12:35:58,039 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 622
[2020-11-25 12:35:58,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2806 states and 3088 transitions.
[2020-11-25 12:35:58,041 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:58,041 INFO  L728         BuchiCegarLoop]: Abstraction has 2806 states and 3088 transitions.
[2020-11-25 12:35:58,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2806 states and 3088 transitions.
[2020-11-25 12:35:58,056 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2806 to 2736.
[2020-11-25 12:35:58,056 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2736 states.
[2020-11-25 12:35:58,058 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2736 states to 2736 states and 2995 transitions.
[2020-11-25 12:35:58,058 INFO  L751         BuchiCegarLoop]: Abstraction has 2736 states and 2995 transitions.
[2020-11-25 12:35:58,058 INFO  L631         BuchiCegarLoop]: Abstraction has 2736 states and 2995 transitions.
[2020-11-25 12:35:58,058 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 12:35:58,059 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2736 states and 2995 transitions.
[2020-11-25 12:35:58,061 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:58,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:58,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:58,062 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:58,062 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:58,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:58,065 INFO  L82        PathProgramCache]: Analyzing trace with hash 2080570040, now seen corresponding path program 1 times
[2020-11-25 12:35:58,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:58,078 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:35:58,213 INFO  L134       CoverageAnalysis]: Checked inductivity of 129 backedges. 1 proven. 65 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-11-25 12:35:58,214 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:35:58,214 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 12:35:58,214 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:35:58,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 12:35:58,214 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=180, Unknown=0, NotChecked=0, Total=210
[2020-11-25 12:35:58,214 INFO  L87              Difference]: Start difference. First operand 2736 states and 2995 transitions. cyclomatic complexity: 265 Second operand 15 states.
[2020-11-25 12:35:59,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:35:59,506 INFO  L93              Difference]: Finished difference Result 2757 states and 3014 transitions.
[2020-11-25 12:35:59,506 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 12:35:59,506 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2757 states and 3014 transitions.
[2020-11-25 12:35:59,510 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:59,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2757 states to 2757 states and 3014 transitions.
[2020-11-25 12:35:59,515 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-11-25 12:35:59,516 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-11-25 12:35:59,516 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2757 states and 3014 transitions.
[2020-11-25 12:35:59,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:35:59,517 INFO  L728         BuchiCegarLoop]: Abstraction has 2757 states and 3014 transitions.
[2020-11-25 12:35:59,519 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2757 states and 3014 transitions.
[2020-11-25 12:35:59,531 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2757 to 2736.
[2020-11-25 12:35:59,531 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2736 states.
[2020-11-25 12:35:59,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2736 states to 2736 states and 2993 transitions.
[2020-11-25 12:35:59,534 INFO  L751         BuchiCegarLoop]: Abstraction has 2736 states and 2993 transitions.
[2020-11-25 12:35:59,534 INFO  L631         BuchiCegarLoop]: Abstraction has 2736 states and 2993 transitions.
[2020-11-25 12:35:59,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 12:35:59,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2736 states and 2993 transitions.
[2020-11-25 12:35:59,536 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:35:59,536 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:35:59,536 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:35:59,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:35:59,538 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:35:59,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:35:59,542 INFO  L82        PathProgramCache]: Analyzing trace with hash 667085020, now seen corresponding path program 1 times
[2020-11-25 12:35:59,542 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:35:59,581 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:36:00,244 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:36:00,619 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 51
[2020-11-25 12:36:01,072 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 49
[2020-11-25 12:36:01,557 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification. DAG size of input: 206 DAG size of output: 44
[2020-11-25 12:36:02,521 WARN  L188               SmtUtils]: Spent 805.00 ms on a formula simplification. DAG size of input: 228 DAG size of output: 113
[2020-11-25 12:36:03,212 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification. DAG size of input: 250 DAG size of output: 62
[2020-11-25 12:36:04,603 WARN  L188               SmtUtils]: Spent 868.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 115
[2020-11-25 12:36:05,785 WARN  L188               SmtUtils]: Spent 621.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 128
[2020-11-25 12:36:06,465 INFO  L134       CoverageAnalysis]: Checked inductivity of 208 backedges. 0 proven. 18 refuted. 0 times theorem prover too weak. 190 trivial. 0 not checked.
[2020-11-25 12:36:06,465 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:36:06,465 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 12:36:06,466 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:36:06,466 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 12:36:06,466 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=137, Invalid=1585, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 12:36:06,466 INFO  L87              Difference]: Start difference. First operand 2736 states and 2993 transitions. cyclomatic complexity: 263 Second operand 42 states.
[2020-11-25 12:36:06,978 WARN  L188               SmtUtils]: Spent 213.00 ms on a formula simplification. DAG size of input: 130 DAG size of output: 130
[2020-11-25 12:36:07,306 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 134
[2020-11-25 12:36:07,517 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 136
[2020-11-25 12:36:12,068 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 153
[2020-11-25 12:36:23,873 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:36:23,873 INFO  L93              Difference]: Finished difference Result 2822 states and 3101 transitions.
[2020-11-25 12:36:23,873 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 12:36:23,873 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2822 states and 3101 transitions.
[2020-11-25 12:36:23,878 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:36:23,883 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2822 states to 2822 states and 3101 transitions.
[2020-11-25 12:36:23,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 628
[2020-11-25 12:36:23,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 628
[2020-11-25 12:36:23,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2822 states and 3101 transitions.
[2020-11-25 12:36:23,885 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:36:23,885 INFO  L728         BuchiCegarLoop]: Abstraction has 2822 states and 3101 transitions.
[2020-11-25 12:36:23,887 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2822 states and 3101 transitions.
[2020-11-25 12:36:23,898 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2822 to 2750.
[2020-11-25 12:36:23,898 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2750 states.
[2020-11-25 12:36:23,900 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2750 states to 2750 states and 3022 transitions.
[2020-11-25 12:36:23,901 INFO  L751         BuchiCegarLoop]: Abstraction has 2750 states and 3022 transitions.
[2020-11-25 12:36:23,901 INFO  L631         BuchiCegarLoop]: Abstraction has 2750 states and 3022 transitions.
[2020-11-25 12:36:23,901 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 12:36:23,901 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2750 states and 3022 transitions.
[2020-11-25 12:36:23,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:36:23,903 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:36:23,903 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:36:23,904 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:36:23,905 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:36:23,909 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:36:23,909 INFO  L82        PathProgramCache]: Analyzing trace with hash -977702723, now seen corresponding path program 1 times
[2020-11-25 12:36:23,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:36:23,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:36:24,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 210 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 208 trivial. 0 not checked.
[2020-11-25 12:36:24,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:36:24,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 12:36:24,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:36:24,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 12:36:24,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=82, Invalid=674, Unknown=0, NotChecked=0, Total=756
[2020-11-25 12:36:24,420 INFO  L87              Difference]: Start difference. First operand 2750 states and 3022 transitions. cyclomatic complexity: 280 Second operand 28 states.
[2020-11-25 12:36:29,105 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:36:29,105 INFO  L93              Difference]: Finished difference Result 2818 states and 3118 transitions.
[2020-11-25 12:36:29,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 12:36:29,105 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2818 states and 3118 transitions.
[2020-11-25 12:36:29,110 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:36:29,115 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2818 states to 2818 states and 3118 transitions.
[2020-11-25 12:36:29,115 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 620
[2020-11-25 12:36:29,116 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 620
[2020-11-25 12:36:29,116 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2818 states and 3118 transitions.
[2020-11-25 12:36:29,117 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:36:29,117 INFO  L728         BuchiCegarLoop]: Abstraction has 2818 states and 3118 transitions.
[2020-11-25 12:36:29,119 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2818 states and 3118 transitions.
[2020-11-25 12:36:29,130 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2818 to 2756.
[2020-11-25 12:36:29,130 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2756 states.
[2020-11-25 12:36:29,133 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2756 states to 2756 states and 3047 transitions.
[2020-11-25 12:36:29,133 INFO  L751         BuchiCegarLoop]: Abstraction has 2756 states and 3047 transitions.
[2020-11-25 12:36:29,133 INFO  L631         BuchiCegarLoop]: Abstraction has 2756 states and 3047 transitions.
[2020-11-25 12:36:29,133 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 12:36:29,133 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2756 states and 3047 transitions.
[2020-11-25 12:36:29,135 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:36:29,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:36:29,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:36:29,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:36:29,137 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:36:29,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:36:29,140 INFO  L82        PathProgramCache]: Analyzing trace with hash 1132084605, now seen corresponding path program 1 times
[2020-11-25 12:36:29,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:36:29,187 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:36:30,793 WARN  L188               SmtUtils]: Spent 493.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 109
[2020-11-25 12:36:31,502 WARN  L188               SmtUtils]: Spent 400.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 110
[2020-11-25 12:36:32,250 WARN  L188               SmtUtils]: Spent 391.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 105
[2020-11-25 12:36:33,008 WARN  L188               SmtUtils]: Spent 468.00 ms on a formula simplification. DAG size of input: 149 DAG size of output: 81
[2020-11-25 12:36:33,583 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 65
[2020-11-25 12:36:34,551 WARN  L188               SmtUtils]: Spent 347.00 ms on a formula simplification. DAG size of input: 164 DAG size of output: 109
[2020-11-25 12:36:35,281 WARN  L188               SmtUtils]: Spent 399.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 94
[2020-11-25 12:36:36,160 INFO  L134       CoverageAnalysis]: Checked inductivity of 224 backedges. 4 proven. 20 refuted. 0 times theorem prover too weak. 200 trivial. 0 not checked.
[2020-11-25 12:36:36,161 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:36:36,161 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [55] total 55
[2020-11-25 12:36:36,161 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:36:36,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 56 interpolants.
[2020-11-25 12:36:36,162 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=247, Invalid=2833, Unknown=0, NotChecked=0, Total=3080
[2020-11-25 12:36:36,162 INFO  L87              Difference]: Start difference. First operand 2756 states and 3047 transitions. cyclomatic complexity: 301 Second operand 56 states.
[2020-11-25 12:36:37,697 WARN  L188               SmtUtils]: Spent 1.06 s on a formula simplification. DAG size of input: 303 DAG size of output: 246
[2020-11-25 12:36:38,784 WARN  L188               SmtUtils]: Spent 848.00 ms on a formula simplification that was a NOOP. DAG size: 304
[2020-11-25 12:36:40,058 WARN  L188               SmtUtils]: Spent 864.00 ms on a formula simplification that was a NOOP. DAG size: 308
[2020-11-25 12:36:41,101 WARN  L188               SmtUtils]: Spent 844.00 ms on a formula simplification that was a NOOP. DAG size: 310
[2020-11-25 12:36:48,677 WARN  L188               SmtUtils]: Spent 1.24 s on a formula simplification. DAG size of input: 325 DAG size of output: 268
[2020-11-25 12:37:05,212 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:37:05,212 INFO  L93              Difference]: Finished difference Result 2841 states and 3215 transitions.
[2020-11-25 12:37:05,212 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 50 states. 
[2020-11-25 12:37:05,212 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2841 states and 3215 transitions.
[2020-11-25 12:37:05,217 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:05,223 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2841 states to 2841 states and 3215 transitions.
[2020-11-25 12:37:05,223 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 12:37:05,223 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 12:37:05,223 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2841 states and 3215 transitions.
[2020-11-25 12:37:05,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:37:05,225 INFO  L728         BuchiCegarLoop]: Abstraction has 2841 states and 3215 transitions.
[2020-11-25 12:37:05,227 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2841 states and 3215 transitions.
[2020-11-25 12:37:05,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2841 to 2762.
[2020-11-25 12:37:05,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2762 states.
[2020-11-25 12:37:05,241 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2762 states to 2762 states and 3078 transitions.
[2020-11-25 12:37:05,241 INFO  L751         BuchiCegarLoop]: Abstraction has 2762 states and 3078 transitions.
[2020-11-25 12:37:05,241 INFO  L631         BuchiCegarLoop]: Abstraction has 2762 states and 3078 transitions.
[2020-11-25 12:37:05,241 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 12:37:05,241 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2762 states and 3078 transitions.
[2020-11-25 12:37:05,244 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:05,244 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:37:05,244 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:37:05,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:37:05,245 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:37:05,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:37:05,249 INFO  L82        PathProgramCache]: Analyzing trace with hash -1829896015, now seen corresponding path program 1 times
[2020-11-25 12:37:05,250 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:37:05,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:37:05,639 INFO  L134       CoverageAnalysis]: Checked inductivity of 218 backedges. 9 proven. 2 refuted. 0 times theorem prover too weak. 207 trivial. 0 not checked.
[2020-11-25 12:37:05,639 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:37:05,639 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 12:37:05,639 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:37:05,640 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 12:37:05,640 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=837, Unknown=0, NotChecked=0, Total=930
[2020-11-25 12:37:05,640 INFO  L87              Difference]: Start difference. First operand 2762 states and 3078 transitions. cyclomatic complexity: 327 Second operand 31 states.
[2020-11-25 12:37:10,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:37:10,851 INFO  L93              Difference]: Finished difference Result 2830 states and 3176 transitions.
[2020-11-25 12:37:10,852 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 12:37:10,852 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2830 states and 3176 transitions.
[2020-11-25 12:37:10,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:10,863 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2830 states to 2830 states and 3176 transitions.
[2020-11-25 12:37:10,863 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 620
[2020-11-25 12:37:10,863 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 620
[2020-11-25 12:37:10,863 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2830 states and 3176 transitions.
[2020-11-25 12:37:10,865 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:37:10,865 INFO  L728         BuchiCegarLoop]: Abstraction has 2830 states and 3176 transitions.
[2020-11-25 12:37:10,867 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2830 states and 3176 transitions.
[2020-11-25 12:37:10,879 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2830 to 2764.
[2020-11-25 12:37:10,879 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2764 states.
[2020-11-25 12:37:10,881 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2764 states to 2764 states and 3089 transitions.
[2020-11-25 12:37:10,882 INFO  L751         BuchiCegarLoop]: Abstraction has 2764 states and 3089 transitions.
[2020-11-25 12:37:10,882 INFO  L631         BuchiCegarLoop]: Abstraction has 2764 states and 3089 transitions.
[2020-11-25 12:37:10,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 12:37:10,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2764 states and 3089 transitions.
[2020-11-25 12:37:10,884 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:10,884 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:37:10,884 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:37:10,885 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:37:10,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:37:10,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:37:10,890 INFO  L82        PathProgramCache]: Analyzing trace with hash 1432408882, now seen corresponding path program 1 times
[2020-11-25 12:37:10,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:37:10,923 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:37:11,718 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification. DAG size of input: 77 DAG size of output: 59
[2020-11-25 12:37:12,133 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 83 DAG size of output: 72
[2020-11-25 12:37:12,292 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 82 DAG size of output: 60
[2020-11-25 12:37:12,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 17 refuted. 0 times theorem prover too weak. 203 trivial. 0 not checked.
[2020-11-25 12:37:12,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:37:12,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-11-25 12:37:12,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:37:12,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-11-25 12:37:12,721 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=121, Invalid=1859, Unknown=0, NotChecked=0, Total=1980
[2020-11-25 12:37:12,721 INFO  L87              Difference]: Start difference. First operand 2764 states and 3089 transitions. cyclomatic complexity: 337 Second operand 45 states.
[2020-11-25 12:37:26,606 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:37:26,606 INFO  L93              Difference]: Finished difference Result 2836 states and 3179 transitions.
[2020-11-25 12:37:26,607 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 12:37:26,607 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2836 states and 3179 transitions.
[2020-11-25 12:37:26,612 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:26,617 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2836 states to 2836 states and 3179 transitions.
[2020-11-25 12:37:26,617 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-11-25 12:37:26,618 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-11-25 12:37:26,618 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2836 states and 3179 transitions.
[2020-11-25 12:37:26,619 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:37:26,619 INFO  L728         BuchiCegarLoop]: Abstraction has 2836 states and 3179 transitions.
[2020-11-25 12:37:26,621 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2836 states and 3179 transitions.
[2020-11-25 12:37:26,632 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2836 to 2754.
[2020-11-25 12:37:26,632 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2754 states.
[2020-11-25 12:37:26,635 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2754 states to 2754 states and 3069 transitions.
[2020-11-25 12:37:26,635 INFO  L751         BuchiCegarLoop]: Abstraction has 2754 states and 3069 transitions.
[2020-11-25 12:37:26,635 INFO  L631         BuchiCegarLoop]: Abstraction has 2754 states and 3069 transitions.
[2020-11-25 12:37:26,635 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 12:37:26,635 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2754 states and 3069 transitions.
[2020-11-25 12:37:26,637 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:26,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:37:26,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:37:26,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:37:26,639 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:37:26,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:37:26,643 INFO  L82        PathProgramCache]: Analyzing trace with hash 490444156, now seen corresponding path program 1 times
[2020-11-25 12:37:26,643 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:37:26,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:37:28,740 INFO  L134       CoverageAnalysis]: Checked inductivity of 244 backedges. 7 proven. 16 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-11-25 12:37:28,741 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:37:28,741 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [56] total 56
[2020-11-25 12:37:28,741 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:37:28,742 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 57 interpolants.
[2020-11-25 12:37:28,742 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=205, Invalid=2987, Unknown=0, NotChecked=0, Total=3192
[2020-11-25 12:37:28,742 INFO  L87              Difference]: Start difference. First operand 2754 states and 3069 transitions. cyclomatic complexity: 327 Second operand 57 states.
[2020-11-25 12:37:40,738 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 103 DAG size of output: 102
[2020-11-25 12:37:49,683 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:37:49,683 INFO  L93              Difference]: Finished difference Result 2827 states and 3166 transitions.
[2020-11-25 12:37:49,683 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 12:37:49,683 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2827 states and 3166 transitions.
[2020-11-25 12:37:49,688 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:49,693 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2827 states to 2827 states and 3166 transitions.
[2020-11-25 12:37:49,693 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 12:37:49,693 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 12:37:49,693 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2827 states and 3166 transitions.
[2020-11-25 12:37:49,695 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:37:49,695 INFO  L728         BuchiCegarLoop]: Abstraction has 2827 states and 3166 transitions.
[2020-11-25 12:37:49,697 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2827 states and 3166 transitions.
[2020-11-25 12:37:49,707 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2827 to 2754.
[2020-11-25 12:37:49,707 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2754 states.
[2020-11-25 12:37:49,710 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2754 states to 2754 states and 3069 transitions.
[2020-11-25 12:37:49,710 INFO  L751         BuchiCegarLoop]: Abstraction has 2754 states and 3069 transitions.
[2020-11-25 12:37:49,710 INFO  L631         BuchiCegarLoop]: Abstraction has 2754 states and 3069 transitions.
[2020-11-25 12:37:49,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 12:37:49,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2754 states and 3069 transitions.
[2020-11-25 12:37:49,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:37:49,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:37:49,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:37:49,713 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:37:49,713 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND TRUE   choice == 3
[L4258]              gas := gas - 21000;
[L4259]  COND TRUE   gas >= 0
[L4260]              assume subtractedValue_s1006 >= 0 && subtractedValue_s1006 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4261]              assume msgvalue_MSG == 0;
[L4262]  CALL        call __ret_0_decreaseAllowance := decreaseAllowance~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L1199]              havoc __exception;
[L1200]              revert := false;
[L1201]  COND FALSE  !(__exception)
[L1229]  CALL        call __ret_0_ := decreaseAllowance~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L2973]              __var_25 := null;
[L2974]  COND FALSE  !(!(spender_s1006 != null))
[L2978]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][msgsender_MSG][spender_s1006], subtractedValue_s1006);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2978]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][msgsender_MSG][spender_s1006], subtractedValue_s1006);
[L2979]  COND FALSE  !(revert)
[L2982]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s1006];
[L2983]              _allowed_COM[this][msgsender_MSG][spender_s1006] := __var_26;
[L2984]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s1006];
[L2985]              assert { :EventEmitted "Approval_COM" } true;
[L2986]              __ret_0_ := true;
[L1229]  RET         call __ret_0_ := decreaseAllowance~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L1230]              assume !revert && gas >= 0;
[L4262]  RET         call __ret_0_decreaseAllowance := decreaseAllowance~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:37:49,716 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:37:49,717 INFO  L82        PathProgramCache]: Analyzing trace with hash -155547852, now seen corresponding path program 1 times
[2020-11-25 12:37:49,717 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:37:49,759 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:37:51,198 WARN  L188               SmtUtils]: Spent 610.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 115
[2020-11-25 12:37:51,827 WARN  L188               SmtUtils]: Spent 376.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 106
[2020-11-25 12:37:52,268 WARN  L188               SmtUtils]: Spent 302.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 80
[2020-11-25 12:37:53,334 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 45
[2020-11-25 12:37:53,878 INFO  L134       CoverageAnalysis]: Checked inductivity of 234 backedges. 7 proven. 10 refuted. 0 times theorem prover too weak. 217 trivial. 0 not checked.
[2020-11-25 12:37:53,878 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:37:53,878 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 12:37:53,878 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:37:53,879 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 12:37:53,879 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=162, Invalid=1730, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 12:37:53,879 INFO  L87              Difference]: Start difference. First operand 2754 states and 3069 transitions. cyclomatic complexity: 327 Second operand 44 states.
[2020-11-25 12:37:54,375 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification that was a NOOP. DAG size: 170
[2020-11-25 12:37:54,830 WARN  L188               SmtUtils]: Spent 237.00 ms on a formula simplification that was a NOOP. DAG size: 174
[2020-11-25 12:37:55,139 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification that was a NOOP. DAG size: 176
[2020-11-25 12:38:10,288 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:38:10,288 INFO  L93              Difference]: Finished difference Result 2825 states and 3169 transitions.
[2020-11-25 12:38:10,288 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 12:38:10,288 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2825 states and 3169 transitions.
[2020-11-25 12:38:10,293 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:10,298 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2825 states to 2825 states and 3169 transitions.
[2020-11-25 12:38:10,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 623
[2020-11-25 12:38:10,299 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 623
[2020-11-25 12:38:10,299 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2825 states and 3169 transitions.
[2020-11-25 12:38:10,300 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:38:10,300 INFO  L728         BuchiCegarLoop]: Abstraction has 2825 states and 3169 transitions.
[2020-11-25 12:38:10,302 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2825 states and 3169 transitions.
[2020-11-25 12:38:10,313 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2825 to 2754.
[2020-11-25 12:38:10,313 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2754 states.
[2020-11-25 12:38:10,315 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2754 states to 2754 states and 3069 transitions.
[2020-11-25 12:38:10,315 INFO  L751         BuchiCegarLoop]: Abstraction has 2754 states and 3069 transitions.
[2020-11-25 12:38:10,315 INFO  L631         BuchiCegarLoop]: Abstraction has 2754 states and 3069 transitions.
[2020-11-25 12:38:10,315 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 12:38:10,316 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2754 states and 3069 transitions.
[2020-11-25 12:38:10,318 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:10,318 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:38:10,318 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:38:10,319 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:38:10,319 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND TRUE   choice == 3
[L4258]              gas := gas - 21000;
[L4259]  COND TRUE   gas >= 0
[L4260]              assume subtractedValue_s1006 >= 0 && subtractedValue_s1006 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4261]              assume msgvalue_MSG == 0;
[L4262]  CALL        call __ret_0_decreaseAllowance := decreaseAllowance~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L1199]              havoc __exception;
[L1200]              revert := false;
[L1201]  COND FALSE  !(__exception)
[L1229]  CALL        call __ret_0_ := decreaseAllowance~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L2973]              __var_25 := null;
[L2974]  COND FALSE  !(!(spender_s1006 != null))
[L2978]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][msgsender_MSG][spender_s1006], subtractedValue_s1006);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2978]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][msgsender_MSG][spender_s1006], subtractedValue_s1006);
[L2979]  COND FALSE  !(revert)
[L2982]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s1006];
[L2983]              _allowed_COM[this][msgsender_MSG][spender_s1006] := __var_26;
[L2984]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s1006];
[L2985]              assert { :EventEmitted "Approval_COM" } true;
[L2986]              __ret_0_ := true;
[L1229]  RET         call __ret_0_ := decreaseAllowance~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L1230]              assume !revert && gas >= 0;
[L4262]  RET         call __ret_0_decreaseAllowance := decreaseAllowance~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s1006, subtractedValue_s1006);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:38:10,322 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:38:10,322 INFO  L82        PathProgramCache]: Analyzing trace with hash 1574185253, now seen corresponding path program 1 times
[2020-11-25 12:38:10,323 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:38:10,346 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:38:10,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 262 backedges. 13 proven. 135 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-11-25 12:38:10,691 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:38:10,691 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 12:38:10,691 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:38:10,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 12:38:10,692 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=491, Unknown=0, NotChecked=0, Total=552
[2020-11-25 12:38:10,692 INFO  L87              Difference]: Start difference. First operand 2754 states and 3069 transitions. cyclomatic complexity: 327 Second operand 24 states.
[2020-11-25 12:38:14,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:38:14,691 INFO  L93              Difference]: Finished difference Result 2793 states and 3164 transitions.
[2020-11-25 12:38:14,692 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 12:38:14,692 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2793 states and 3164 transitions.
[2020-11-25 12:38:14,698 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:14,704 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2793 states to 2793 states and 3164 transitions.
[2020-11-25 12:38:14,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 619
[2020-11-25 12:38:14,705 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 619
[2020-11-25 12:38:14,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2793 states and 3164 transitions.
[2020-11-25 12:38:14,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:38:14,706 INFO  L728         BuchiCegarLoop]: Abstraction has 2793 states and 3164 transitions.
[2020-11-25 12:38:14,709 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2793 states and 3164 transitions.
[2020-11-25 12:38:14,720 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2793 to 2764.
[2020-11-25 12:38:14,720 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2764 states.
[2020-11-25 12:38:14,723 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2764 states to 2764 states and 3121 transitions.
[2020-11-25 12:38:14,723 INFO  L751         BuchiCegarLoop]: Abstraction has 2764 states and 3121 transitions.
[2020-11-25 12:38:14,723 INFO  L631         BuchiCegarLoop]: Abstraction has 2764 states and 3121 transitions.
[2020-11-25 12:38:14,723 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 12:38:14,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2764 states and 3121 transitions.
[2020-11-25 12:38:14,726 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:14,726 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:38:14,726 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:38:14,727 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:38:14,727 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND TRUE   choice == 4
[L4251]              gas := gas - 21000;
[L4252]  COND TRUE   gas >= 0
[L4253]              assume addedValue_s956 >= 0 && addedValue_s956 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4254]              assume msgvalue_MSG == 0;
[L4255]  CALL        call __ret_0_increaseAllowance := increaseAllowance~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s956, addedValue_s956);
[L1133]              havoc __exception;
[L1134]              revert := false;
[L1135]  COND FALSE  !(__exception)
[L1163]  CALL        call __ret_0_ := increaseAllowance~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s956, addedValue_s956);
[L2932]              __var_23 := null;
[L2933]  COND FALSE  !(!(spender_s956 != null))
[L2937]  CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][msgsender_MSG][spender_s956], addedValue_s956);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2937]  RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][msgsender_MSG][spender_s956], addedValue_s956);
[L2938]  COND FALSE  !(revert)
[L2941]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s956];
[L2942]              _allowed_COM[this][msgsender_MSG][spender_s956] := __var_24;
[L2943]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s956];
[L2944]              assert { :EventEmitted "Approval_COM" } true;
[L2945]              __ret_0_ := true;
[L1163]  RET         call __ret_0_ := increaseAllowance~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s956, addedValue_s956);
[L1164]              assume !revert && gas >= 0;
[L4255]  RET         call __ret_0_increaseAllowance := increaseAllowance~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s956, addedValue_s956);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:38:14,730 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:38:14,731 INFO  L82        PathProgramCache]: Analyzing trace with hash -407435053, now seen corresponding path program 1 times
[2020-11-25 12:38:14,731 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:38:14,776 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:38:16,828 WARN  L188               SmtUtils]: Spent 740.00 ms on a formula simplification. DAG size of input: 190 DAG size of output: 156
[2020-11-25 12:38:17,629 WARN  L188               SmtUtils]: Spent 394.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 116
[2020-11-25 12:38:18,266 WARN  L188               SmtUtils]: Spent 520.00 ms on a formula simplification. DAG size of input: 187 DAG size of output: 144
[2020-11-25 12:38:19,214 WARN  L188               SmtUtils]: Spent 580.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 174
[2020-11-25 12:38:19,958 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 17 proven. 15 refuted. 0 times theorem prover too weak. 224 trivial. 0 not checked.
[2020-11-25 12:38:19,958 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:38:19,958 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [56] total 56
[2020-11-25 12:38:19,959 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:38:19,959 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 57 interpolants.
[2020-11-25 12:38:19,959 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=199, Invalid=2993, Unknown=0, NotChecked=0, Total=3192
[2020-11-25 12:38:19,959 INFO  L87              Difference]: Start difference. First operand 2764 states and 3121 transitions. cyclomatic complexity: 373 Second operand 57 states.
[2020-11-25 12:38:23,754 WARN  L188               SmtUtils]: Spent 510.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 127
[2020-11-25 12:38:33,103 WARN  L188               SmtUtils]: Spent 843.00 ms on a formula simplification. DAG size of input: 169 DAG size of output: 168
[2020-11-25 12:38:42,372 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:38:42,372 INFO  L93              Difference]: Finished difference Result 2837 states and 3222 transitions.
[2020-11-25 12:38:42,372 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 12:38:42,372 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2837 states and 3222 transitions.
[2020-11-25 12:38:42,377 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:42,382 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2837 states to 2837 states and 3222 transitions.
[2020-11-25 12:38:42,382 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 12:38:42,383 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 12:38:42,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2837 states and 3222 transitions.
[2020-11-25 12:38:42,384 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:38:42,384 INFO  L728         BuchiCegarLoop]: Abstraction has 2837 states and 3222 transitions.
[2020-11-25 12:38:42,386 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2837 states and 3222 transitions.
[2020-11-25 12:38:42,396 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2837 to 2762.
[2020-11-25 12:38:42,396 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2762 states.
[2020-11-25 12:38:42,399 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2762 states to 2762 states and 3105 transitions.
[2020-11-25 12:38:42,399 INFO  L751         BuchiCegarLoop]: Abstraction has 2762 states and 3105 transitions.
[2020-11-25 12:38:42,399 INFO  L631         BuchiCegarLoop]: Abstraction has 2762 states and 3105 transitions.
[2020-11-25 12:38:42,399 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 12:38:42,399 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2762 states and 3105 transitions.
[2020-11-25 12:38:42,402 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:42,402 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:38:42,402 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:38:42,403 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:38:42,403 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:38:42,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:38:42,407 INFO  L82        PathProgramCache]: Analyzing trace with hash 1839149840, now seen corresponding path program 1 times
[2020-11-25 12:38:42,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:38:42,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:38:42,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 240 backedges. 6 proven. 7 refuted. 0 times theorem prover too weak. 227 trivial. 0 not checked.
[2020-11-25 12:38:42,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:38:42,826 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 12:38:42,826 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:38:42,826 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 12:38:42,826 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=525, Unknown=0, NotChecked=0, Total=600
[2020-11-25 12:38:42,827 INFO  L87              Difference]: Start difference. First operand 2762 states and 3105 transitions. cyclomatic complexity: 359 Second operand 25 states.
[2020-11-25 12:38:46,945 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:38:46,945 INFO  L93              Difference]: Finished difference Result 2825 states and 3201 transitions.
[2020-11-25 12:38:46,946 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 12:38:46,946 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2825 states and 3201 transitions.
[2020-11-25 12:38:46,951 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:46,957 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2825 states to 2825 states and 3201 transitions.
[2020-11-25 12:38:46,957 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-11-25 12:38:46,957 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-11-25 12:38:46,957 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2825 states and 3201 transitions.
[2020-11-25 12:38:46,959 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:38:46,959 INFO  L728         BuchiCegarLoop]: Abstraction has 2825 states and 3201 transitions.
[2020-11-25 12:38:46,961 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2825 states and 3201 transitions.
[2020-11-25 12:38:46,971 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2825 to 2766.
[2020-11-25 12:38:46,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2766 states.
[2020-11-25 12:38:46,974 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2766 states to 2766 states and 3125 transitions.
[2020-11-25 12:38:46,974 INFO  L751         BuchiCegarLoop]: Abstraction has 2766 states and 3125 transitions.
[2020-11-25 12:38:46,974 INFO  L631         BuchiCegarLoop]: Abstraction has 2766 states and 3125 transitions.
[2020-11-25 12:38:46,974 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 12:38:46,974 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2766 states and 3125 transitions.
[2020-11-25 12:38:46,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:46,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:38:46,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:38:46,978 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:38:46,978 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:38:46,981 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:38:46,981 INFO  L82        PathProgramCache]: Analyzing trace with hash 588472452, now seen corresponding path program 1 times
[2020-11-25 12:38:46,982 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:38:47,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:38:47,119 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 6 proven. 118 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 12:38:47,119 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:38:47,119 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 12:38:47,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:38:47,120 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 12:38:47,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 12:38:47,120 INFO  L87              Difference]: Start difference. First operand 2766 states and 3125 transitions. cyclomatic complexity: 377 Second operand 16 states.
[2020-11-25 12:38:48,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:38:48,418 INFO  L93              Difference]: Finished difference Result 2788 states and 3159 transitions.
[2020-11-25 12:38:48,418 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 12:38:48,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2788 states and 3159 transitions.
[2020-11-25 12:38:48,424 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:48,430 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2788 states to 2788 states and 3159 transitions.
[2020-11-25 12:38:48,430 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 612
[2020-11-25 12:38:48,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 612
[2020-11-25 12:38:48,430 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2788 states and 3159 transitions.
[2020-11-25 12:38:48,432 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:38:48,432 INFO  L728         BuchiCegarLoop]: Abstraction has 2788 states and 3159 transitions.
[2020-11-25 12:38:48,434 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2788 states and 3159 transitions.
[2020-11-25 12:38:48,444 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2788 to 2766.
[2020-11-25 12:38:48,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2766 states.
[2020-11-25 12:38:48,447 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2766 states to 2766 states and 3121 transitions.
[2020-11-25 12:38:48,447 INFO  L751         BuchiCegarLoop]: Abstraction has 2766 states and 3121 transitions.
[2020-11-25 12:38:48,448 INFO  L631         BuchiCegarLoop]: Abstraction has 2766 states and 3121 transitions.
[2020-11-25 12:38:48,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 12:38:48,448 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2766 states and 3121 transitions.
[2020-11-25 12:38:48,450 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:38:48,450 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:38:48,450 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:38:48,451 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:38:48,451 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_COM0 := false;
[L2]                 call_transferFrom_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s702 != to_s702 && ((value_s702 > _balances_COM[this][from_s702] || value_s702 > _allowed_COM[this][from_s702][msgsender_MSG]) || _balances_COM[this][to_s702] + value_s702 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s702 >= 0) && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s702] >= 0) && _balances_COM[this][to_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][from_s702] >= 0) && _balances_COM[this][from_s702] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_COM[this][from_s702][msgsender_MSG] >= 0) && _allowed_COM[this][from_s702][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_COM0 := true;
[L2]                 call_transferFrom_COM0 := false;
[L2]                 revert := revert_hold;
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:38:48,455 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:38:48,455 INFO  L82        PathProgramCache]: Analyzing trace with hash 926263545, now seen corresponding path program 2 times
[2020-11-25 12:38:48,455 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:38:48,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:07,083 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 52
[2020-11-25 12:50:07,322 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:07,383 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 62
[2020-11-25 12:50:07,588 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 59
[2020-11-25 12:50:07,692 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:08,460 WARN  L188               SmtUtils]: Spent 583.00 ms on a formula simplification. DAG size of input: 421 DAG size of output: 82
[2020-11-25 12:50:09,802 WARN  L188               SmtUtils]: Spent 478.00 ms on a formula simplification. DAG size of input: 416 DAG size of output: 72
[2020-11-25 12:50:10,746 WARN  L188               SmtUtils]: Spent 436.00 ms on a formula simplification. DAG size of input: 400 DAG size of output: 51
[2020-11-25 12:50:11,918 WARN  L188               SmtUtils]: Spent 889.00 ms on a formula simplification. DAG size of input: 361 DAG size of output: 34
[2020-11-25 12:50:12,151 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,219 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,285 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,285 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,285 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,432 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,432 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,458 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,458 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,470 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:12,512 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 69
[2020-11-25 12:50:12,879 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 93
[2020-11-25 12:50:13,030 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:13,083 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 82
[2020-11-25 12:50:13,336 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 86
[2020-11-25 12:50:13,479 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:13,479 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:50:13,546 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 164 DAG size of output: 89
Received shutdown request...
Cannot interrupt operation gracefully because timeout expired. Forcing shutdown
