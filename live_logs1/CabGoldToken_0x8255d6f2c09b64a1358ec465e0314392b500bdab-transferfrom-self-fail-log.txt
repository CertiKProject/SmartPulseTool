This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:54:48,339 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:54:48,340 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:54:48,351 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:54:48,351 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:54:48,352 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:54:48,353 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:54:48,354 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:54:48,356 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:54:48,357 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:54:48,357 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:54:48,358 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:54:48,358 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:54:48,359 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:54:48,360 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:54:48,360 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:54:48,361 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:54:48,362 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:54:48,364 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:54:48,365 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:54:48,366 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:54:48,366 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:54:48,368 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:54:48,368 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:54:48,368 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:54:48,369 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:54:48,369 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:54:48,370 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:54:48,370 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:54:48,370 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:54:48,371 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:54:48,371 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:54:48,372 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:54:48,372 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:54:48,373 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:54:48,373 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:54:48,374 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:54:48,374 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:54:48,374 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:54:48,375 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:54:48,375 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:54:48,375 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:54:48,383 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:54:48,384 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:54:48,384 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:54:48,385 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:54:48,385 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:54:48,385 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:54:48,386 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:54:48,386 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:54:48,387 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:54:48,387 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:54:48,387 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:54:48,387 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:54:48,409 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:54:48,423 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:54:48,425 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:54:48,426 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:54:48,427 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:54:48,427 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl
[2020-11-25 11:54:48,427 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl'
[2020-11-25 11:54:48,530 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:54:48,531 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:54:48,532 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:54:48,532 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:54:48,532 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:54:48,549 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,551 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,596 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,598 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,625 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,642 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,653 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,664 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:54:48,665 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:54:48,665 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:54:48,667 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:54:48,671 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/1) ...
[2020-11-25 11:54:48,690 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:54:48,695 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:54:48,702 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:54:48,709 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s325==recipient_s325 && ( amount_s325>_balances_ERC20[this][sender_s325] || amount_s325>_allowances_ERC20[this][sender_s325][msg.sender] ) ) && amount_s325>=0 ) && amount_s325<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s325]>=0 ) && _balances_ERC20[this][recipient_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s325]>=0 ) && _balances_ERC20[this][sender_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s325][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s325][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:54:48,716 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:54:48,716 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:54:48,728 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:54:48 PropertyContainer
[2020-11-25 11:54:48,728 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:54:48,729 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:54:48,729 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:54:48,729 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:54:48,730 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/2) ...
[2020-11-25 11:54:48,730 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:54:48,730 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:54:48,755 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:54:48" (2/2) ...
[2020-11-25 11:54:48,755 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:54:48,756 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:54:48,756 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:54:48,756 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:54:48,757 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/2) ...
[2020-11-25 11:54:48,811 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:54:48,811 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:54:48,811 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:54:48,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:54:48,812 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:54:48,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:54:48,813 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:54:48,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:54:48,814 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:54:48,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:54:48,814 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:54:48,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:54:48,814 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:54:48,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:54:48,814 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:54:48,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:54:48,814 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:54:48,815 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:54:48,815 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:54:48,815 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:54:48,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:54:48,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:54:48,816 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:54:48,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:54:48,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:54:48,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:54:48,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:54:48,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:54:48,817 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:54:48,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:54:48,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:54:48,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:54:48,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:54:48,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:54:48,818 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:54:48,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:54:48,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:54:48,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:54:48,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:54:48,820 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:54:48,821 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:54:48,822 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:54:48,823 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:54:48,824 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:54:48,825 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:54:48,826 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:54:48,827 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:54:48,828 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:54:48,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:54:48,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:54:48,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:54:48,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:54:48,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:54:48,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:54:48,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:54:48,833 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:54:48,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:54:48,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:54:48,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:54:48,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:54:48,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:54:48,839 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:54:48,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:54:49,268 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:54:49,268 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:54:49,766 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:54:49,766 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:54:49,770 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:54:49 BoogieIcfgContainer
[2020-11-25 11:54:49,771 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:54:48" (2/2) ...
[2020-11-25 11:54:49,771 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:54:49,771 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@70c683d3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:54:49, skipping insertion in model container
[2020-11-25 11:54:49,771 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:54:49,772 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:54:49,772 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:54:49,773 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:54:49,774 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/3) ...
[2020-11-25 11:54:49,774 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@9502d6f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:54:49, skipping insertion in model container
[2020-11-25 11:54:49,774 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:54:48" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:54:49,823 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:54:49 NWAContainer
[2020-11-25 11:54:49,823 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:54:49,823 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:54:49,823 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:54:49,824 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:54:49,824 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:54:49" (3/4) ...
[2020-11-25 11:54:49,825 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@ee35963 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:54:49, skipping insertion in model container
[2020-11-25 11:54:49,825 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:54:49" (4/4) ...
[2020-11-25 11:54:49,828 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:54:49,833 INFO  L110   BuchiProductObserver]: Initial RCFG 2278 locations, 3351 edges
[2020-11-25 11:54:49,833 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:54:49,844 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:54:51,576 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:54:51,584 INFO  L110   BuchiProductObserver]: BuchiProgram size 5914 locations, 11045 edges
[2020-11-25 11:54:51,584 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:54:51 BoogieIcfgContainer
[2020-11-25 11:54:51,584 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:54:51,584 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:54:51,584 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:54:51,586 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:54:51,586 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:54:51" (1/1) ...
[2020-11-25 11:54:51,691 INFO  L313           BlockEncoder]: Initial Icfg 5914 locations, 11045 edges
[2020-11-25 11:54:51,691 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:54:51,692 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:54:51,692 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:54:51,692 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:54:51,704 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 19 locations because of local infeasibility
[2020-11-25 11:54:51,713 INFO  L70        RemoveSinkStates]: Removed 140 edges and 85 locations by removing sink states
[2020-11-25 11:54:51,725 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:54:51,730 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:54:51,736 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:54:51,736 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:54:51,739 INFO  L313           BlockEncoder]: Encoded RCFG 5782 locations, 10702 edges
[2020-11-25 11:54:51,740 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:54:51 BasicIcfg
[2020-11-25 11:54:51,740 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:54:51,740 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:54:51,740 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:54:51,742 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:54:51,742 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:54:51,742 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:54:48" (1/6) ...
[2020-11-25 11:54:51,744 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:54:51, skipping insertion in model container
[2020-11-25 11:54:51,744 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:54:51,744 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:54:48" (2/6) ...
[2020-11-25 11:54:51,744 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:54:51, skipping insertion in model container
[2020-11-25 11:54:51,744 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:54:51,744 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:54:49" (3/6) ...
[2020-11-25 11:54:51,744 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:54:51, skipping insertion in model container
[2020-11-25 11:54:51,744 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:54:51,744 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:54:49" (4/6) ...
[2020-11-25 11:54:51,744 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:54:51, skipping insertion in model container
[2020-11-25 11:54:51,744 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:54:51,745 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:54:51" (5/6) ...
[2020-11-25 11:54:51,745 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:54:51, skipping insertion in model container
[2020-11-25 11:54:51,745 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:54:51,745 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:54:51" (6/6) ...
[2020-11-25 11:54:51,746 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self-fail.bpl_BEv2
[2020-11-25 11:54:51,779 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:54:51,780 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:54:51,780 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:54:51,780 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:54:51,780 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:54:51,780 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:54:51,780 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:54:51,780 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:54:51,780 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:54:51,817 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5782 states.
[2020-11-25 11:54:51,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:51,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:51,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:51,892 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:51,892 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:51,892 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:54:51,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5782 states.
[2020-11-25 11:54:51,920 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:51,921 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:51,921 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:51,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:51,923 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                fail_transferFrom_ERC200 := false;
[L2]                call_transferFrom_ERC200 := false;
[L2]     CALL       call main();
[L6461]             assume null == 0;
[L6462]  CALL       call this := FreshRefGenerator__success();
[L2550]             havoc newRef;
[L2551]             assume Alloc[newRef] == false;
[L2552]             Alloc[newRef] := true;
[L2553]             assume newRef != null;
[L6462]  RET        call this := FreshRefGenerator__success();
[L6463]             assume now >= 0;
[L6464]             assume DType[this] == CabGoldToken;
[L6465]             assume msgvalue_MSG == 0;
[L6466]             gas := gas - 53000;
[L6467]  CALL       call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL       call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL       call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]             assume msgsender_MSG != null;
[L2734]             Balance[this] := 0;
[L2748]  RET        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND TRUE  revert
[L4138]  RET        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE  revert
[L6467]  RET        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]             assume !revert && gas >= 0;

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:51,940 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:51,941 INFO  L82        PathProgramCache]: Analyzing trace with hash -215587831, now seen corresponding path program 1 times
[2020-11-25 11:54:51,946 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:51,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:52,010 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:54:52,012 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:52,012 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:54:52,349 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:52,361 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:54:52,361 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:54:52,363 INFO  L87              Difference]: Start difference. First operand 5782 states. Second operand 4 states.
[2020-11-25 11:54:53,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:53,062 INFO  L93              Difference]: Finished difference Result 3492 states and 4253 transitions.
[2020-11-25 11:54:53,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:54:53,063 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3492 states and 4253 transitions.
[2020-11-25 11:54:53,086 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:53,117 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3492 states to 3492 states and 4253 transitions.
[2020-11-25 11:54:53,117 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 11:54:53,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 865
[2020-11-25 11:54:53,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3492 states and 4253 transitions.
[2020-11-25 11:54:53,132 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:53,132 INFO  L728         BuchiCegarLoop]: Abstraction has 3492 states and 4253 transitions.
[2020-11-25 11:54:53,150 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3492 states and 4253 transitions.
[2020-11-25 11:54:53,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3492 to 3492.
[2020-11-25 11:54:53,207 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3492 states.
[2020-11-25 11:54:53,213 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3492 states to 3492 states and 4253 transitions.
[2020-11-25 11:54:53,213 INFO  L751         BuchiCegarLoop]: Abstraction has 3492 states and 4253 transitions.
[2020-11-25 11:54:53,214 INFO  L631         BuchiCegarLoop]: Abstraction has 3492 states and 4253 transitions.
[2020-11-25 11:54:53,214 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:54:53,214 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3492 states and 4253 transitions.
[2020-11-25 11:54:53,221 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:53,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:53,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:53,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:53,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND TRUE   revert
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND TRUE   revert
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:53,226 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:53,226 INFO  L82        PathProgramCache]: Analyzing trace with hash 1166343667, now seen corresponding path program 1 times
[2020-11-25 11:54:53,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:53,237 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:53,259 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:54:53,259 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:53,259 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:54:53,260 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:53,260 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:54:53,260 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:54:53,260 INFO  L87              Difference]: Start difference. First operand 3492 states and 4253 transitions. cyclomatic complexity: 763 Second operand 3 states.
[2020-11-25 11:54:53,367 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:53,367 INFO  L93              Difference]: Finished difference Result 4801 states and 5887 transitions.
[2020-11-25 11:54:53,367 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:54:53,367 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4801 states and 5887 transitions.
[2020-11-25 11:54:53,383 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:53,402 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4801 states to 4801 states and 5887 transitions.
[2020-11-25 11:54:53,403 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1250
[2020-11-25 11:54:53,404 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1250
[2020-11-25 11:54:53,404 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4801 states and 5887 transitions.
[2020-11-25 11:54:53,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:53,409 INFO  L728         BuchiCegarLoop]: Abstraction has 4801 states and 5887 transitions.
[2020-11-25 11:54:53,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4801 states and 5887 transitions.
[2020-11-25 11:54:53,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4801 to 4326.
[2020-11-25 11:54:53,460 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4326 states.
[2020-11-25 11:54:53,465 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4326 states to 4326 states and 5315 transitions.
[2020-11-25 11:54:53,465 INFO  L751         BuchiCegarLoop]: Abstraction has 4326 states and 5315 transitions.
[2020-11-25 11:54:53,466 INFO  L631         BuchiCegarLoop]: Abstraction has 4326 states and 5315 transitions.
[2020-11-25 11:54:53,466 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:54:53,466 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4326 states and 5315 transitions.
[2020-11-25 11:54:53,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:53,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:53,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:53,475 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:53,475 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND TRUE   revert
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND TRUE   revert
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND TRUE   revert
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:53,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:53,477 INFO  L82        PathProgramCache]: Analyzing trace with hash -986763151, now seen corresponding path program 1 times
[2020-11-25 11:54:53,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:53,483 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:53,496 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:54:53,497 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:53,497 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:54:53,497 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:53,497 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:54:53,497 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:54:53,497 INFO  L87              Difference]: Start difference. First operand 4326 states and 5315 transitions. cyclomatic complexity: 991 Second operand 3 states.
[2020-11-25 11:54:53,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:53,576 INFO  L93              Difference]: Finished difference Result 4802 states and 5611 transitions.
[2020-11-25 11:54:53,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:54:53,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4802 states and 5611 transitions.
[2020-11-25 11:54:53,588 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:53,605 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4802 states to 4354 states and 5055 transitions.
[2020-11-25 11:54:53,605 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-25 11:54:53,606 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1144
[2020-11-25 11:54:53,606 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4354 states and 5055 transitions.
[2020-11-25 11:54:53,610 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:53,610 INFO  L728         BuchiCegarLoop]: Abstraction has 4354 states and 5055 transitions.
[2020-11-25 11:54:53,614 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4354 states and 5055 transitions.
[2020-11-25 11:54:53,655 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4354 to 3962.
[2020-11-25 11:54:53,655 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3962 states.
[2020-11-25 11:54:53,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3962 states to 3962 states and 4566 transitions.
[2020-11-25 11:54:53,660 INFO  L751         BuchiCegarLoop]: Abstraction has 3962 states and 4566 transitions.
[2020-11-25 11:54:53,660 INFO  L631         BuchiCegarLoop]: Abstraction has 3962 states and 4566 transitions.
[2020-11-25 11:54:53,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:54:53,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3962 states and 4566 transitions.
[2020-11-25 11:54:53,667 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:53,667 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:53,667 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:53,670 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:53,671 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:53,676 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:53,676 INFO  L82        PathProgramCache]: Analyzing trace with hash 2064027569, now seen corresponding path program 1 times
[2020-11-25 11:54:53,677 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:53,688 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:53,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 271 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 262 trivial. 0 not checked.
[2020-11-25 11:54:53,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:54:53,801 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:54:53,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:53,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:54:53,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:54:53,802 INFO  L87              Difference]: Start difference. First operand 3962 states and 4566 transitions. cyclomatic complexity: 606 Second operand 6 states.
[2020-11-25 11:54:53,895 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:53,895 INFO  L93              Difference]: Finished difference Result 3981 states and 4588 transitions.
[2020-11-25 11:54:53,895 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:54:53,895 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3981 states and 4588 transitions.
[2020-11-25 11:54:53,904 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:53,916 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3981 states to 3968 states and 4572 transitions.
[2020-11-25 11:54:53,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 11:54:53,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 11:54:53,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3968 states and 4572 transitions.
[2020-11-25 11:54:53,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:53,921 INFO  L728         BuchiCegarLoop]: Abstraction has 3968 states and 4572 transitions.
[2020-11-25 11:54:53,924 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3968 states and 4572 transitions.
[2020-11-25 11:54:53,949 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3968 to 3968.
[2020-11-25 11:54:53,949 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3968 states.
[2020-11-25 11:54:53,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3968 states to 3968 states and 4572 transitions.
[2020-11-25 11:54:53,954 INFO  L751         BuchiCegarLoop]: Abstraction has 3968 states and 4572 transitions.
[2020-11-25 11:54:53,954 INFO  L631         BuchiCegarLoop]: Abstraction has 3968 states and 4572 transitions.
[2020-11-25 11:54:53,954 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:54:53,954 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3968 states and 4572 transitions.
[2020-11-25 11:54:53,958 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:53,959 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:53,959 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:53,961 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:53,961 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:53,966 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:53,966 INFO  L82        PathProgramCache]: Analyzing trace with hash -1797655125, now seen corresponding path program 1 times
[2020-11-25 11:54:53,967 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:53,976 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:54,054 INFO  L134       CoverageAnalysis]: Checked inductivity of 272 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 263 trivial. 0 not checked.
[2020-11-25 11:54:54,054 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:54:54,054 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:54:54,055 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:54,055 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:54:54,055 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:54:54,055 INFO  L87              Difference]: Start difference. First operand 3968 states and 4572 transitions. cyclomatic complexity: 606 Second operand 6 states.
[2020-11-25 11:54:54,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:54,142 INFO  L93              Difference]: Finished difference Result 3987 states and 4594 transitions.
[2020-11-25 11:54:54,142 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:54:54,142 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3987 states and 4594 transitions.
[2020-11-25 11:54:54,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:54,173 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3987 states to 3974 states and 4578 transitions.
[2020-11-25 11:54:54,173 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 11:54:54,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 11:54:54,174 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3974 states and 4578 transitions.
[2020-11-25 11:54:54,177 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:54,177 INFO  L728         BuchiCegarLoop]: Abstraction has 3974 states and 4578 transitions.
[2020-11-25 11:54:54,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3974 states and 4578 transitions.
[2020-11-25 11:54:54,201 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3974 to 3968.
[2020-11-25 11:54:54,202 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3968 states.
[2020-11-25 11:54:54,205 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3968 states to 3968 states and 4572 transitions.
[2020-11-25 11:54:54,206 INFO  L751         BuchiCegarLoop]: Abstraction has 3968 states and 4572 transitions.
[2020-11-25 11:54:54,206 INFO  L631         BuchiCegarLoop]: Abstraction has 3968 states and 4572 transitions.
[2020-11-25 11:54:54,206 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:54:54,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3968 states and 4572 transitions.
[2020-11-25 11:54:54,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:54,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:54,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:54,213 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:54,213 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:54,217 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:54,217 INFO  L82        PathProgramCache]: Analyzing trace with hash -1779212757, now seen corresponding path program 1 times
[2020-11-25 11:54:54,218 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:54,236 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:54,389 INFO  L134       CoverageAnalysis]: Checked inductivity of 270 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 250 trivial. 0 not checked.
[2020-11-25 11:54:54,389 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:54,389 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 11:54:54,390 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:54,390 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 11:54:54,390 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 11:54:54,390 INFO  L87              Difference]: Start difference. First operand 3968 states and 4572 transitions. cyclomatic complexity: 606 Second operand 14 states.
[2020-11-25 11:54:56,822 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:56,822 INFO  L93              Difference]: Finished difference Result 4057 states and 4669 transitions.
[2020-11-25 11:54:56,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 11:54:56,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4057 states and 4669 transitions.
[2020-11-25 11:54:56,829 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:56,839 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4057 states to 4057 states and 4669 transitions.
[2020-11-25 11:54:56,839 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1119
[2020-11-25 11:54:56,840 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1119
[2020-11-25 11:54:56,840 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4057 states and 4669 transitions.
[2020-11-25 11:54:56,843 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:56,843 INFO  L728         BuchiCegarLoop]: Abstraction has 4057 states and 4669 transitions.
[2020-11-25 11:54:56,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4057 states and 4669 transitions.
[2020-11-25 11:54:56,867 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4057 to 3830.
[2020-11-25 11:54:56,868 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3830 states.
[2020-11-25 11:54:56,871 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3830 states to 3830 states and 4401 transitions.
[2020-11-25 11:54:56,871 INFO  L751         BuchiCegarLoop]: Abstraction has 3830 states and 4401 transitions.
[2020-11-25 11:54:56,871 INFO  L631         BuchiCegarLoop]: Abstraction has 3830 states and 4401 transitions.
[2020-11-25 11:54:56,871 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:54:56,871 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3830 states and 4401 transitions.
[2020-11-25 11:54:56,875 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:56,875 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:56,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:56,877 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:56,877 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND TRUE   choice == 14
[L6363]              gas := gas - 21000;
[L6364]  COND TRUE   gas >= 0
[L6365]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6366]              assume msgvalue_MSG == 0;
[L6367]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L539]               havoc __exception;
[L540]               revert := false;
[L541]   COND FALSE  !(__exception)
[L567]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2929]  COND TRUE   DType[this] == CabGoldToken
[L2930]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L2930]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2931]  COND FALSE  !(revert)
[L2952]              __ret_0_ := true;
[L567]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L568]               assume !revert && gas >= 0;
[L6367]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:56,882 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:56,882 INFO  L82        PathProgramCache]: Analyzing trace with hash -1330937296, now seen corresponding path program 1 times
[2020-11-25 11:54:56,883 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:56,898 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:57,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 331 backedges. 20 proven. 4 refuted. 0 times theorem prover too weak. 307 trivial. 0 not checked.
[2020-11-25 11:54:57,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:54:57,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 11:54:57,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:57,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 11:54:57,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 11:54:57,050 INFO  L87              Difference]: Start difference. First operand 3830 states and 4401 transitions. cyclomatic complexity: 574 Second operand 15 states.
[2020-11-25 11:54:59,061 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:59,061 INFO  L93              Difference]: Finished difference Result 3893 states and 4475 transitions.
[2020-11-25 11:54:59,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 11:54:59,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3893 states and 4475 transitions.
[2020-11-25 11:54:59,068 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3893 states to 3893 states and 4475 transitions.
[2020-11-25 11:54:59,077 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1025
[2020-11-25 11:54:59,077 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1025
[2020-11-25 11:54:59,077 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3893 states and 4475 transitions.
[2020-11-25 11:54:59,080 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:59,080 INFO  L728         BuchiCegarLoop]: Abstraction has 3893 states and 4475 transitions.
[2020-11-25 11:54:59,083 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3893 states and 4475 transitions.
[2020-11-25 11:54:59,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3893 to 3847.
[2020-11-25 11:54:59,105 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3847 states.
[2020-11-25 11:54:59,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3847 states to 3847 states and 4428 transitions.
[2020-11-25 11:54:59,109 INFO  L751         BuchiCegarLoop]: Abstraction has 3847 states and 4428 transitions.
[2020-11-25 11:54:59,109 INFO  L631         BuchiCegarLoop]: Abstraction has 3847 states and 4428 transitions.
[2020-11-25 11:54:59,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:54:59,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3847 states and 4428 transitions.
[2020-11-25 11:54:59,113 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,113 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:59,113 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:59,114 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:59,114 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND FALSE  !(DType[this] == CabGoldToken)
[L3021]  COND TRUE   DType[this] == ERC20Burnable
[L3022]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3022]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3023]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND FALSE  !(DType[this] == CabGoldToken)
[L3048]  COND FALSE  !(DType[this] == ERC20Burnable)
[L3053]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3058]  COND TRUE   DType[this] == ERC20
[L3059]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3059]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3060]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:59,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:59,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -742555388, now seen corresponding path program 1 times
[2020-11-25 11:54:59,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:59,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:59,225 INFO  L134       CoverageAnalysis]: Checked inductivity of 342 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 336 trivial. 0 not checked.
[2020-11-25 11:54:59,225 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:59,225 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:54:59,226 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:59,226 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:54:59,226 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:54:59,226 INFO  L87              Difference]: Start difference. First operand 3847 states and 4428 transitions. cyclomatic complexity: 586 Second operand 7 states.
[2020-11-25 11:54:59,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:59,298 INFO  L93              Difference]: Finished difference Result 3870 states and 4453 transitions.
[2020-11-25 11:54:59,298 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:54:59,298 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3870 states and 4453 transitions.
[2020-11-25 11:54:59,304 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,312 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3870 states to 3843 states and 4422 transitions.
[2020-11-25 11:54:59,312 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1011
[2020-11-25 11:54:59,313 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-25 11:54:59,313 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3843 states and 4422 transitions.
[2020-11-25 11:54:59,315 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:59,315 INFO  L728         BuchiCegarLoop]: Abstraction has 3843 states and 4422 transitions.
[2020-11-25 11:54:59,318 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3843 states and 4422 transitions.
[2020-11-25 11:54:59,337 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3843 to 3843.
[2020-11-25 11:54:59,337 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3843 states.
[2020-11-25 11:54:59,340 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3843 states to 3843 states and 4422 transitions.
[2020-11-25 11:54:59,341 INFO  L751         BuchiCegarLoop]: Abstraction has 3843 states and 4422 transitions.
[2020-11-25 11:54:59,341 INFO  L631         BuchiCegarLoop]: Abstraction has 3843 states and 4422 transitions.
[2020-11-25 11:54:59,341 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:54:59,341 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3843 states and 4422 transitions.
[2020-11-25 11:54:59,345 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,345 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:59,345 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:59,346 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:59,346 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND FALSE  !(DType[this] == CabGoldToken)
[L3021]  COND FALSE  !(DType[this] == ERC20Burnable)
[L3026]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3031]  COND TRUE   DType[this] == ERC20
[L3032]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3032]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3033]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:59,350 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:59,350 INFO  L82        PathProgramCache]: Analyzing trace with hash -7447762, now seen corresponding path program 1 times
[2020-11-25 11:54:59,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:59,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:59,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 342 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 336 trivial. 0 not checked.
[2020-11-25 11:54:59,474 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:59,474 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:54:59,474 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:59,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:54:59,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:54:59,474 INFO  L87              Difference]: Start difference. First operand 3843 states and 4422 transitions. cyclomatic complexity: 584 Second operand 7 states.
[2020-11-25 11:54:59,541 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:59,541 INFO  L93              Difference]: Finished difference Result 3860 states and 4441 transitions.
[2020-11-25 11:54:59,542 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:54:59,542 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3860 states and 4441 transitions.
[2020-11-25 11:54:59,548 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,555 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3860 states to 3831 states and 4408 transitions.
[2020-11-25 11:54:59,555 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1011
[2020-11-25 11:54:59,555 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-25 11:54:59,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3831 states and 4408 transitions.
[2020-11-25 11:54:59,557 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:59,558 INFO  L728         BuchiCegarLoop]: Abstraction has 3831 states and 4408 transitions.
[2020-11-25 11:54:59,561 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3831 states and 4408 transitions.
[2020-11-25 11:54:59,579 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3831 to 3831.
[2020-11-25 11:54:59,579 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3831 states.
[2020-11-25 11:54:59,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3831 states to 3831 states and 4408 transitions.
[2020-11-25 11:54:59,583 INFO  L751         BuchiCegarLoop]: Abstraction has 3831 states and 4408 transitions.
[2020-11-25 11:54:59,583 INFO  L631         BuchiCegarLoop]: Abstraction has 3831 states and 4408 transitions.
[2020-11-25 11:54:59,583 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 11:54:59,583 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3831 states and 4408 transitions.
[2020-11-25 11:54:59,586 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:59,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:59,588 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:59,588 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND FALSE  !(DType[this] == CabGoldToken)
[L3021]  COND TRUE   DType[this] == ERC20Burnable
[L3022]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3022]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3023]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND FALSE  !(DType[this] == CabGoldToken)
[L3048]  COND FALSE  !(DType[this] == ERC20Burnable)
[L3053]  COND TRUE   DType[this] == ERC20Mintable
[L3054]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3054]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3055]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:59,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:59,592 INFO  L82        PathProgramCache]: Analyzing trace with hash -391530877, now seen corresponding path program 1 times
[2020-11-25 11:54:59,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:59,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:59,698 INFO  L134       CoverageAnalysis]: Checked inductivity of 346 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-25 11:54:59,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:59,698 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:54:59,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:59,699 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:54:59,699 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:54:59,699 INFO  L87              Difference]: Start difference. First operand 3831 states and 4408 transitions. cyclomatic complexity: 582 Second operand 6 states.
[2020-11-25 11:54:59,769 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:59,769 INFO  L93              Difference]: Finished difference Result 3873 states and 4451 transitions.
[2020-11-25 11:54:59,769 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:54:59,769 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3873 states and 4451 transitions.
[2020-11-25 11:54:59,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,782 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3873 states to 3771 states and 4324 transitions.
[2020-11-25 11:54:59,782 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 996
[2020-11-25 11:54:59,783 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 11:54:59,783 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3771 states and 4324 transitions.
[2020-11-25 11:54:59,786 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:59,786 INFO  L728         BuchiCegarLoop]: Abstraction has 3771 states and 4324 transitions.
[2020-11-25 11:54:59,789 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3771 states and 4324 transitions.
[2020-11-25 11:54:59,809 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3771 to 3771.
[2020-11-25 11:54:59,809 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3771 states.
[2020-11-25 11:54:59,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3771 states to 3771 states and 4324 transitions.
[2020-11-25 11:54:59,813 INFO  L751         BuchiCegarLoop]: Abstraction has 3771 states and 4324 transitions.
[2020-11-25 11:54:59,813 INFO  L631         BuchiCegarLoop]: Abstraction has 3771 states and 4324 transitions.
[2020-11-25 11:54:59,814 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 11:54:59,814 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3771 states and 4324 transitions.
[2020-11-25 11:54:59,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:59,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:59,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:59,820 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:59,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND TRUE   choice == 13
[L6370]              gas := gas - 21000;
[L6371]  COND TRUE   gas >= 0
[L6372]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6373]              assume msgvalue_MSG == 0;
[L6374]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 == recipient_s325 && (amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG])) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L603]               havoc __exception;
[L604]               revert := false;
[L605]   COND FALSE  !(__exception)
[L631]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3016]  COND TRUE   DType[this] == CabGoldToken
[L3017]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3017]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3018]  COND FALSE  !(revert)
[L3039]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3039]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L3040]  COND FALSE  !(revert)
[L3043]  COND TRUE   DType[this] == CabGoldToken
[L3044]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3392]              __var_14 := null;
[L3393]  COND FALSE  !(!(owner_s563 != null))
[L3397]              __var_15 := null;
[L3398]  COND FALSE  !(!(spender_s563 != null))
[L3402]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3403]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3404]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3405]              assert { :EventEmitted "Approval_ERC20" } true;
[L3044]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L3045]  COND FALSE  !(revert)
[L3066]              __ret_0_ := true;
[L631]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L632]               assume !revert && gas >= 0;
[L6374]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:59,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:59,825 INFO  L82        PathProgramCache]: Analyzing trace with hash 1353520160, now seen corresponding path program 1 times
[2020-11-25 11:54:59,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:59,847 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:55:00,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 346 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 346 trivial. 0 not checked.
[2020-11-25 11:55:00,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:55:00,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 11:55:00,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:55:00,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 11:55:00,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=86, Unknown=0, NotChecked=0, Total=110
[2020-11-25 11:55:00,020 INFO  L87              Difference]: Start difference. First operand 3771 states and 4324 transitions. cyclomatic complexity: 558 Second operand 11 states.
[2020-11-25 11:55:00,973 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:55:00,973 INFO  L93              Difference]: Finished difference Result 2123 states and 2424 transitions.
[2020-11-25 11:55:00,974 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 11:55:00,974 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2123 states and 2424 transitions.
[2020-11-25 11:55:00,978 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:55:00,978 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2123 states to 0 states and 0 transitions.
[2020-11-25 11:55:00,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:55:00,978 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:55:00,978 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:55:00,978 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:55:00,978 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:55:00,978 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:55:00,979 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:55:00,979 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 11:55:00,979 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:55:00,979 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:55:00,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:55:00,982 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:55:00 BasicIcfg
[2020-11-25 11:55:00,982 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:55:00,982 INFO  L168              Benchmark]: Toolchain (without parser) took 12451.64 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 929.8 MB in the beginning and 869.5 MB in the end (delta: 60.4 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,983 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,983 INFO  L168              Benchmark]: Boogie Preprocessor took 133.17 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,983 INFO  L168              Benchmark]: UtopiaSpecLang took 63.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,983 INFO  L168              Benchmark]: Boogie Printer took 26.88 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,984 INFO  L168              Benchmark]: RCFGBuilder took 1015.54 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -98.0 MB). Peak memory consumption was 189.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,984 INFO  L168              Benchmark]: UtopiaLTL2Aut took 51.24 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 988.0 MB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,985 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1761.09 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 988.0 MB in the beginning and 960.9 MB in the end (delta: 27.1 MB). Peak memory consumption was 492.2 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,985 INFO  L168              Benchmark]: BlockEncodingV2 took 155.45 ms. Allocated memory is still 1.3 GB. Free memory was 960.9 MB in the beginning and 866.4 MB in the end (delta: 94.5 MB). Peak memory consumption was 94.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,985 INFO  L168              Benchmark]: BuchiAutomizer took 9241.77 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 833.1 MB). Free memory was 866.4 MB in the beginning and 869.5 MB in the end (delta: -3.1 MB). Peak memory consumption was 830.0 MB. Max. memory is 15.3 GB.
[2020-11-25 11:55:00,987 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5914 locations, 11045 edges
  - StatisticsResult: Encoded RCFG
    5782 locations, 10702 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 133.17 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.88 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 1015.54 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -98.0 MB). Peak memory consumption was 189.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 51.24 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 988.0 MB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1761.09 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 988.0 MB in the beginning and 960.9 MB in the end (delta: 27.1 MB). Peak memory consumption was 492.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 155.45 ms. Allocated memory is still 1.3 GB. Free memory was 960.9 MB in the beginning and 866.4 MB in the end (delta: 94.5 MB). Peak memory consumption was 94.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9241.77 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 833.1 MB). Free memory was 866.4 MB in the beginning and 869.5 MB in the end (delta: -3.1 MB). Peak memory consumption was 830.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2278 locations, 3351 edges
  - StatisticsResult: BuchiProgram size
    5914 locations, 11045 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 15 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.2s and 12 iterations.  TraceHistogramMax:6. Analysis of lassos took 1.6s. Construction of modules took 4.7s. BÃ¼chi inclusion checks took 1.9s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 10 MinimizatonAttempts, 1146 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4326 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 43400 SDtfs, 18929 SDslu, 121887 SDs, 0 SdLazy, 86618 SolverSat, 3987 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
