This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:36:52,273 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:36:52,275 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:36:52,286 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:36:52,286 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:36:52,287 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:36:52,288 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:36:52,289 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:36:52,291 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:36:52,291 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:36:52,292 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:36:52,292 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:36:52,293 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:36:52,294 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:36:52,294 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:36:52,295 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:36:52,296 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:36:52,297 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:36:52,298 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:36:52,299 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:36:52,300 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:36:52,301 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:36:52,302 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:36:52,303 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:36:52,303 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:36:52,303 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:36:52,304 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:36:52,304 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:36:52,304 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:36:52,305 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:36:52,305 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:36:52,306 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:36:52,306 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:36:52,306 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:36:52,307 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:36:52,307 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:36:52,308 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:36:52,308 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:36:52,308 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:36:52,309 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:36:52,309 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:36:52,309 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:36:52,317 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:36:52,317 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:36:52,318 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:36:52,318 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:36:52,318 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:36:52,319 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:36:52,319 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:36:52,319 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:36:52,319 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:36:52,319 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:36:52,319 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:36:52,319 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:36:52,320 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:36:52,320 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:36:52,321 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:36:52,321 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:36:52,321 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:36:52,321 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:36:52,321 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:36:52,321 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:36:52,342 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:36:52,355 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:36:52,358 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:36:52,359 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:36:52,359 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:36:52,360 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl
[2020-11-25 08:36:52,361 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl'
[2020-11-25 08:36:52,476 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:36:52,477 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:36:52,478 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:36:52,478 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:36:52,478 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:36:52,494 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,495 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,536 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,536 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,567 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,582 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,596 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,611 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:36:52,612 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:36:52,612 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:36:52,614 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:36:52,618 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/1) ...
[2020-11-25 08:36:52,639 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:52,648 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:52,662 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:52,670 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s336 && amount_s336<=_balances_ERC20[this][msg.sender] ) && amount_s336>=0 ) && amount_s336<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s336]>=0 ) && _balances_ERC20[this][recipient_s336]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:36:52,673 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 08:36:52,681 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:52,682 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:36:52,698 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:52 PropertyContainer
[2020-11-25 08:36:52,699 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:36:52,699 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:36:52,699 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:36:52,699 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:36:52,700 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/2) ...
[2020-11-25 08:36:52,701 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:36:52,701 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:36:52,725 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:52" (2/2) ...
[2020-11-25 08:36:52,725 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:36:52,726 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:36:52,726 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:36:52,726 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:36:52,727 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/2) ...
[2020-11-25 08:36:52,781 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:36:52,781 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:36:52,781 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:36:52,781 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:36:52,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:36:52,781 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:36:52,781 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:36:52,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:36:52,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:36:52,782 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:36:52,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:36:52,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 08:36:52,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:36:52,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:36:52,783 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:36:52,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:36:52,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:36:52,784 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:36:52,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:36:52,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:36:52,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:36:52,785 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:36:52,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:36:52,785 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:36:52,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:36:52,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:36:52,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:36:52,785 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:52,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:52,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:36:52,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:36:52,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:36:52,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:36:52,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:36:52,787 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:36:52,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:36:52,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:36:52,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:36:52,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:36:52,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:36:52,789 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:36:52,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:36:52,789 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 08:36:52,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 08:36:52,789 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:36:52,789 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:36:52,789 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken
[2020-11-25 08:36:52,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken
[2020-11-25 08:36:52,789 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken
[2020-11-25 08:36:52,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:36:52,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:36:52,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:36:52,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIToken
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:36:52,792 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:36:52,793 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:36:52,794 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:36:52,795 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:36:52,796 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:36:52,797 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:36:52,798 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:36:52,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__success
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__success
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:36:52,800 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:36:52,801 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:36:52,801 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:36:52,801 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:36:52,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:36:52,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:36:52,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:36:52,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:36:52,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:36:52,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:36:52,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:36:52,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:36:52,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__fail
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__success
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__fail
[2020-11-25 08:36:52,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__success
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:36:52,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:36:52,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:36:52,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:36:52,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 08:36:52,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 08:36:52,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIToken
[2020-11-25 08:36:52,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:36:52,813 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:36:52,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:36:53,131 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:53,131 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:53,132 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:53,901 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:36:53,902 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:36:53,903 INFO  L202        PluginConnector]: Adding new model VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:53 BoogieIcfgContainer
[2020-11-25 08:36:53,904 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:52" (2/2) ...
[2020-11-25 08:36:53,904 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:36:53,904 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@426672ea and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:53, skipping insertion in model container
[2020-11-25 08:36:53,904 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:36:53,904 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:36:53,904 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:36:53,905 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:36:53,905 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/3) ...
[2020-11-25 08:36:53,906 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@10c6295c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:53, skipping insertion in model container
[2020-11-25 08:36:53,906 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:52" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:36:53,936 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:53 NWAContainer
[2020-11-25 08:36:53,936 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:36:53,936 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:36:53,936 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:36:53,937 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:36:53,938 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:53" (3/4) ...
[2020-11-25 08:36:53,938 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@473ef68f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:53, skipping insertion in model container
[2020-11-25 08:36:53,938 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:53" (4/4) ...
[2020-11-25 08:36:53,940 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:36:53,945 INFO  L110   BuchiProductObserver]: Initial RCFG 3084 locations, 4749 edges
[2020-11-25 08:36:53,945 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:36:53,956 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:36:56,474 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:36:56,484 INFO  L110   BuchiProductObserver]: BuchiProgram size 8160 locations, 15600 edges
[2020-11-25 08:36:56,485 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:56 BoogieIcfgContainer
[2020-11-25 08:36:56,485 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:36:56,485 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:36:56,485 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:36:56,486 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:36:56,487 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:56" (1/1) ...
[2020-11-25 08:36:56,628 INFO  L313           BlockEncoder]: Initial Icfg 8160 locations, 15600 edges
[2020-11-25 08:36:56,628 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:36:56,628 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:36:56,629 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:36:56,629 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:36:56,645 INFO  L70    emoveInfeasibleEdges]: Removed 252 edges and 23 locations because of local infeasibility
[2020-11-25 08:36:56,659 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:36:56,680 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:36:56,685 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:36:56,690 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:36:56,690 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:36:56,694 INFO  L313           BlockEncoder]: Encoded RCFG 7992 locations, 15131 edges
[2020-11-25 08:36:56,695 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:36:56 BasicIcfg
[2020-11-25 08:36:56,695 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:36:56,695 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:36:56,695 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:36:56,697 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:36:56,697 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:56,697 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:52" (1/6) ...
[2020-11-25 08:36:56,698 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@38f824 and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:36:56, skipping insertion in model container
[2020-11-25 08:36:56,698 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:56,699 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:52" (2/6) ...
[2020-11-25 08:36:56,699 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@38f824 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:36:56, skipping insertion in model container
[2020-11-25 08:36:56,699 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:56,699 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:53" (3/6) ...
[2020-11-25 08:36:56,699 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@38f824 and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:36:56, skipping insertion in model container
[2020-11-25 08:36:56,699 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:56,699 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:53" (4/6) ...
[2020-11-25 08:36:56,699 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@38f824 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:36:56, skipping insertion in model container
[2020-11-25 08:36:56,699 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:56,699 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:56" (5/6) ...
[2020-11-25 08:36:56,700 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@38f824 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:36:56, skipping insertion in model container
[2020-11-25 08:36:56,700 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:56,700 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:36:56" (6/6) ...
[2020-11-25 08:36:56,701 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self.bpl_BEv2
[2020-11-25 08:36:56,743 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:36:56,743 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:36:56,744 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:36:56,744 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:36:56,744 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:36:56,744 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:36:56,744 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:36:56,744 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:36:56,744 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:36:56,810 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7992 states.
[2020-11-25 08:36:56,891 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:56,891 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:56,891 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:56,901 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:56,901 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:56,901 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:36:56,901 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7992 states.
[2020-11-25 08:36:56,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:56,942 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:56,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:56,944 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:56,945 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:56,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:56,962 INFO  L82        PathProgramCache]: Analyzing trace with hash -1221992122, now seen corresponding path program 1 times
[2020-11-25 08:36:56,968 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:56,989 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:57,030 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:36:57,032 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:57,032 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:36:57,363 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:57,376 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:36:57,377 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:36:57,378 INFO  L87              Difference]: Start difference. First operand 7992 states. Second operand 4 states.
[2020-11-25 08:36:58,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:58,248 INFO  L93              Difference]: Finished difference Result 4692 states and 5966 transitions.
[2020-11-25 08:36:58,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:36:58,249 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4692 states and 5966 transitions.
[2020-11-25 08:36:58,278 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:58,309 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4692 states to 4692 states and 5966 transitions.
[2020-11-25 08:36:58,309 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:36:58,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 877
[2020-11-25 08:36:58,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4692 states and 5966 transitions.
[2020-11-25 08:36:58,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:58,324 INFO  L728         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:36:58,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4692 states and 5966 transitions.
[2020-11-25 08:36:58,429 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4692 to 4692.
[2020-11-25 08:36:58,430 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4692 states.
[2020-11-25 08:36:58,442 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4692 states to 4692 states and 5966 transitions.
[2020-11-25 08:36:58,443 INFO  L751         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:36:58,443 INFO  L631         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:36:58,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:36:58,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4692 states and 5966 transitions.
[2020-11-25 08:36:58,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:58,457 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:58,457 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:58,460 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:58,461 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:58,466 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:58,466 INFO  L82        PathProgramCache]: Analyzing trace with hash -1926525350, now seen corresponding path program 1 times
[2020-11-25 08:36:58,467 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:58,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:58,504 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:36:58,504 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:58,504 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:58,506 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:58,506 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:58,506 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:58,506 INFO  L87              Difference]: Start difference. First operand 4692 states and 5966 transitions. cyclomatic complexity: 1276 Second operand 3 states.
[2020-11-25 08:36:58,707 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:58,708 INFO  L93              Difference]: Finished difference Result 5960 states and 7345 transitions.
[2020-11-25 08:36:58,708 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:58,708 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5960 states and 7345 transitions.
[2020-11-25 08:36:58,730 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:58,759 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5960 states to 5960 states and 7345 transitions.
[2020-11-25 08:36:58,759 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1235
[2020-11-25 08:36:58,761 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1235
[2020-11-25 08:36:58,761 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5960 states and 7345 transitions.
[2020-11-25 08:36:58,768 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:58,769 INFO  L728         BuchiCegarLoop]: Abstraction has 5960 states and 7345 transitions.
[2020-11-25 08:36:58,775 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5960 states and 7345 transitions.
[2020-11-25 08:36:58,846 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5960 to 5330.
[2020-11-25 08:36:58,846 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5330 states.
[2020-11-25 08:36:58,855 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5330 states to 5330 states and 6579 transitions.
[2020-11-25 08:36:58,855 INFO  L751         BuchiCegarLoop]: Abstraction has 5330 states and 6579 transitions.
[2020-11-25 08:36:58,855 INFO  L631         BuchiCegarLoop]: Abstraction has 5330 states and 6579 transitions.
[2020-11-25 08:36:58,855 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:36:58,855 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5330 states and 6579 transitions.
[2020-11-25 08:36:58,865 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:58,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:58,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:58,868 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:58,869 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:58,874 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:58,874 INFO  L82        PathProgramCache]: Analyzing trace with hash 1248959280, now seen corresponding path program 1 times
[2020-11-25 08:36:58,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:58,890 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:58,951 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:36:58,951 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:58,951 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:58,952 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:58,952 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:58,952 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:58,952 INFO  L87              Difference]: Start difference. First operand 5330 states and 6579 transitions. cyclomatic complexity: 1251 Second operand 3 states.
[2020-11-25 08:36:59,030 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:59,030 INFO  L93              Difference]: Finished difference Result 5335 states and 6584 transitions.
[2020-11-25 08:36:59,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:59,031 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5335 states and 6584 transitions.
[2020-11-25 08:36:59,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,067 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5335 states to 5335 states and 6584 transitions.
[2020-11-25 08:36:59,067 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1069
[2020-11-25 08:36:59,068 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1069
[2020-11-25 08:36:59,068 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5335 states and 6584 transitions.
[2020-11-25 08:36:59,074 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:59,074 INFO  L728         BuchiCegarLoop]: Abstraction has 5335 states and 6584 transitions.
[2020-11-25 08:36:59,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5335 states and 6584 transitions.
[2020-11-25 08:36:59,153 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5335 to 5331.
[2020-11-25 08:36:59,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5331 states.
[2020-11-25 08:36:59,160 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5331 states to 5331 states and 6580 transitions.
[2020-11-25 08:36:59,160 INFO  L751         BuchiCegarLoop]: Abstraction has 5331 states and 6580 transitions.
[2020-11-25 08:36:59,160 INFO  L631         BuchiCegarLoop]: Abstraction has 5331 states and 6580 transitions.
[2020-11-25 08:36:59,160 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:36:59,160 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5331 states and 6580 transitions.
[2020-11-25 08:36:59,167 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:59,167 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:59,169 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:59,169 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND TRUE   DType[this] == ERC20Mintable
[L4769]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4769]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4770]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:59,179 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:59,179 INFO  L82        PathProgramCache]: Analyzing trace with hash -362509486, now seen corresponding path program 1 times
[2020-11-25 08:36:59,180 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:59,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:59,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:36:59,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:59,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:59,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:59,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:59,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:59,223 INFO  L87              Difference]: Start difference. First operand 5331 states and 6580 transitions. cyclomatic complexity: 1251 Second operand 3 states.
[2020-11-25 08:36:59,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:59,272 INFO  L93              Difference]: Finished difference Result 5335 states and 6583 transitions.
[2020-11-25 08:36:59,272 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:59,272 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5335 states and 6583 transitions.
[2020-11-25 08:36:59,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,294 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5335 states to 5335 states and 6583 transitions.
[2020-11-25 08:36:59,294 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1069
[2020-11-25 08:36:59,295 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1069
[2020-11-25 08:36:59,295 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5335 states and 6583 transitions.
[2020-11-25 08:36:59,299 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:59,299 INFO  L728         BuchiCegarLoop]: Abstraction has 5335 states and 6583 transitions.
[2020-11-25 08:36:59,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5335 states and 6583 transitions.
[2020-11-25 08:36:59,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5335 to 5331.
[2020-11-25 08:36:59,331 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5331 states.
[2020-11-25 08:36:59,336 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5331 states to 5331 states and 6579 transitions.
[2020-11-25 08:36:59,336 INFO  L751         BuchiCegarLoop]: Abstraction has 5331 states and 6579 transitions.
[2020-11-25 08:36:59,336 INFO  L631         BuchiCegarLoop]: Abstraction has 5331 states and 6579 transitions.
[2020-11-25 08:36:59,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:36:59,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5331 states and 6579 transitions.
[2020-11-25 08:36:59,342 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,342 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:59,342 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:59,343 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:59,343 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4773]  COND TRUE   DType[this] == MinterRole
[L4774]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4774]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4775]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:59,347 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:59,347 INFO  L82        PathProgramCache]: Analyzing trace with hash 944119946, now seen corresponding path program 1 times
[2020-11-25 08:36:59,348 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:59,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:59,388 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:36:59,388 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:59,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:59,389 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:59,389 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:59,389 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:59,389 INFO  L87              Difference]: Start difference. First operand 5331 states and 6579 transitions. cyclomatic complexity: 1250 Second operand 3 states.
[2020-11-25 08:36:59,433 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:59,433 INFO  L93              Difference]: Finished difference Result 5337 states and 6585 transitions.
[2020-11-25 08:36:59,433 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:59,433 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5337 states and 6585 transitions.
[2020-11-25 08:36:59,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,454 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5337 states to 5337 states and 6585 transitions.
[2020-11-25 08:36:59,454 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1069
[2020-11-25 08:36:59,455 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1069
[2020-11-25 08:36:59,455 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5337 states and 6585 transitions.
[2020-11-25 08:36:59,459 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:59,459 INFO  L728         BuchiCegarLoop]: Abstraction has 5337 states and 6585 transitions.
[2020-11-25 08:36:59,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5337 states and 6585 transitions.
[2020-11-25 08:36:59,492 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5337 to 5333.
[2020-11-25 08:36:59,492 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5333 states.
[2020-11-25 08:36:59,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5333 states to 5333 states and 6581 transitions.
[2020-11-25 08:36:59,498 INFO  L751         BuchiCegarLoop]: Abstraction has 5333 states and 6581 transitions.
[2020-11-25 08:36:59,498 INFO  L631         BuchiCegarLoop]: Abstraction has 5333 states and 6581 transitions.
[2020-11-25 08:36:59,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:36:59,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5333 states and 6581 transitions.
[2020-11-25 08:36:59,503 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,503 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:59,503 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:59,504 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:59,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:59,508 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:59,508 INFO  L82        PathProgramCache]: Analyzing trace with hash -406576900, now seen corresponding path program 1 times
[2020-11-25 08:36:59,508 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:59,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:59,566 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 08:36:59,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:36:59,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 08:36:59,566 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:59,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:36:59,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:36:59,567 INFO  L87              Difference]: Start difference. First operand 5333 states and 6581 transitions. cyclomatic complexity: 1250 Second operand 12 states.
[2020-11-25 08:36:59,767 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:59,767 INFO  L93              Difference]: Finished difference Result 5393 states and 6672 transitions.
[2020-11-25 08:36:59,767 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 08:36:59,767 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5393 states and 6672 transitions.
[2020-11-25 08:36:59,777 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5393 states to 5393 states and 6672 transitions.
[2020-11-25 08:36:59,793 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1085
[2020-11-25 08:36:59,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1085
[2020-11-25 08:36:59,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5393 states and 6672 transitions.
[2020-11-25 08:36:59,798 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:59,798 INFO  L728         BuchiCegarLoop]: Abstraction has 5393 states and 6672 transitions.
[2020-11-25 08:36:59,802 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5393 states and 6672 transitions.
[2020-11-25 08:36:59,832 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5393 to 5377.
[2020-11-25 08:36:59,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5377 states.
[2020-11-25 08:36:59,838 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5377 states to 5377 states and 6648 transitions.
[2020-11-25 08:36:59,838 INFO  L751         BuchiCegarLoop]: Abstraction has 5377 states and 6648 transitions.
[2020-11-25 08:36:59,838 INFO  L631         BuchiCegarLoop]: Abstraction has 5377 states and 6648 transitions.
[2020-11-25 08:36:59,838 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:36:59,838 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5377 states and 6648 transitions.
[2020-11-25 08:36:59,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:59,844 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:59,844 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:59,846 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:59,846 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND TRUE   !!__var_27
[L4601]              revert := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:59,849 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:59,849 INFO  L82        PathProgramCache]: Analyzing trace with hash -1376047637, now seen corresponding path program 1 times
[2020-11-25 08:36:59,850 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:59,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:59,891 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:36:59,891 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:59,891 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:59,892 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:59,892 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:59,892 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:59,892 INFO  L87              Difference]: Start difference. First operand 5377 states and 6648 transitions. cyclomatic complexity: 1273 Second operand 3 states.
[2020-11-25 08:36:59,972 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:59,972 INFO  L93              Difference]: Finished difference Result 5983 states and 7103 transitions.
[2020-11-25 08:36:59,972 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:59,972 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5983 states and 7103 transitions.
[2020-11-25 08:36:59,983 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:59,996 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5983 states to 5501 states and 6503 transitions.
[2020-11-25 08:36:59,996 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-25 08:36:59,996 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1147
[2020-11-25 08:36:59,997 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5501 states and 6503 transitions.
[2020-11-25 08:37:00,000 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:00,000 INFO  L728         BuchiCegarLoop]: Abstraction has 5501 states and 6503 transitions.
[2020-11-25 08:37:00,004 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5501 states and 6503 transitions.
[2020-11-25 08:37:00,028 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5501 to 4951.
[2020-11-25 08:37:00,028 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4951 states.
[2020-11-25 08:37:00,033 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4951 states to 4951 states and 5817 transitions.
[2020-11-25 08:37:00,033 INFO  L751         BuchiCegarLoop]: Abstraction has 4951 states and 5817 transitions.
[2020-11-25 08:37:00,033 INFO  L631         BuchiCegarLoop]: Abstraction has 4951 states and 5817 transitions.
[2020-11-25 08:37:00,033 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:37:00,033 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4951 states and 5817 transitions.
[2020-11-25 08:37:00,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:00,038 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:00,038 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:00,040 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:00,040 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND FALSE  !(DType[this] == VIToken)
[L5319]  COND TRUE   DType[this] == ERC20Capped
[L5320]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5320]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5321]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:00,046 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:00,046 INFO  L82        PathProgramCache]: Analyzing trace with hash 1641179950, now seen corresponding path program 1 times
[2020-11-25 08:37:00,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:00,068 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:00,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:37:00,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:00,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:37:00,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:00,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:37:00,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:37:00,397 INFO  L87              Difference]: Start difference. First operand 4951 states and 5817 transitions. cyclomatic complexity: 868 Second operand 3 states.
[2020-11-25 08:37:00,456 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:00,457 INFO  L93              Difference]: Finished difference Result 4965 states and 5836 transitions.
[2020-11-25 08:37:00,457 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:37:00,457 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4965 states and 5836 transitions.
[2020-11-25 08:37:00,465 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:00,477 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4965 states to 4965 states and 5836 transitions.
[2020-11-25 08:37:00,477 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1017
[2020-11-25 08:37:00,477 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1017
[2020-11-25 08:37:00,477 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4965 states and 5836 transitions.
[2020-11-25 08:37:00,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:00,480 INFO  L728         BuchiCegarLoop]: Abstraction has 4965 states and 5836 transitions.
[2020-11-25 08:37:00,484 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4965 states and 5836 transitions.
[2020-11-25 08:37:00,508 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4965 to 4961.
[2020-11-25 08:37:00,508 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4961 states.
[2020-11-25 08:37:00,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4961 states to 4961 states and 5829 transitions.
[2020-11-25 08:37:00,513 INFO  L751         BuchiCegarLoop]: Abstraction has 4961 states and 5829 transitions.
[2020-11-25 08:37:00,513 INFO  L631         BuchiCegarLoop]: Abstraction has 4961 states and 5829 transitions.
[2020-11-25 08:37:00,513 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:37:00,513 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4961 states and 5829 transitions.
[2020-11-25 08:37:00,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:00,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:00,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:00,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:00,521 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:00,526 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:00,527 INFO  L82        PathProgramCache]: Analyzing trace with hash 476665592, now seen corresponding path program 1 times
[2020-11-25 08:37:00,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:00,539 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:00,757 INFO  L134       CoverageAnalysis]: Checked inductivity of 1583 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:37:00,757 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:37:00,757 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:37:00,757 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:00,758 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:37:00,758 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:37:00,758 INFO  L87              Difference]: Start difference. First operand 4961 states and 5829 transitions. cyclomatic complexity: 870 Second operand 7 states.
[2020-11-25 08:37:00,886 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:00,886 INFO  L93              Difference]: Finished difference Result 4984 states and 5856 transitions.
[2020-11-25 08:37:00,887 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:37:00,887 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4984 states and 5856 transitions.
[2020-11-25 08:37:00,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:00,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4984 states to 4967 states and 5836 transitions.
[2020-11-25 08:37:00,906 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1015
[2020-11-25 08:37:00,906 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1015
[2020-11-25 08:37:00,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4967 states and 5836 transitions.
[2020-11-25 08:37:00,909 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:00,909 INFO  L728         BuchiCegarLoop]: Abstraction has 4967 states and 5836 transitions.
[2020-11-25 08:37:00,912 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4967 states and 5836 transitions.
[2020-11-25 08:37:00,940 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4967 to 4967.
[2020-11-25 08:37:00,940 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4967 states.
[2020-11-25 08:37:00,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4967 states to 4967 states and 5836 transitions.
[2020-11-25 08:37:00,945 INFO  L751         BuchiCegarLoop]: Abstraction has 4967 states and 5836 transitions.
[2020-11-25 08:37:00,945 INFO  L631         BuchiCegarLoop]: Abstraction has 4967 states and 5836 transitions.
[2020-11-25 08:37:00,945 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:37:00,945 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4967 states and 5836 transitions.
[2020-11-25 08:37:00,951 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:00,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:00,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:00,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:00,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:00,959 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:00,959 INFO  L82        PathProgramCache]: Analyzing trace with hash 744761949, now seen corresponding path program 1 times
[2020-11-25 08:37:00,960 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:00,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:01,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 1553 backedges. 7 proven. 35 refuted. 0 times theorem prover too weak. 1511 trivial. 0 not checked.
[2020-11-25 08:37:01,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:37:01,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:37:01,222 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:01,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:37:01,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:37:01,223 INFO  L87              Difference]: Start difference. First operand 4967 states and 5836 transitions. cyclomatic complexity: 871 Second operand 8 states.
[2020-11-25 08:37:01,361 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:01,361 INFO  L93              Difference]: Finished difference Result 4988 states and 5860 transitions.
[2020-11-25 08:37:01,361 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:37:01,362 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4988 states and 5860 transitions.
[2020-11-25 08:37:01,370 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:01,380 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4988 states to 4974 states and 5844 transitions.
[2020-11-25 08:37:01,380 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1015
[2020-11-25 08:37:01,380 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1015
[2020-11-25 08:37:01,380 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4974 states and 5844 transitions.
[2020-11-25 08:37:01,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:01,383 INFO  L728         BuchiCegarLoop]: Abstraction has 4974 states and 5844 transitions.
[2020-11-25 08:37:01,387 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4974 states and 5844 transitions.
[2020-11-25 08:37:01,409 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4974 to 4974.
[2020-11-25 08:37:01,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4974 states.
[2020-11-25 08:37:01,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4974 states to 4974 states and 5844 transitions.
[2020-11-25 08:37:01,414 INFO  L751         BuchiCegarLoop]: Abstraction has 4974 states and 5844 transitions.
[2020-11-25 08:37:01,414 INFO  L631         BuchiCegarLoop]: Abstraction has 4974 states and 5844 transitions.
[2020-11-25 08:37:01,414 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:37:01,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4974 states and 5844 transitions.
[2020-11-25 08:37:01,419 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:01,419 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:01,420 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:01,421 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:01,422 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND TRUE   __exception
[L1865]              __tmp__Balance := Balance;
[L1866]              __tmp__DType := DType;
[L1867]              __tmp__Alloc := Alloc;
[L1868]              __tmp__balance_ADDR := balance_ADDR;
[L1869]              __tmp__M_Ref_int := M_Ref_int;
[L1870]              __tmp__sum__balances0 := sum__balances0;
[L1871]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1872]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1873]              __tmp__sum__allowances1 := sum__allowances1;
[L1874]              __tmp__M_Ref_bool := M_Ref_bool;
[L1875]              __tmp__sum := sum;
[L1876]              __tmp__Length := Length;
[L1877]              __tmp__now := now;
[L1878]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1879]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1880]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1881]              __tmp___balances_ERC20 := _balances_ERC20;
[L1882]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1883]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1884]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1885]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1886]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1887]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1888]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1889]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5372]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5372]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  COND FALSE  !(revert)
[L5376]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5376]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5377]  COND FALSE  !(revert)
[L5380]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3037]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3037]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3038]  COND FALSE  !(revert)
[L3041]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3010]              assume msgsender_MSG != null;
[L3011]              __tmp__Balance[this] := 0;
[L3012]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3013]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3016]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3017]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3018]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3041]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3042]  COND FALSE  !(revert)
[L5380]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5381]  COND FALSE  !(revert)
[L5384]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5384]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5385]  COND FALSE  !(revert)
[L5388]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5388]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  COND FALSE  !(revert)
[L5392]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5392]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5393]  COND FALSE  !(revert)
[L5396]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5181]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5181]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5182]  COND FALSE  !(revert)
[L5185]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5185]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5189]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5190]  COND FALSE  !(revert)
[L5193]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5193]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5194]  COND FALSE  !(revert)
[L5197]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5197]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5198]  COND FALSE  !(revert)
[L5201]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5154]              assume msgsender_MSG != null;
[L5155]              __tmp__Balance[this] := 0;
[L5156]              __tmp___cap_ERC20Capped[this] := 0;
[L5158]  COND FALSE  !(!(cap_s910 > 0))
[L5162]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5201]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5202]  COND FALSE  !(revert)
[L5396]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5397]  COND FALSE  !(revert)
[L5400]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5333]              assume msgsender_MSG != null;
[L5334]              __tmp__Balance[this] := 0;
[L5335]              __tmp__DECIMALS_VIToken[this] := 18;
[L5336]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5337]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]  COND TRUE   __tmp__DType[this] == VIToken
[L5340]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5252]  COND TRUE   __tmp__DType[this] == VIToken
[L5253]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5253]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]  COND FALSE  !(revert)
[L5265]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L5265]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5266]  COND FALSE  !(revert)
[L5269]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5273]  COND TRUE   __tmp__DType[this] == VIToken
[L5274]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4209]              __var_16 := null;
[L4210]  COND FALSE  !(!(account_s562 != null))
[L4214]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4214]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4215]  COND FALSE  !(revert)
[L4218]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4219]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4219]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4220]  COND FALSE  !(revert)
[L4223]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4224]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4225]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5274]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5275]  COND FALSE  !(revert)
[L5340]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5341]  COND FALSE  !(revert)
[L5400]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5401]  COND FALSE  !(revert)
[L1889]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1890]              assume revert || gas < 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:01,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:01,427 INFO  L82        PathProgramCache]: Analyzing trace with hash -110201132, now seen corresponding path program 1 times
[2020-11-25 08:37:01,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:01,440 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:01,633 INFO  L134       CoverageAnalysis]: Checked inductivity of 1553 backedges. 0 proven. 45 refuted. 0 times theorem prover too weak. 1508 trivial. 0 not checked.
[2020-11-25 08:37:01,633 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:37:01,633 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:37:01,633 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:01,633 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:37:01,634 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:37:01,634 INFO  L87              Difference]: Start difference. First operand 4974 states and 5844 transitions. cyclomatic complexity: 872 Second operand 3 states.
[2020-11-25 08:37:01,672 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:01,672 INFO  L93              Difference]: Finished difference Result 4977 states and 5847 transitions.
[2020-11-25 08:37:01,672 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:37:01,673 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4977 states and 5847 transitions.
[2020-11-25 08:37:01,681 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:01,691 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4977 states to 4977 states and 5847 transitions.
[2020-11-25 08:37:01,691 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1015
[2020-11-25 08:37:01,692 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1015
[2020-11-25 08:37:01,692 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4977 states and 5847 transitions.
[2020-11-25 08:37:01,695 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:01,696 INFO  L728         BuchiCegarLoop]: Abstraction has 4977 states and 5847 transitions.
[2020-11-25 08:37:01,701 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4977 states and 5847 transitions.
[2020-11-25 08:37:01,729 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4977 to 4975.
[2020-11-25 08:37:01,730 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4975 states.
[2020-11-25 08:37:01,735 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4975 states to 4975 states and 5845 transitions.
[2020-11-25 08:37:01,735 INFO  L751         BuchiCegarLoop]: Abstraction has 4975 states and 5845 transitions.
[2020-11-25 08:37:01,735 INFO  L631         BuchiCegarLoop]: Abstraction has 4975 states and 5845 transitions.
[2020-11-25 08:37:01,735 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:37:01,735 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4975 states and 5845 transitions.
[2020-11-25 08:37:01,740 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:01,740 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:01,740 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:01,742 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:01,742 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND TRUE   __exception
[L1865]              __tmp__Balance := Balance;
[L1866]              __tmp__DType := DType;
[L1867]              __tmp__Alloc := Alloc;
[L1868]              __tmp__balance_ADDR := balance_ADDR;
[L1869]              __tmp__M_Ref_int := M_Ref_int;
[L1870]              __tmp__sum__balances0 := sum__balances0;
[L1871]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1872]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1873]              __tmp__sum__allowances1 := sum__allowances1;
[L1874]              __tmp__M_Ref_bool := M_Ref_bool;
[L1875]              __tmp__sum := sum;
[L1876]              __tmp__Length := Length;
[L1877]              __tmp__now := now;
[L1878]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1879]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1880]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1881]              __tmp___balances_ERC20 := _balances_ERC20;
[L1882]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1883]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1884]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1885]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1886]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1887]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1888]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1889]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5372]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5372]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  COND FALSE  !(revert)
[L5376]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5376]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5377]  COND FALSE  !(revert)
[L5380]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3037]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3037]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3038]  COND FALSE  !(revert)
[L3041]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3010]              assume msgsender_MSG != null;
[L3011]              __tmp__Balance[this] := 0;
[L3012]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3013]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3016]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3017]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3018]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3041]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3042]  COND FALSE  !(revert)
[L5380]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5381]  COND FALSE  !(revert)
[L5384]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5384]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5385]  COND FALSE  !(revert)
[L5388]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5388]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  COND FALSE  !(revert)
[L5392]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5392]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5393]  COND FALSE  !(revert)
[L5396]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5181]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5181]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5182]  COND FALSE  !(revert)
[L5185]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5185]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5189]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5190]  COND FALSE  !(revert)
[L5193]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5193]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5194]  COND FALSE  !(revert)
[L5197]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5197]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5198]  COND FALSE  !(revert)
[L5201]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5154]              assume msgsender_MSG != null;
[L5155]              __tmp__Balance[this] := 0;
[L5156]              __tmp___cap_ERC20Capped[this] := 0;
[L5158]  COND FALSE  !(!(cap_s910 > 0))
[L5162]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5201]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5202]  COND FALSE  !(revert)
[L5396]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5397]  COND FALSE  !(revert)
[L5400]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5333]              assume msgsender_MSG != null;
[L5334]              __tmp__Balance[this] := 0;
[L5335]              __tmp__DECIMALS_VIToken[this] := 18;
[L5336]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5337]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]  COND TRUE   __tmp__DType[this] == VIToken
[L5340]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5252]  COND TRUE   __tmp__DType[this] == VIToken
[L5253]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5253]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]  COND FALSE  !(revert)
[L5265]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L5265]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5266]  COND FALSE  !(revert)
[L5269]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5273]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L5278]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L5279]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4209]              __var_16 := null;
[L4210]  COND FALSE  !(!(account_s562 != null))
[L4214]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4214]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4215]  COND FALSE  !(revert)
[L4218]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4219]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4219]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4220]  COND FALSE  !(revert)
[L4223]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4224]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4225]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5279]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5280]  COND FALSE  !(revert)
[L5340]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5341]  COND FALSE  !(revert)
[L5400]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5401]  COND FALSE  !(revert)
[L1889]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1890]              assume revert || gas < 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:01,747 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:01,748 INFO  L82        PathProgramCache]: Analyzing trace with hash -453310459, now seen corresponding path program 1 times
[2020-11-25 08:37:01,748 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:01,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:02,002 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:37:02,002 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:02,002 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:37:02,002 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:02,003 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:37:02,003 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:37:02,003 INFO  L87              Difference]: Start difference. First operand 4975 states and 5845 transitions. cyclomatic complexity: 872 Second operand 3 states.
[2020-11-25 08:37:02,046 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:02,046 INFO  L93              Difference]: Finished difference Result 4999 states and 5880 transitions.
[2020-11-25 08:37:02,046 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:37:02,046 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4999 states and 5880 transitions.
[2020-11-25 08:37:02,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:02,066 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4999 states to 4999 states and 5880 transitions.
[2020-11-25 08:37:02,066 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1022
[2020-11-25 08:37:02,066 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1022
[2020-11-25 08:37:02,067 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4999 states and 5880 transitions.
[2020-11-25 08:37:02,070 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:02,070 INFO  L728         BuchiCegarLoop]: Abstraction has 4999 states and 5880 transitions.
[2020-11-25 08:37:02,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4999 states and 5880 transitions.
[2020-11-25 08:37:02,099 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4999 to 4985.
[2020-11-25 08:37:02,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4985 states.
[2020-11-25 08:37:02,104 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4985 states to 4985 states and 5861 transitions.
[2020-11-25 08:37:02,104 INFO  L751         BuchiCegarLoop]: Abstraction has 4985 states and 5861 transitions.
[2020-11-25 08:37:02,104 INFO  L631         BuchiCegarLoop]: Abstraction has 4985 states and 5861 transitions.
[2020-11-25 08:37:02,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:37:02,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4985 states and 5861 transitions.
[2020-11-25 08:37:02,110 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:02,110 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:02,110 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:02,112 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:02,112 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND TRUE   !(sender_s519 != null)
[L4147]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:02,117 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:02,117 INFO  L82        PathProgramCache]: Analyzing trace with hash 231915448, now seen corresponding path program 1 times
[2020-11-25 08:37:02,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:02,139 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:02,352 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:37:02,353 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:02,353 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:37:02,353 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:02,353 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:37:02,353 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:37:02,354 INFO  L87              Difference]: Start difference. First operand 4985 states and 5861 transitions. cyclomatic complexity: 878 Second operand 8 states.
[2020-11-25 08:37:02,477 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:02,477 INFO  L93              Difference]: Finished difference Result 5017 states and 5905 transitions.
[2020-11-25 08:37:02,477 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:37:02,477 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5017 states and 5905 transitions.
[2020-11-25 08:37:02,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:02,495 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5017 states to 4989 states and 5871 transitions.
[2020-11-25 08:37:02,495 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1017
[2020-11-25 08:37:02,495 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1017
[2020-11-25 08:37:02,495 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4989 states and 5871 transitions.
[2020-11-25 08:37:02,498 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:02,498 INFO  L728         BuchiCegarLoop]: Abstraction has 4989 states and 5871 transitions.
[2020-11-25 08:37:02,502 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4989 states and 5871 transitions.
[2020-11-25 08:37:02,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4989 to 4989.
[2020-11-25 08:37:02,523 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4989 states.
[2020-11-25 08:37:02,527 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4989 states to 4989 states and 5871 transitions.
[2020-11-25 08:37:02,527 INFO  L751         BuchiCegarLoop]: Abstraction has 4989 states and 5871 transitions.
[2020-11-25 08:37:02,527 INFO  L631         BuchiCegarLoop]: Abstraction has 4989 states and 5871 transitions.
[2020-11-25 08:37:02,527 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 08:37:02,527 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4989 states and 5871 transitions.
[2020-11-25 08:37:02,532 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:02,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:02,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:02,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:02,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND TRUE   __exception
[L1865]              __tmp__Balance := Balance;
[L1866]              __tmp__DType := DType;
[L1867]              __tmp__Alloc := Alloc;
[L1868]              __tmp__balance_ADDR := balance_ADDR;
[L1869]              __tmp__M_Ref_int := M_Ref_int;
[L1870]              __tmp__sum__balances0 := sum__balances0;
[L1871]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1872]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1873]              __tmp__sum__allowances1 := sum__allowances1;
[L1874]              __tmp__M_Ref_bool := M_Ref_bool;
[L1875]              __tmp__sum := sum;
[L1876]              __tmp__Length := Length;
[L1877]              __tmp__now := now;
[L1878]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1879]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1880]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1881]              __tmp___balances_ERC20 := _balances_ERC20;
[L1882]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1883]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1884]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1885]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1886]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1887]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1888]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1889]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5372]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5372]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  COND FALSE  !(revert)
[L5376]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5376]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5377]  COND FALSE  !(revert)
[L5380]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3037]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3037]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3038]  COND FALSE  !(revert)
[L3041]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3010]              assume msgsender_MSG != null;
[L3011]              __tmp__Balance[this] := 0;
[L3012]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3013]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3016]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3017]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3018]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3041]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3042]  COND FALSE  !(revert)
[L5380]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5381]  COND FALSE  !(revert)
[L5384]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5384]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5385]  COND FALSE  !(revert)
[L5388]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5388]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  COND FALSE  !(revert)
[L5392]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5392]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5393]  COND FALSE  !(revert)
[L5396]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5181]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5181]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5182]  COND FALSE  !(revert)
[L5185]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5185]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5189]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5190]  COND FALSE  !(revert)
[L5193]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5193]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5194]  COND FALSE  !(revert)
[L5197]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5197]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5198]  COND FALSE  !(revert)
[L5201]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5154]              assume msgsender_MSG != null;
[L5155]              __tmp__Balance[this] := 0;
[L5156]              __tmp___cap_ERC20Capped[this] := 0;
[L5158]  COND FALSE  !(!(cap_s910 > 0))
[L5162]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5201]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5202]  COND FALSE  !(revert)
[L5396]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5397]  COND FALSE  !(revert)
[L5400]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5333]              assume msgsender_MSG != null;
[L5334]              __tmp__Balance[this] := 0;
[L5335]              __tmp__DECIMALS_VIToken[this] := 18;
[L5336]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5337]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]  COND TRUE   __tmp__DType[this] == VIToken
[L5340]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5252]  COND TRUE   __tmp__DType[this] == VIToken
[L5253]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5253]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]  COND FALSE  !(revert)
[L5265]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L5265]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5266]  COND FALSE  !(revert)
[L5269]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5273]  COND TRUE   __tmp__DType[this] == VIToken
[L5274]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4209]              __var_16 := null;
[L4210]  COND FALSE  !(!(account_s562 != null))
[L4214]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4214]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4215]  COND FALSE  !(revert)
[L4218]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4219]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4219]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4220]  COND FALSE  !(revert)
[L4223]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4224]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4225]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5274]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5275]  COND FALSE  !(revert)
[L5340]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5341]  COND FALSE  !(revert)
[L5400]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5401]  COND FALSE  !(revert)
[L1889]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1890]              assume revert || gas < 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:02,539 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:02,539 INFO  L82        PathProgramCache]: Analyzing trace with hash -1715689434, now seen corresponding path program 1 times
[2020-11-25 08:37:02,540 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:02,557 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:02,741 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:37:02,741 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:02,741 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:37:02,741 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:02,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:37:02,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:37:02,742 INFO  L87              Difference]: Start difference. First operand 4989 states and 5871 transitions. cyclomatic complexity: 884 Second operand 4 states.
[2020-11-25 08:37:02,935 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:02,935 INFO  L93              Difference]: Finished difference Result 5837 states and 6908 transitions.
[2020-11-25 08:37:02,935 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:37:02,935 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5837 states and 6908 transitions.
[2020-11-25 08:37:02,949 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:37:02,962 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5837 states to 5571 states and 6614 transitions.
[2020-11-25 08:37:02,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1208
[2020-11-25 08:37:02,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1208
[2020-11-25 08:37:02,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5571 states and 6614 transitions.
[2020-11-25 08:37:02,966 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:02,967 INFO  L728         BuchiCegarLoop]: Abstraction has 5571 states and 6614 transitions.
[2020-11-25 08:37:02,970 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5571 states and 6614 transitions.
[2020-11-25 08:37:02,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5571 to 4961.
[2020-11-25 08:37:03,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4961 states.
[2020-11-25 08:37:03,006 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4961 states to 4961 states and 5855 transitions.
[2020-11-25 08:37:03,006 INFO  L751         BuchiCegarLoop]: Abstraction has 4961 states and 5855 transitions.
[2020-11-25 08:37:03,006 INFO  L631         BuchiCegarLoop]: Abstraction has 4961 states and 5855 transitions.
[2020-11-25 08:37:03,006 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 08:37:03,006 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4961 states and 5855 transitions.
[2020-11-25 08:37:03,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:03,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:03,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:03,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:03,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:03,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:03,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 1415653293, now seen corresponding path program 1 times
[2020-11-25 08:37:03,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:03,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:03,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 1547 backedges. 14 proven. 7 refuted. 0 times theorem prover too weak. 1526 trivial. 0 not checked.
[2020-11-25 08:37:03,266 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:37:03,266 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:37:03,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:03,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:37:03,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:37:03,266 INFO  L87              Difference]: Start difference. First operand 4961 states and 5855 transitions. cyclomatic complexity: 896 Second operand 8 states.
[2020-11-25 08:37:03,401 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:03,401 INFO  L93              Difference]: Finished difference Result 4982 states and 5879 transitions.
[2020-11-25 08:37:03,402 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:37:03,402 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4982 states and 5879 transitions.
[2020-11-25 08:37:03,410 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:03,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4982 states to 4961 states and 5854 transitions.
[2020-11-25 08:37:03,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1158
[2020-11-25 08:37:03,418 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1158
[2020-11-25 08:37:03,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4961 states and 5854 transitions.
[2020-11-25 08:37:03,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:03,421 INFO  L728         BuchiCegarLoop]: Abstraction has 4961 states and 5854 transitions.
[2020-11-25 08:37:03,424 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4961 states and 5854 transitions.
[2020-11-25 08:37:03,443 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4961 to 4961.
[2020-11-25 08:37:03,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4961 states.
[2020-11-25 08:37:03,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4961 states to 4961 states and 5854 transitions.
[2020-11-25 08:37:03,448 INFO  L751         BuchiCegarLoop]: Abstraction has 4961 states and 5854 transitions.
[2020-11-25 08:37:03,448 INFO  L631         BuchiCegarLoop]: Abstraction has 4961 states and 5854 transitions.
[2020-11-25 08:37:03,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 08:37:03,448 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4961 states and 5854 transitions.
[2020-11-25 08:37:03,453 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:03,453 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:03,453 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:03,455 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:03,455 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND FALSE  !(DType[this] == VIToken)
[L4740]  COND TRUE   DType[this] == ERC20Capped
[L4741]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4741]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND TRUE   DType[this] == ERC20Capped
[L4764]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4764]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4765]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:03,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:03,460 INFO  L82        PathProgramCache]: Analyzing trace with hash -1900660393, now seen corresponding path program 2 times
[2020-11-25 08:37:03,460 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:03,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:03,697 INFO  L134       CoverageAnalysis]: Checked inductivity of 1547 backedges. 28 proven. 0 refuted. 0 times theorem prover too weak. 1519 trivial. 0 not checked.
[2020-11-25 08:37:03,697 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:03,697 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:37:03,698 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:03,698 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:37:03,698 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:37:03,698 INFO  L87              Difference]: Start difference. First operand 4961 states and 5854 transitions. cyclomatic complexity: 895 Second operand 9 states.
[2020-11-25 08:37:03,850 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:03,850 INFO  L93              Difference]: Finished difference Result 4979 states and 5873 transitions.
[2020-11-25 08:37:03,850 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:37:03,850 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4979 states and 5873 transitions.
[2020-11-25 08:37:03,859 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:03,867 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4979 states to 4938 states and 5826 transitions.
[2020-11-25 08:37:03,867 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1158
[2020-11-25 08:37:03,868 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1158
[2020-11-25 08:37:03,868 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4938 states and 5826 transitions.
[2020-11-25 08:37:03,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:03,871 INFO  L728         BuchiCegarLoop]: Abstraction has 4938 states and 5826 transitions.
[2020-11-25 08:37:03,874 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4938 states and 5826 transitions.
[2020-11-25 08:37:03,893 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4938 to 4938.
[2020-11-25 08:37:03,893 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4938 states.
[2020-11-25 08:37:03,898 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4938 states to 4938 states and 5826 transitions.
[2020-11-25 08:37:03,898 INFO  L751         BuchiCegarLoop]: Abstraction has 4938 states and 5826 transitions.
[2020-11-25 08:37:03,898 INFO  L631         BuchiCegarLoop]: Abstraction has 4938 states and 5826 transitions.
[2020-11-25 08:37:03,898 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 08:37:03,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4938 states and 5826 transitions.
[2020-11-25 08:37:03,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:03,903 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:03,903 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:03,904 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:03,905 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND TRUE   !(recipient_s519 != null)
[L4152]              revert := true;
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:03,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:03,909 INFO  L82        PathProgramCache]: Analyzing trace with hash 389306386, now seen corresponding path program 1 times
[2020-11-25 08:37:03,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:03,927 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:04,138 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:37:04,138 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:04,138 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:37:04,139 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:04,139 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:37:04,139 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:37:04,139 INFO  L87              Difference]: Start difference. First operand 4938 states and 5826 transitions. cyclomatic complexity: 890 Second operand 7 states.
[2020-11-25 08:37:04,204 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:04,204 INFO  L93              Difference]: Finished difference Result 5056 states and 5966 transitions.
[2020-11-25 08:37:04,204 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:37:04,204 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5056 states and 5966 transitions.
[2020-11-25 08:37:04,214 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:04,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5056 states to 5048 states and 5958 transitions.
[2020-11-25 08:37:04,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1185
[2020-11-25 08:37:04,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1185
[2020-11-25 08:37:04,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5048 states and 5958 transitions.
[2020-11-25 08:37:04,227 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:04,227 INFO  L728         BuchiCegarLoop]: Abstraction has 5048 states and 5958 transitions.
[2020-11-25 08:37:04,231 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5048 states and 5958 transitions.
[2020-11-25 08:37:04,257 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5048 to 5035.
[2020-11-25 08:37:04,257 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5035 states.
[2020-11-25 08:37:04,262 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5035 states to 5035 states and 5943 transitions.
[2020-11-25 08:37:04,263 INFO  L751         BuchiCegarLoop]: Abstraction has 5035 states and 5943 transitions.
[2020-11-25 08:37:04,263 INFO  L631         BuchiCegarLoop]: Abstraction has 5035 states and 5943 transitions.
[2020-11-25 08:37:04,263 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 08:37:04,263 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5035 states and 5943 transitions.
[2020-11-25 08:37:04,269 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:37:04,269 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:04,269 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:04,271 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:04,271 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:04,284 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:04,285 INFO  L82        PathProgramCache]: Analyzing trace with hash -712162588, now seen corresponding path program 1 times
[2020-11-25 08:37:04,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:04,425 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:05,035 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:37:06,114 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 48 proven. 0 refuted. 0 times theorem prover too weak. 1523 trivial. 0 not checked.
[2020-11-25 08:37:06,114 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:06,114 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [40] imperfect sequences [] total 40
[2020-11-25 08:37:06,115 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:06,115 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 08:37:06,115 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=123, Invalid=1517, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 08:37:06,115 INFO  L87              Difference]: Start difference. First operand 5035 states and 5943 transitions. cyclomatic complexity: 910 Second operand 41 states.
[2020-11-25 08:37:27,277 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:27,277 INFO  L93              Difference]: Finished difference Result 5104 states and 6035 transitions.
[2020-11-25 08:37:27,278 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 08:37:27,278 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5104 states and 6035 transitions.
[2020-11-25 08:37:27,287 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:37:27,296 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5104 states to 5104 states and 6035 transitions.
[2020-11-25 08:37:27,297 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1201
[2020-11-25 08:37:27,297 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1201
[2020-11-25 08:37:27,297 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5104 states and 6035 transitions.
[2020-11-25 08:37:27,300 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:27,300 INFO  L728         BuchiCegarLoop]: Abstraction has 5104 states and 6035 transitions.
[2020-11-25 08:37:27,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5104 states and 6035 transitions.
[2020-11-25 08:37:27,326 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5104 to 5097.
[2020-11-25 08:37:27,326 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5097 states.
[2020-11-25 08:37:27,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5097 states to 5097 states and 6028 transitions.
[2020-11-25 08:37:27,331 INFO  L751         BuchiCegarLoop]: Abstraction has 5097 states and 6028 transitions.
[2020-11-25 08:37:27,331 INFO  L631         BuchiCegarLoop]: Abstraction has 5097 states and 6028 transitions.
[2020-11-25 08:37:27,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 08:37:27,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5097 states and 6028 transitions.
[2020-11-25 08:37:27,336 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:37:27,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:27,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:27,337 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:27,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND FALSE  !(!(recipient_s519 != null))
[L4155]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3198]  COND TRUE   !(b_s192 <= a_s192)
[L3199]              revert := true;
[L4155]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4156]  COND TRUE   revert
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND FALSE  !(!(recipient_s519 != null))
[L4155]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3198]  COND TRUE   !(b_s192 <= a_s192)
[L3199]              revert := true;
[L4155]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4156]  COND TRUE   revert
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:27,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:27,342 INFO  L82        PathProgramCache]: Analyzing trace with hash -1522886743, now seen corresponding path program 1 times
[2020-11-25 08:37:27,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:27,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:27,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:37:27,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:27,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 08:37:27,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:27,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:37:27,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:37:27,676 INFO  L87              Difference]: Start difference. First operand 5097 states and 6028 transitions. cyclomatic complexity: 935 Second operand 10 states.
[2020-11-25 08:37:29,813 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:29,813 INFO  L93              Difference]: Finished difference Result 5206 states and 6181 transitions.
[2020-11-25 08:37:29,813 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 08:37:29,813 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5206 states and 6181 transitions.
[2020-11-25 08:37:29,824 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 08:37:29,835 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5206 states to 5206 states and 6181 transitions.
[2020-11-25 08:37:29,835 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1231
[2020-11-25 08:37:29,835 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1231
[2020-11-25 08:37:29,835 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5206 states and 6181 transitions.
[2020-11-25 08:37:29,838 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:29,838 INFO  L728         BuchiCegarLoop]: Abstraction has 5206 states and 6181 transitions.
[2020-11-25 08:37:29,842 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5206 states and 6181 transitions.
[2020-11-25 08:37:29,866 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5206 to 4908.
[2020-11-25 08:37:29,866 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4908 states.
[2020-11-25 08:37:29,871 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4908 states to 4908 states and 5785 transitions.
[2020-11-25 08:37:29,871 INFO  L751         BuchiCegarLoop]: Abstraction has 4908 states and 5785 transitions.
[2020-11-25 08:37:29,871 INFO  L631         BuchiCegarLoop]: Abstraction has 4908 states and 5785 transitions.
[2020-11-25 08:37:29,871 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 08:37:29,871 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4908 states and 5785 transitions.
[2020-11-25 08:37:29,875 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:37:29,875 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:29,875 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:29,877 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:29,877 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND FALSE  !(!(recipient_s519 != null))
[L4155]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3198]  COND FALSE  !(!(b_s192 <= a_s192))
[L3202]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3203]              __ret_0_ := c_s192;
[L4155]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4156]  COND FALSE  !(revert)
[L4159]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s519];
[L4160]              __tmp___balances_ERC20[this][sender_s519] := __var_14;
[L4161]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s519];
[L4162]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND TRUE   !(c_s165 >= a_s165)
[L3176]              revert := true;
[L4162]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L4163]  COND TRUE   revert
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND FALSE  !(!(recipient_s519 != null))
[L4155]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3198]  COND FALSE  !(!(b_s192 <= a_s192))
[L3202]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3203]              __ret_0_ := c_s192;
[L4155]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4156]  COND FALSE  !(revert)
[L4159]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s519];
[L4160]              __tmp___balances_ERC20[this][sender_s519] := __var_14;
[L4161]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s519];
[L4162]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND TRUE   !(c_s165 >= a_s165)
[L3176]              revert := true;
[L4162]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L4163]  COND TRUE   revert
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND TRUE   revert
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:29,882 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:29,882 INFO  L82        PathProgramCache]: Analyzing trace with hash -890061880, now seen corresponding path program 1 times
[2020-11-25 08:37:29,882 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:29,901 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:30,226 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:37:30,226 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:30,226 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 08:37:30,226 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:30,227 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 08:37:30,227 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 08:37:30,227 INFO  L87              Difference]: Start difference. First operand 4908 states and 5785 transitions. cyclomatic complexity: 881 Second operand 16 states.
[2020-11-25 08:37:35,511 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:35,511 INFO  L93              Difference]: Finished difference Result 4993 states and 5885 transitions.
[2020-11-25 08:37:35,511 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 08:37:35,511 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4993 states and 5885 transitions.
[2020-11-25 08:37:35,521 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:37:35,530 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4993 states to 4993 states and 5885 transitions.
[2020-11-25 08:37:35,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1121
[2020-11-25 08:37:35,531 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1121
[2020-11-25 08:37:35,531 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4993 states and 5885 transitions.
[2020-11-25 08:37:35,533 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:35,533 INFO  L728         BuchiCegarLoop]: Abstraction has 4993 states and 5885 transitions.
[2020-11-25 08:37:35,537 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4993 states and 5885 transitions.
[2020-11-25 08:37:35,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4993 to 4888.
[2020-11-25 08:37:35,558 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4888 states.
[2020-11-25 08:37:35,563 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4888 states to 4888 states and 5751 transitions.
[2020-11-25 08:37:35,563 INFO  L751         BuchiCegarLoop]: Abstraction has 4888 states and 5751 transitions.
[2020-11-25 08:37:35,563 INFO  L631         BuchiCegarLoop]: Abstraction has 4888 states and 5751 transitions.
[2020-11-25 08:37:35,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 08:37:35,563 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4888 states and 5751 transitions.
[2020-11-25 08:37:35,569 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:37:35,569 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:35,569 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:35,570 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:35,570 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND FALSE  !(!(recipient_s519 != null))
[L4155]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3198]  COND FALSE  !(!(b_s192 <= a_s192))
[L3202]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3203]              __ret_0_ := c_s192;
[L4155]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4156]  COND FALSE  !(revert)
[L4159]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s519];
[L4160]              __tmp___balances_ERC20[this][sender_s519] := __var_14;
[L4161]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s519];
[L4162]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4162]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L4163]  COND FALSE  !(revert)
[L4166]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s519];
[L4167]              __tmp___balances_ERC20[this][recipient_s519] := __var_15;
[L4168]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s519];
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND FALSE  !(revert)
[L3426]              __ret_0_ := true;
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND TRUE   __exception
[L780]               __tmp__Balance := Balance;
[L781]               __tmp__DType := DType;
[L782]               __tmp__Alloc := Alloc;
[L783]               __tmp__balance_ADDR := balance_ADDR;
[L784]               __tmp__M_Ref_int := M_Ref_int;
[L785]               __tmp__sum__balances0 := sum__balances0;
[L786]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L787]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L788]               __tmp__sum__allowances1 := sum__allowances1;
[L789]               __tmp__M_Ref_bool := M_Ref_bool;
[L790]               __tmp__sum := sum;
[L791]               __tmp__Length := Length;
[L792]               __tmp__now := now;
[L793]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L794]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L795]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L796]               __tmp___balances_ERC20 := _balances_ERC20;
[L797]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L798]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L799]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L800]               __tmp___minters_MinterRole := _minters_MinterRole;
[L801]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L802]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L803]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L804]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3380]  COND TRUE   __tmp__DType[this] == VIToken
[L3381]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L3381]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3382]  COND FALSE  !(revert)
[L3403]  COND TRUE   __tmp__DType[this] == VIToken
[L3404]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4145]              __var_12 := null;
[L4146]  COND FALSE  !(!(sender_s519 != null))
[L4150]              __var_13 := null;
[L4151]  COND FALSE  !(!(recipient_s519 != null))
[L4155]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3198]  COND FALSE  !(!(b_s192 <= a_s192))
[L3202]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3203]              __ret_0_ := c_s192;
[L4155]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4156]  COND FALSE  !(revert)
[L4159]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s519];
[L4160]              __tmp___balances_ERC20[this][sender_s519] := __var_14;
[L4161]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s519];
[L4162]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4162]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s519], amount_s519);
[L4163]  COND FALSE  !(revert)
[L4166]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s519];
[L4167]              __tmp___balances_ERC20[this][recipient_s519] := __var_15;
[L4168]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s519];
[L3404]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3405]  COND FALSE  !(revert)
[L3426]              __ret_0_ := true;
[L804]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L805]               assume revert || gas < 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:35,575 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:35,575 INFO  L82        PathProgramCache]: Analyzing trace with hash 592367815, now seen corresponding path program 1 times
[2020-11-25 08:37:35,576 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:35,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:35,786 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:37:35,787 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:35,787 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:37:35,787 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:35,787 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:37:35,787 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:37:35,787 INFO  L87              Difference]: Start difference. First operand 4888 states and 5751 transitions. cyclomatic complexity: 867 Second operand 5 states.
[2020-11-25 08:37:37,080 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:37,080 INFO  L93              Difference]: Finished difference Result 5649 states and 6658 transitions.
[2020-11-25 08:37:37,080 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:37:37,080 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5649 states and 6658 transitions.
[2020-11-25 08:37:37,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:37:37,099 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5649 states to 4777 states and 5733 transitions.
[2020-11-25 08:37:37,099 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 791
[2020-11-25 08:37:37,100 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 791
[2020-11-25 08:37:37,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4777 states and 5733 transitions.
[2020-11-25 08:37:37,102 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:37,102 INFO  L728         BuchiCegarLoop]: Abstraction has 4777 states and 5733 transitions.
[2020-11-25 08:37:37,105 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4777 states and 5733 transitions.
[2020-11-25 08:37:37,122 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4777 to 4098.
[2020-11-25 08:37:37,122 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4098 states.
[2020-11-25 08:37:37,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4098 states to 4098 states and 4869 transitions.
[2020-11-25 08:37:37,126 INFO  L751         BuchiCegarLoop]: Abstraction has 4098 states and 4869 transitions.
[2020-11-25 08:37:37,126 INFO  L631         BuchiCegarLoop]: Abstraction has 4098 states and 4869 transitions.
[2020-11-25 08:37:37,126 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 08:37:37,126 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4098 states and 4869 transitions.
[2020-11-25 08:37:37,130 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:37,130 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:37,130 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:37,132 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:37,132 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND FALSE  !(choice == 15)
[L8152]  COND FALSE  !(choice == 14)
[L8159]  COND FALSE  !(choice == 13)
[L8166]  COND FALSE  !(choice == 12)
[L8172]  COND FALSE  !(choice == 11)
[L8178]  COND FALSE  !(choice == 10)
[L8184]  COND FALSE  !(choice == 9)
[L8191]  COND FALSE  !(choice == 8)
[L8198]  COND FALSE  !(choice == 7)
[L8204]  COND FALSE  !(choice == 6)
[L8210]  COND FALSE  !(choice == 5)
[L8216]  COND TRUE   choice == 4
[L8217]              gas := gas - 21000;
[L8218]  COND TRUE   gas >= 0
[L8219]              assume amount_s887 >= 0 && amount_s887 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8220]              assume msgvalue_MSG == 0;
[L8221]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L1625]              havoc __exception;
[L1626]              revert := false;
[L1627]  COND FALSE  !(__exception)
[L1655]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L5125]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7031]  COND FALSE  !(DType[this] == VIToken)
[L7036]  COND FALSE  !(DType[this] == ERC20Capped)
[L7041]  COND TRUE   DType[this] == ERC20Mintable
[L7042]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L7042]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]  COND FALSE  !(revert)
[L7054]  COND FALSE  !(DType[this] == VIToken)
[L7059]  COND FALSE  !(DType[this] == ERC20Capped)
[L7064]  COND FALSE  !(DType[this] == ERC20Mintable)
[L7069]  COND TRUE   DType[this] == MinterRole
[L7070]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4825]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s809);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4825]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s809);
[L4826]  COND FALSE  !(revert)
[L4829]              __ret_0_ := __var_34;
[L7070]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L7071]  COND FALSE  !(revert)
[L7077]  COND FALSE  !(!__var_32)
[L5125]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5126]  COND FALSE  !(revert)
[L5129]  COND FALSE  !(DType[this] == VIToken)
[L5134]  COND FALSE  !(DType[this] == ERC20Capped)
[L5139]  COND TRUE   DType[this] == ERC20Mintable
[L5140]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5140]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L5141]  COND FALSE  !(revert)
[L5147]              __ret_0_ := true;
[L1655]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L1656]              assume !revert && gas >= 0;
[L8221]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:37,137 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:37,137 INFO  L82        PathProgramCache]: Analyzing trace with hash -1939211902, now seen corresponding path program 1 times
[2020-11-25 08:37:37,138 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:37,158 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:37,393 INFO  L134       CoverageAnalysis]: Checked inductivity of 1719 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1718 trivial. 0 not checked.
[2020-11-25 08:37:37,393 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:37,393 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:37:37,393 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:37,393 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:37:37,393 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:37:37,393 INFO  L87              Difference]: Start difference. First operand 4098 states and 4869 transitions. cyclomatic complexity: 774 Second operand 3 states.
[2020-11-25 08:37:37,427 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:37,427 INFO  L93              Difference]: Finished difference Result 4110 states and 4883 transitions.
[2020-11-25 08:37:37,427 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:37:37,427 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4110 states and 4883 transitions.
[2020-11-25 08:37:37,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:37,439 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4110 states to 4110 states and 4883 transitions.
[2020-11-25 08:37:37,439 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 679
[2020-11-25 08:37:37,440 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 679
[2020-11-25 08:37:37,440 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4110 states and 4883 transitions.
[2020-11-25 08:37:37,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:37,442 INFO  L728         BuchiCegarLoop]: Abstraction has 4110 states and 4883 transitions.
[2020-11-25 08:37:37,445 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4110 states and 4883 transitions.
[2020-11-25 08:37:37,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4110 to 4104.
[2020-11-25 08:37:37,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4104 states.
[2020-11-25 08:37:37,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4104 states to 4104 states and 4875 transitions.
[2020-11-25 08:37:37,463 INFO  L751         BuchiCegarLoop]: Abstraction has 4104 states and 4875 transitions.
[2020-11-25 08:37:37,463 INFO  L631         BuchiCegarLoop]: Abstraction has 4104 states and 4875 transitions.
[2020-11-25 08:37:37,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 08:37:37,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4104 states and 4875 transitions.
[2020-11-25 08:37:37,467 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:37,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:37,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:37,469 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:37,469 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND FALSE  !(choice == 15)
[L8152]  COND FALSE  !(choice == 14)
[L8159]  COND FALSE  !(choice == 13)
[L8166]  COND FALSE  !(choice == 12)
[L8172]  COND FALSE  !(choice == 11)
[L8178]  COND FALSE  !(choice == 10)
[L8184]  COND FALSE  !(choice == 9)
[L8191]  COND FALSE  !(choice == 8)
[L8198]  COND FALSE  !(choice == 7)
[L8204]  COND FALSE  !(choice == 6)
[L8210]  COND FALSE  !(choice == 5)
[L8216]  COND TRUE   choice == 4
[L8217]              gas := gas - 21000;
[L8218]  COND TRUE   gas >= 0
[L8219]              assume amount_s887 >= 0 && amount_s887 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8220]              assume msgvalue_MSG == 0;
[L8221]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L1625]              havoc __exception;
[L1626]              revert := false;
[L1627]  COND FALSE  !(__exception)
[L1655]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L5125]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7031]  COND FALSE  !(DType[this] == VIToken)
[L7036]  COND TRUE   DType[this] == ERC20Capped
[L7037]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L7037]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]  COND FALSE  !(revert)
[L7054]  COND FALSE  !(DType[this] == VIToken)
[L7059]  COND TRUE   DType[this] == ERC20Capped
[L7060]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4825]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s809);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4825]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s809);
[L4826]  COND FALSE  !(revert)
[L4829]              __ret_0_ := __var_34;
[L7060]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L7061]  COND FALSE  !(revert)
[L7077]  COND FALSE  !(!__var_32)
[L5125]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5126]  COND FALSE  !(revert)
[L5129]  COND FALSE  !(DType[this] == VIToken)
[L5134]  COND FALSE  !(DType[this] == ERC20Capped)
[L5139]  COND TRUE   DType[this] == ERC20Mintable
[L5140]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5140]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L5141]  COND FALSE  !(revert)
[L5147]              __ret_0_ := true;
[L1655]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L1656]              assume !revert && gas >= 0;
[L8221]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s887, amount_s887);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:37,474 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:37,474 INFO  L82        PathProgramCache]: Analyzing trace with hash -1869107458, now seen corresponding path program 1 times
[2020-11-25 08:37:37,474 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:37,495 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:37,757 INFO  L134       CoverageAnalysis]: Checked inductivity of 1719 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1718 trivial. 0 not checked.
[2020-11-25 08:37:37,757 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:37,757 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:37:37,757 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:37,758 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:37:37,758 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:37:37,758 INFO  L87              Difference]: Start difference. First operand 4104 states and 4875 transitions. cyclomatic complexity: 774 Second operand 6 states.
[2020-11-25 08:37:37,845 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:37,846 INFO  L93              Difference]: Finished difference Result 4124 states and 4893 transitions.
[2020-11-25 08:37:37,846 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 08:37:37,846 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4124 states and 4893 transitions.
[2020-11-25 08:37:37,852 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:37,859 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4124 states to 4084 states and 4847 transitions.
[2020-11-25 08:37:37,859 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 675
[2020-11-25 08:37:37,859 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 675
[2020-11-25 08:37:37,859 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4084 states and 4847 transitions.
[2020-11-25 08:37:37,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:37,861 INFO  L728         BuchiCegarLoop]: Abstraction has 4084 states and 4847 transitions.
[2020-11-25 08:37:37,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4084 states and 4847 transitions.
[2020-11-25 08:37:37,880 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4084 to 4084.
[2020-11-25 08:37:37,880 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4084 states.
[2020-11-25 08:37:37,883 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4084 states to 4084 states and 4847 transitions.
[2020-11-25 08:37:37,883 INFO  L751         BuchiCegarLoop]: Abstraction has 4084 states and 4847 transitions.
[2020-11-25 08:37:37,883 INFO  L631         BuchiCegarLoop]: Abstraction has 4084 states and 4847 transitions.
[2020-11-25 08:37:37,883 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 08:37:37,884 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4084 states and 4847 transitions.
[2020-11-25 08:37:37,887 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:37,887 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:37,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:37,889 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:37,889 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND FALSE  !(choice == 15)
[L8152]  COND FALSE  !(choice == 14)
[L8159]  COND TRUE   choice == 13
[L8160]              gas := gas - 21000;
[L8161]  COND TRUE   gas >= 0
[L8162]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8163]              assume msgvalue_MSG == 0;
[L8164]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L975]               havoc __exception;
[L976]               revert := false;
[L977]   COND FALSE  !(__exception)
[L1005]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3711]  COND TRUE   DType[this] == VIToken
[L3712]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3712]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3713]  COND FALSE  !(revert)
[L3734]  COND FALSE  !(DType[this] == VIToken)
[L3739]  COND FALSE  !(DType[this] == ERC20Capped)
[L3744]  COND TRUE   DType[this] == ERC20Mintable
[L3745]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3745]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3746]  COND FALSE  !(revert)
[L3757]  COND FALSE  !(DType[this] == VIToken)
[L3762]  COND FALSE  !(DType[this] == ERC20Capped)
[L3767]  COND TRUE   DType[this] == ERC20Mintable
[L3768]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3768]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3769]  COND FALSE  !(revert)
[L3780]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s407][__var_5], amount_s407, 1686821146);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L3780]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s407][__var_5], amount_s407, 1686821146);
[L3781]  COND FALSE  !(revert)
[L3784]  COND TRUE   DType[this] == VIToken
[L3785]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, __var_3, __var_4);
[L4325]              __var_22 := null;
[L4326]  COND FALSE  !(!(owner_s649 != null))
[L4330]              __var_23 := null;
[L4331]  COND FALSE  !(!(spender_s649 != null))
[L4335]              sum__allowances1[owner_s649] := sum__allowances1[owner_s649] - _allowances_ERC20[this][owner_s649][spender_s649];
[L4336]              _allowances_ERC20[this][owner_s649][spender_s649] := amount_s649;
[L4337]              sum__allowances1[owner_s649] := sum__allowances1[owner_s649] + _allowances_ERC20[this][owner_s649][spender_s649];
[L4338]              assert { :EventEmitted "Approval_ERC20" } true;
[L3785]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, __var_3, __var_4);
[L3786]  COND FALSE  !(revert)
[L3807]              __ret_0_ := true;
[L1005]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1006]              assume !revert && gas >= 0;
[L8164]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:37,894 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:37,894 INFO  L82        PathProgramCache]: Analyzing trace with hash -1201344277, now seen corresponding path program 1 times
[2020-11-25 08:37:37,895 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:37,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:38,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 1682 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1681 trivial. 0 not checked.
[2020-11-25 08:37:38,151 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:37:38,151 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:37:38,151 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:38,151 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:37:38,151 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:37:38,152 INFO  L87              Difference]: Start difference. First operand 4084 states and 4847 transitions. cyclomatic complexity: 766 Second operand 3 states.
[2020-11-25 08:37:38,186 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:37:38,186 INFO  L93              Difference]: Finished difference Result 4102 states and 4867 transitions.
[2020-11-25 08:37:38,186 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:37:38,186 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4102 states and 4867 transitions.
[2020-11-25 08:37:38,192 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:38,198 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4102 states to 4102 states and 4867 transitions.
[2020-11-25 08:37:38,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 08:37:38,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 08:37:38,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4102 states and 4867 transitions.
[2020-11-25 08:37:38,201 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:37:38,201 INFO  L728         BuchiCegarLoop]: Abstraction has 4102 states and 4867 transitions.
[2020-11-25 08:37:38,203 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4102 states and 4867 transitions.
[2020-11-25 08:37:38,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4102 to 4096.
[2020-11-25 08:37:38,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4096 states.
[2020-11-25 08:37:38,222 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4096 states to 4096 states and 4861 transitions.
[2020-11-25 08:37:38,222 INFO  L751         BuchiCegarLoop]: Abstraction has 4096 states and 4861 transitions.
[2020-11-25 08:37:38,222 INFO  L631         BuchiCegarLoop]: Abstraction has 4096 states and 4861 transitions.
[2020-11-25 08:37:38,222 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 08:37:38,222 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4096 states and 4861 transitions.
[2020-11-25 08:37:38,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:37:38,226 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:37:38,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:37:38,227 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:37:38,227 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND FALSE  !(choice == 15)
[L8152]  COND FALSE  !(choice == 14)
[L8159]  COND TRUE   choice == 13
[L8160]              gas := gas - 21000;
[L8161]  COND TRUE   gas >= 0
[L8162]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8163]              assume msgvalue_MSG == 0;
[L8164]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L975]               havoc __exception;
[L976]               revert := false;
[L977]   COND FALSE  !(__exception)
[L1005]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3711]  COND TRUE   DType[this] == VIToken
[L3712]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3712]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3713]  COND FALSE  !(revert)
[L3734]  COND TRUE   DType[this] == VIToken
[L3735]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3735]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3736]  COND FALSE  !(revert)
[L3757]  COND TRUE   DType[this] == VIToken
[L3758]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3758]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3780]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s407][__var_5], amount_s407, 1686821146);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L3780]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s407][__var_5], amount_s407, 1686821146);
[L3781]  COND FALSE  !(revert)
[L3784]  COND TRUE   DType[this] == VIToken
[L3785]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, __var_3, __var_4);
[L4325]              __var_22 := null;
[L4326]  COND FALSE  !(!(owner_s649 != null))
[L4330]              __var_23 := null;
[L4331]  COND FALSE  !(!(spender_s649 != null))
[L4335]              sum__allowances1[owner_s649] := sum__allowances1[owner_s649] - _allowances_ERC20[this][owner_s649][spender_s649];
[L4336]              _allowances_ERC20[this][owner_s649][spender_s649] := amount_s649;
[L4337]              sum__allowances1[owner_s649] := sum__allowances1[owner_s649] + _allowances_ERC20[this][owner_s649][spender_s649];
[L4338]              assert { :EventEmitted "Approval_ERC20" } true;
[L3785]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, __var_3, __var_4);
[L3786]  COND FALSE  !(revert)
[L3807]              __ret_0_ := true;
[L1005]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1006]              assume !revert && gas >= 0;
[L8164]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:37:38,232 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:37:38,232 INFO  L82        PathProgramCache]: Analyzing trace with hash -1036071453, now seen corresponding path program 1 times
[2020-11-25 08:37:38,233 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:37:38,339 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:37:39,964 WARN  L188               SmtUtils]: Spent 213.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 77
[2020-11-25 08:37:40,215 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 78
[2020-11-25 08:37:40,784 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 72
[2020-11-25 08:37:41,296 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 74
[2020-11-25 08:37:41,485 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 64
[2020-11-25 08:37:41,884 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 61
[2020-11-25 08:37:45,532 INFO  L134       CoverageAnalysis]: Checked inductivity of 1682 backedges. 60 proven. 67 refuted. 0 times theorem prover too weak. 1555 trivial. 0 not checked.
[2020-11-25 08:37:45,532 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:37:45,533 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [64] total 64
[2020-11-25 08:37:45,533 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:37:45,533 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 65 interpolants.
[2020-11-25 08:37:45,534 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=252, Invalid=3908, Unknown=0, NotChecked=0, Total=4160
[2020-11-25 08:37:45,534 INFO  L87              Difference]: Start difference. First operand 4096 states and 4861 transitions. cyclomatic complexity: 768 Second operand 65 states.
[2020-11-25 08:37:53,958 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 102
[2020-11-25 08:37:54,673 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 94
[2020-11-25 08:37:55,008 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 94 DAG size of output: 86
[2020-11-25 08:37:55,299 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 72
[2020-11-25 08:38:03,618 WARN  L188               SmtUtils]: Spent 161.00 ms on a formula simplification. DAG size of input: 94 DAG size of output: 93
[2020-11-25 08:38:26,718 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:38:26,718 INFO  L93              Difference]: Finished difference Result 4338 states and 5185 transitions.
[2020-11-25 08:38:26,719 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-11-25 08:38:26,719 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4338 states and 5185 transitions.
[2020-11-25 08:38:26,726 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:26,734 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4338 states to 4338 states and 5185 transitions.
[2020-11-25 08:38:26,734 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 779
[2020-11-25 08:38:26,735 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 779
[2020-11-25 08:38:26,735 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4338 states and 5185 transitions.
[2020-11-25 08:38:26,737 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:38:26,737 INFO  L728         BuchiCegarLoop]: Abstraction has 4338 states and 5185 transitions.
[2020-11-25 08:38:26,740 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4338 states and 5185 transitions.
[2020-11-25 08:38:26,756 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4338 to 4303.
[2020-11-25 08:38:26,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4303 states.
[2020-11-25 08:38:26,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4303 states to 4303 states and 5138 transitions.
[2020-11-25 08:38:26,761 INFO  L751         BuchiCegarLoop]: Abstraction has 4303 states and 5138 transitions.
[2020-11-25 08:38:26,761 INFO  L631         BuchiCegarLoop]: Abstraction has 4303 states and 5138 transitions.
[2020-11-25 08:38:26,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 08:38:26,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4303 states and 5138 transitions.
[2020-11-25 08:38:26,765 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:26,765 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:38:26,765 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:38:26,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:38:26,767 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND FALSE  !(DType[this] == VIToken)
[L3438]  COND FALSE  !(DType[this] == ERC20Capped)
[L3443]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3448]  COND TRUE   DType[this] == ERC20
[L3449]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3449]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3450]  COND FALSE  !(revert)
[L3456]  COND FALSE  !(DType[this] == VIToken)
[L3461]  COND FALSE  !(DType[this] == ERC20Capped)
[L3466]  COND TRUE   DType[this] == ERC20Mintable
[L3467]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3467]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3468]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:38:26,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:38:26,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -454856497, now seen corresponding path program 1 times
[2020-11-25 08:38:26,773 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:38:26,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:38:27,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 1671 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1670 trivial. 0 not checked.
[2020-11-25 08:38:27,028 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:38:27,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:38:27,028 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:38:27,028 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:38:27,028 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:38:27,029 INFO  L87              Difference]: Start difference. First operand 4303 states and 5138 transitions. cyclomatic complexity: 841 Second operand 3 states.
[2020-11-25 08:38:27,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:38:27,065 INFO  L93              Difference]: Finished difference Result 4315 states and 5156 transitions.
[2020-11-25 08:38:27,065 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:38:27,065 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4315 states and 5156 transitions.
[2020-11-25 08:38:27,072 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:27,079 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4315 states to 4315 states and 5156 transitions.
[2020-11-25 08:38:27,079 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 751
[2020-11-25 08:38:27,080 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 751
[2020-11-25 08:38:27,080 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4315 states and 5156 transitions.
[2020-11-25 08:38:27,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:38:27,082 INFO  L728         BuchiCegarLoop]: Abstraction has 4315 states and 5156 transitions.
[2020-11-25 08:38:27,085 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4315 states and 5156 transitions.
[2020-11-25 08:38:27,100 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4315 to 4309.
[2020-11-25 08:38:27,100 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4309 states.
[2020-11-25 08:38:27,104 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4309 states to 4309 states and 5148 transitions.
[2020-11-25 08:38:27,104 INFO  L751         BuchiCegarLoop]: Abstraction has 4309 states and 5148 transitions.
[2020-11-25 08:38:27,104 INFO  L631         BuchiCegarLoop]: Abstraction has 4309 states and 5148 transitions.
[2020-11-25 08:38:27,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 08:38:27,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4309 states and 5148 transitions.
[2020-11-25 08:38:27,108 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:27,109 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:38:27,109 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:38:27,110 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:38:27,110 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND FALSE  !(DType[this] == VIToken)
[L3438]  COND FALSE  !(DType[this] == ERC20Capped)
[L3443]  COND TRUE   DType[this] == ERC20Mintable
[L3444]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3444]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3445]  COND FALSE  !(revert)
[L3456]  COND FALSE  !(DType[this] == VIToken)
[L3461]  COND FALSE  !(DType[this] == ERC20Capped)
[L3466]  COND TRUE   DType[this] == ERC20Mintable
[L3467]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3467]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3468]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:38:27,115 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:38:27,115 INFO  L82        PathProgramCache]: Analyzing trace with hash 801735341, now seen corresponding path program 1 times
[2020-11-25 08:38:27,115 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:38:27,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:38:27,386 INFO  L134       CoverageAnalysis]: Checked inductivity of 1671 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1670 trivial. 0 not checked.
[2020-11-25 08:38:27,386 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:38:27,386 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:38:27,387 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:38:27,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:38:27,387 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:38:27,387 INFO  L87              Difference]: Start difference. First operand 4309 states and 5148 transitions. cyclomatic complexity: 845 Second operand 6 states.
[2020-11-25 08:38:27,555 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:38:27,555 INFO  L93              Difference]: Finished difference Result 4370 states and 5204 transitions.
[2020-11-25 08:38:27,555 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 08:38:27,555 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4370 states and 5204 transitions.
[2020-11-25 08:38:27,562 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:27,569 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4370 states to 4287 states and 5114 transitions.
[2020-11-25 08:38:27,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 746
[2020-11-25 08:38:27,570 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 746
[2020-11-25 08:38:27,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4287 states and 5114 transitions.
[2020-11-25 08:38:27,572 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:38:27,572 INFO  L728         BuchiCegarLoop]: Abstraction has 4287 states and 5114 transitions.
[2020-11-25 08:38:27,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4287 states and 5114 transitions.
[2020-11-25 08:38:27,590 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4287 to 4287.
[2020-11-25 08:38:27,590 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4287 states.
[2020-11-25 08:38:27,594 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4287 states to 4287 states and 5114 transitions.
[2020-11-25 08:38:27,594 INFO  L751         BuchiCegarLoop]: Abstraction has 4287 states and 5114 transitions.
[2020-11-25 08:38:27,594 INFO  L631         BuchiCegarLoop]: Abstraction has 4287 states and 5114 transitions.
[2020-11-25 08:38:27,594 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 08:38:27,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4287 states and 5114 transitions.
[2020-11-25 08:38:27,598 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:27,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:38:27,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:38:27,600 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:38:27,600 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND FALSE  !(DType[this] == VIToken)
[L3461]  COND FALSE  !(DType[this] == ERC20Capped)
[L3466]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3471]  COND TRUE   DType[this] == ERC20
[L3472]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3472]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3473]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:38:27,604 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:38:27,604 INFO  L82        PathProgramCache]: Analyzing trace with hash 1961701541, now seen corresponding path program 1 times
[2020-11-25 08:38:27,604 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:38:27,624 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:38:27,847 INFO  L134       CoverageAnalysis]: Checked inductivity of 1671 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1670 trivial. 0 not checked.
[2020-11-25 08:38:27,847 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:38:27,847 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:38:27,847 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:38:27,847 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:38:27,847 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:38:27,848 INFO  L87              Difference]: Start difference. First operand 4287 states and 5114 transitions. cyclomatic complexity: 833 Second operand 3 states.
[2020-11-25 08:38:27,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:38:27,881 INFO  L93              Difference]: Finished difference Result 4295 states and 5124 transitions.
[2020-11-25 08:38:27,881 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:38:27,881 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4295 states and 5124 transitions.
[2020-11-25 08:38:27,888 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:27,894 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4295 states to 4295 states and 5124 transitions.
[2020-11-25 08:38:27,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 749
[2020-11-25 08:38:27,895 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 749
[2020-11-25 08:38:27,895 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4295 states and 5124 transitions.
[2020-11-25 08:38:27,897 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:38:27,897 INFO  L728         BuchiCegarLoop]: Abstraction has 4295 states and 5124 transitions.
[2020-11-25 08:38:27,900 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4295 states and 5124 transitions.
[2020-11-25 08:38:27,915 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4295 to 4289.
[2020-11-25 08:38:27,915 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4289 states.
[2020-11-25 08:38:27,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4289 states to 4289 states and 5116 transitions.
[2020-11-25 08:38:27,919 INFO  L751         BuchiCegarLoop]: Abstraction has 4289 states and 5116 transitions.
[2020-11-25 08:38:27,919 INFO  L631         BuchiCegarLoop]: Abstraction has 4289 states and 5116 transitions.
[2020-11-25 08:38:27,920 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 08:38:27,920 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4289 states and 5116 transitions.
[2020-11-25 08:38:27,923 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:27,923 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:38:27,923 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:38:27,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:38:27,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND FALSE  !(DType[this] == VIToken)
[L3438]  COND FALSE  !(DType[this] == ERC20Capped)
[L3443]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3448]  COND TRUE   DType[this] == ERC20
[L3449]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3449]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3450]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:38:27,929 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:38:27,929 INFO  L82        PathProgramCache]: Analyzing trace with hash 1846718065, now seen corresponding path program 1 times
[2020-11-25 08:38:27,930 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:38:27,949 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:38:28,173 INFO  L134       CoverageAnalysis]: Checked inductivity of 1671 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1670 trivial. 0 not checked.
[2020-11-25 08:38:28,174 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:38:28,174 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:38:28,174 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:38:28,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:38:28,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:38:28,174 INFO  L87              Difference]: Start difference. First operand 4289 states and 5116 transitions. cyclomatic complexity: 833 Second operand 3 states.
[2020-11-25 08:38:28,208 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:38:28,209 INFO  L93              Difference]: Finished difference Result 4295 states and 5122 transitions.
[2020-11-25 08:38:28,209 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:38:28,209 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4295 states and 5122 transitions.
[2020-11-25 08:38:28,216 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:28,222 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4295 states to 4295 states and 5122 transitions.
[2020-11-25 08:38:28,222 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 749
[2020-11-25 08:38:28,223 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 749
[2020-11-25 08:38:28,223 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4295 states and 5122 transitions.
[2020-11-25 08:38:28,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:38:28,225 INFO  L728         BuchiCegarLoop]: Abstraction has 4295 states and 5122 transitions.
[2020-11-25 08:38:28,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4295 states and 5122 transitions.
[2020-11-25 08:38:28,244 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4295 to 4289.
[2020-11-25 08:38:28,244 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4289 states.
[2020-11-25 08:38:28,248 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4289 states to 4289 states and 5114 transitions.
[2020-11-25 08:38:28,248 INFO  L751         BuchiCegarLoop]: Abstraction has 4289 states and 5114 transitions.
[2020-11-25 08:38:28,248 INFO  L631         BuchiCegarLoop]: Abstraction has 4289 states and 5114 transitions.
[2020-11-25 08:38:28,249 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 08:38:28,249 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4289 states and 5114 transitions.
[2020-11-25 08:38:28,252 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:38:28,252 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:38:28,252 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:38:28,254 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:38:28,254 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s336 && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:38:28,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:38:28,258 INFO  L82        PathProgramCache]: Analyzing trace with hash 1581235703, now seen corresponding path program 1 times
[2020-11-25 08:38:28,259 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:38:28,350 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:38:29,163 INFO  L134       CoverageAnalysis]: Checked inductivity of 1671 backedges. 56 proven. 7 refuted. 0 times theorem prover too weak. 1608 trivial. 0 not checked.
[2020-11-25 08:38:29,163 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:38:29,163 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 08:38:29,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:38:29,164 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 08:38:29,164 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=124, Invalid=1598, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 08:38:29,164 INFO  L87              Difference]: Start difference. First operand 4289 states and 5114 transitions. cyclomatic complexity: 831 Second operand 42 states.
[2020-11-25 08:38:36,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:38:36,337 INFO  L93              Difference]: Finished difference Result 2328 states and 2744 transitions.
[2020-11-25 08:38:36,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 08:38:36,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2328 states and 2744 transitions.
[2020-11-25 08:38:36,342 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:38:36,342 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2328 states to 0 states and 0 transitions.
[2020-11-25 08:38:36,342 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:38:36,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:38:36,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:38:36,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:38:36,342 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:38:36,342 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:38:36,342 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:38:36,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 08:38:36,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:38:36,342 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:38:36,342 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:38:36,345 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:38:36 BasicIcfg
[2020-11-25 08:38:36,345 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:38:36,346 INFO  L168              Benchmark]: Toolchain (without parser) took 103869.21 ms. Allocated memory was 1.0 GB in the beginning and 4.5 GB in the end (delta: 3.5 GB). Free memory was 935.2 MB in the beginning and 1.9 GB in the end (delta: -987.5 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,346 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.38 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,346 INFO  L168              Benchmark]: Boogie Preprocessor took 134.17 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,347 INFO  L168              Benchmark]: UtopiaSpecLang took 86.82 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,347 INFO  L168              Benchmark]: Boogie Printer took 26.24 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,347 INFO  L168              Benchmark]: RCFGBuilder took 1178.29 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 903.0 MB in the beginning and 928.4 MB in the end (delta: -25.4 MB). Peak memory consumption was 191.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,347 INFO  L168              Benchmark]: UtopiaLTL2Aut took 32.21 ms. Allocated memory is still 1.1 GB. Free memory was 928.4 MB in the beginning and 914.7 MB in the end (delta: 13.7 MB). Peak memory consumption was 13.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,348 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2548.38 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 189.3 MB). Free memory was 914.7 MB in the beginning and 1.0 GB in the end (delta: -88.4 MB). Peak memory consumption was 483.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,348 INFO  L168              Benchmark]: BlockEncodingV2 took 209.82 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 883.8 MB in the end (delta: 119.3 MB). Peak memory consumption was 119.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,348 INFO  L168              Benchmark]: BuchiAutomizer took 99650.40 ms. Allocated memory was 1.3 GB in the beginning and 4.5 GB in the end (delta: 3.2 GB). Free memory was 883.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-11-25 08:38:36,351 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8160 locations, 15600 edges
  - StatisticsResult: Encoded RCFG
    7992 locations, 15131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.38 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 134.17 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 86.82 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.24 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1178.29 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 903.0 MB in the beginning and 928.4 MB in the end (delta: -25.4 MB). Peak memory consumption was 191.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 32.21 ms. Allocated memory is still 1.1 GB. Free memory was 928.4 MB in the beginning and 914.7 MB in the end (delta: 13.7 MB). Peak memory consumption was 13.7 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2548.38 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 189.3 MB). Free memory was 914.7 MB in the beginning and 1.0 GB in the end (delta: -88.4 MB). Peak memory consumption was 483.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 209.82 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 883.8 MB in the end (delta: 119.3 MB). Peak memory consumption was 119.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 99650.40 ms. Allocated memory was 1.3 GB in the beginning and 4.5 GB in the end (delta: 3.2 GB). Free memory was 883.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3084 locations, 4749 edges
  - StatisticsResult: BuchiProgram size
    8160 locations, 15600 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 30 terminating modules (30 trivial, 0 deterministic, 0 nondeterministic). 30 modules have a trivial ranking function, the largest among these consists of 65 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 99.6s and 31 iterations.  TraceHistogramMax:12. Analysis of lassos took 16.0s. Construction of modules took 66.3s. BÃ¼chi inclusion checks took 14.9s. Highest rank in rank-based complementation 0. Minimization of det autom 30. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 29 MinimizatonAttempts, 3005 StatesRemovedByMinimization, 21 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 5377 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 153909 SDtfs, 71288 SDslu, 481080 SDs, 0 SdLazy, 414442 SolverSat, 16159 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 66.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU30 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
