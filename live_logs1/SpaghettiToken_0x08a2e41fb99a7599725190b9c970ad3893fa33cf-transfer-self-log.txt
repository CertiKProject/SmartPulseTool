This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 04:15:26,299 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 04:15:26,300 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 04:15:26,313 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 04:15:26,313 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 04:15:26,313 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 04:15:26,314 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 04:15:26,316 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 04:15:26,319 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 04:15:26,319 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 04:15:26,320 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 04:15:26,320 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 04:15:26,321 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 04:15:26,322 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 04:15:26,323 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 04:15:26,324 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 04:15:26,324 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 04:15:26,326 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 04:15:26,327 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 04:15:26,328 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 04:15:26,329 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 04:15:26,330 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 04:15:26,332 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 04:15:26,332 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 04:15:26,332 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 04:15:26,333 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 04:15:26,333 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 04:15:26,334 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 04:15:26,334 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 04:15:26,334 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 04:15:26,335 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 04:15:26,335 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 04:15:26,336 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 04:15:26,336 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 04:15:26,337 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 04:15:26,337 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 04:15:26,338 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 04:15:26,338 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 04:15:26,338 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 04:15:26,339 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 04:15:26,339 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 04:15:26,340 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 04:15:26,347 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 04:15:26,347 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 04:15:26,348 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 04:15:26,348 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 04:15:26,349 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 04:15:26,349 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 04:15:26,349 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 04:15:26,350 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 04:15:26,350 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 04:15:26,351 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 04:15:26,351 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 04:15:26,351 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 04:15:26,377 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 04:15:26,388 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 04:15:26,391 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 04:15:26,392 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 04:15:26,393 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 04:15:26,393 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl
[2020-11-25 04:15:26,394 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl'
[2020-11-25 04:15:26,459 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 04:15:26,460 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 04:15:26,460 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 04:15:26,460 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 04:15:26,461 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 04:15:26,477 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,479 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,507 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,508 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,526 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,533 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,538 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,547 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 04:15:26,548 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 04:15:26,548 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 04:15:26,550 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 04:15:26,554 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/1) ...
[2020-11-25 04:15:26,570 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(SpaghettiToken.transfer(to, value), msg.sender == to && value <= balanceOf_SpaghettiToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:26,575 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(SpaghettiToken.transfer(to, value), msg.sender == to && value <= balanceOf_SpaghettiToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:26,583 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(SpaghettiToken.transfer(to, value), msg.sender == to && value <= balanceOf_SpaghettiToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:26,589 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==dst_s194 && wad_s194<=balanceOf_SpaghettiToken[this][msg.sender] ) && wad_s194>=0 ) && wad_s194<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][dst_s194]>=0 ) && balanceOf_SpaghettiToken[this][dst_s194]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][msg.sender]>=0 ) && balanceOf_SpaghettiToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 04:15:26,591 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && totalSupply_SpaghettiToken[this]==( old(totalSupply_SpaghettiToken[this]) ) ) && balanceOf_SpaghettiToken[this]==( old(balanceOf_SpaghettiToken[this]) ) ) && allowance_SpaghettiToken[this]==( old(allowance_SpaghettiToken[this]) ) ) && symbol_SpaghettiToken[this]==( old(symbol_SpaghettiToken[this]) ) ) && decimals_SpaghettiToken[this]==( old(decimals_SpaghettiToken[this]) ) ) && name_SpaghettiToken[this]==( old(name_SpaghettiToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_SpaghettiToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]]
[2020-11-25 04:15:26,596 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(SpaghettiToken.transfer(to, value), msg.sender == to && value <= balanceOf_SpaghettiToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:26,596 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_SpaghettiToken0) ==> ( <>AP(success_transfer_SpaghettiToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 04:15:26,602 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:26 PropertyContainer
[2020-11-25 04:15:26,602 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 04:15:26,603 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 04:15:26,603 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 04:15:26,603 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 04:15:26,604 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/2) ...
[2020-11-25 04:15:26,604 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 04:15:26,604 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 04:15:26,613 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:26" (2/2) ...
[2020-11-25 04:15:26,613 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 04:15:26,613 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 04:15:26,613 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 04:15:26,614 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 04:15:26,614 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/2) ...
[2020-11-25 04:15:26,675 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 04:15:26,675 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath
[2020-11-25 04:15:26,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:15:26,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken
[2020-11-25 04:15:26,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken
[2020-11-25 04:15:26,676 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,677 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:15:26,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 04:15:26,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DSMath
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DSMath
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__success
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:15:26,679 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:15:26,680 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__success
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__success
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__success
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 04:15:26,681 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 04:15:26,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 04:15:26,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__fail
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:15:26,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:15:26,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__success
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__success
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__fail
[2020-11-25 04:15:26,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__success
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DSMath
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DSMath
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 04:15:26,685 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 04:15:26,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 04:15:27,121 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:27,121 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:27,122 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:27,219 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 04:15:27,219 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 04:15:27,222 INFO  L202        PluginConnector]: Adding new model SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:27 BoogieIcfgContainer
[2020-11-25 04:15:27,222 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:26" (2/2) ...
[2020-11-25 04:15:27,222 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 04:15:27,223 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4364fdd4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:27, skipping insertion in model container
[2020-11-25 04:15:27,223 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 04:15:27,224 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 04:15:27,224 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 04:15:27,226 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 04:15:27,227 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/3) ...
[2020-11-25 04:15:27,227 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5523a15c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:27, skipping insertion in model container
[2020-11-25 04:15:27,227 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:26" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 04:15:27,265 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:27 NWAContainer
[2020-11-25 04:15:27,265 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 04:15:27,265 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 04:15:27,265 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 04:15:27,266 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 04:15:27,267 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:27" (3/4) ...
[2020-11-25 04:15:27,268 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5bd54b48 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:27, skipping insertion in model container
[2020-11-25 04:15:27,268 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:27" (4/4) ...
[2020-11-25 04:15:27,272 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 04:15:27,274 INFO  L110   BuchiProductObserver]: Initial RCFG 744 locations, 934 edges
[2020-11-25 04:15:27,274 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 04:15:27,286 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 04:15:28,180 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 04:15:28,183 INFO  L110   BuchiProductObserver]: BuchiProgram size 1776 locations, 3016 edges
[2020-11-25 04:15:28,183 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:28 BoogieIcfgContainer
[2020-11-25 04:15:28,183 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 04:15:28,183 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 04:15:28,183 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 04:15:28,185 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 04:15:28,185 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:28" (1/1) ...
[2020-11-25 04:15:28,223 INFO  L313           BlockEncoder]: Initial Icfg 1776 locations, 3016 edges
[2020-11-25 04:15:28,223 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 04:15:28,224 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 04:15:28,224 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 04:15:28,224 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 04:15:28,230 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 7 locations because of local infeasibility
[2020-11-25 04:15:28,234 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 04:15:28,240 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 04:15:28,242 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 04:15:28,244 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 04:15:28,244 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 04:15:28,247 INFO  L313           BlockEncoder]: Encoded RCFG 1738 locations, 2913 edges
[2020-11-25 04:15:28,248 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:15:28 BasicIcfg
[2020-11-25 04:15:28,248 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 04:15:28,248 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 04:15:28,248 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 04:15:28,250 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 04:15:28,250 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:28,250 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:26" (1/6) ...
[2020-11-25 04:15:28,251 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2505d2d4 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:28, skipping insertion in model container
[2020-11-25 04:15:28,251 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:28,252 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:26" (2/6) ...
[2020-11-25 04:15:28,252 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2505d2d4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:28, skipping insertion in model container
[2020-11-25 04:15:28,252 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:28,252 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:27" (3/6) ...
[2020-11-25 04:15:28,252 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2505d2d4 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:15:28, skipping insertion in model container
[2020-11-25 04:15:28,252 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:28,252 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:27" (4/6) ...
[2020-11-25 04:15:28,252 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2505d2d4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:28, skipping insertion in model container
[2020-11-25 04:15:28,252 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:28,252 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:28" (5/6) ...
[2020-11-25 04:15:28,253 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2505d2d4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:15:28, skipping insertion in model container
[2020-11-25 04:15:28,253 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:28,253 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:15:28" (6/6) ...
[2020-11-25 04:15:28,253 INFO  L404   chiAutomizerObserver]: Analyzing ICFG SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl_BEv2
[2020-11-25 04:15:28,283 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 04:15:28,284 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 04:15:28,284 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 04:15:28,284 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 04:15:28,284 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 04:15:28,284 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 04:15:28,284 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 04:15:28,284 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 04:15:28,284 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 04:15:28,300 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1738 states.
[2020-11-25 04:15:28,333 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:28,333 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:28,333 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:28,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:28,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:28,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 04:15:28,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1738 states.
[2020-11-25 04:15:28,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:28,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:28,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:28,353 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:28,353 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND TRUE   revert
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:28,365 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:28,366 INFO  L82        PathProgramCache]: Analyzing trace with hash 1037590258, now seen corresponding path program 1 times
[2020-11-25 04:15:28,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:28,384 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:28,431 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:28,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:28,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:28,437 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:28,526 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:28,526 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:28,528 INFO  L87              Difference]: Start difference. First operand 1738 states. Second operand 4 states.
[2020-11-25 04:15:28,708 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:28,709 INFO  L93              Difference]: Finished difference Result 1379 states and 1524 transitions.
[2020-11-25 04:15:28,709 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:28,710 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1379 states and 1524 transitions.
[2020-11-25 04:15:28,717 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:28,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1379 states to 1379 states and 1524 transitions.
[2020-11-25 04:15:28,728 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 04:15:28,729 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 424
[2020-11-25 04:15:28,729 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1379 states and 1524 transitions.
[2020-11-25 04:15:28,734 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:28,734 INFO  L728         BuchiCegarLoop]: Abstraction has 1379 states and 1524 transitions.
[2020-11-25 04:15:28,746 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1379 states and 1524 transitions.
[2020-11-25 04:15:28,769 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1379 to 1379.
[2020-11-25 04:15:28,770 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1379 states.
[2020-11-25 04:15:28,772 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1379 states to 1379 states and 1524 transitions.
[2020-11-25 04:15:28,773 INFO  L751         BuchiCegarLoop]: Abstraction has 1379 states and 1524 transitions.
[2020-11-25 04:15:28,773 INFO  L631         BuchiCegarLoop]: Abstraction has 1379 states and 1524 transitions.
[2020-11-25 04:15:28,773 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 04:15:28,773 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1379 states and 1524 transitions.
[2020-11-25 04:15:28,777 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:28,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:28,777 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:28,779 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:28,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND TRUE   revert
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1267]  COND TRUE   !(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1268]              revert := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND TRUE   revert
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L2]                 revert := revert_hold;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1267]  COND TRUE   !(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1268]              revert := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND TRUE   revert
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L2]                 revert := revert_hold;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:28,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:28,782 INFO  L82        PathProgramCache]: Analyzing trace with hash -1972358748, now seen corresponding path program 1 times
[2020-11-25 04:15:28,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:28,791 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:28,807 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:28,807 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:28,807 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:28,808 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:28,808 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:28,808 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:28,809 INFO  L87              Difference]: Start difference. First operand 1379 states and 1524 transitions. cyclomatic complexity: 147 Second operand 4 states.
[2020-11-25 04:15:29,045 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:29,045 INFO  L93              Difference]: Finished difference Result 1997 states and 2276 transitions.
[2020-11-25 04:15:29,045 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:29,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1997 states and 2276 transitions.
[2020-11-25 04:15:29,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 04:15:29,065 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1997 states to 1933 states and 2200 transitions.
[2020-11-25 04:15:29,065 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 04:15:29,066 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 599
[2020-11-25 04:15:29,066 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1933 states and 2200 transitions.
[2020-11-25 04:15:29,069 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:29,069 INFO  L728         BuchiCegarLoop]: Abstraction has 1933 states and 2200 transitions.
[2020-11-25 04:15:29,071 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1933 states and 2200 transitions.
[2020-11-25 04:15:29,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1933 to 1415.
[2020-11-25 04:15:29,087 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1415 states.
[2020-11-25 04:15:29,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1415 states to 1415 states and 1522 transitions.
[2020-11-25 04:15:29,090 INFO  L751         BuchiCegarLoop]: Abstraction has 1415 states and 1522 transitions.
[2020-11-25 04:15:29,090 INFO  L631         BuchiCegarLoop]: Abstraction has 1415 states and 1522 transitions.
[2020-11-25 04:15:29,090 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 04:15:29,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1415 states and 1522 transitions.
[2020-11-25 04:15:29,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:29,094 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:29,094 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:29,095 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:29,095 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1214]              revert := true;
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1214]              revert := true;
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:29,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:29,099 INFO  L82        PathProgramCache]: Analyzing trace with hash -1503068848, now seen corresponding path program 1 times
[2020-11-25 04:15:29,099 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:29,112 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:29,158 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:29,158 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:29,158 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:15:29,158 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:29,159 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:15:29,159 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:15:29,159 INFO  L87              Difference]: Start difference. First operand 1415 states and 1522 transitions. cyclomatic complexity: 109 Second operand 7 states.
[2020-11-25 04:15:29,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:29,842 INFO  L93              Difference]: Finished difference Result 1573 states and 1701 transitions.
[2020-11-25 04:15:29,842 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 04:15:29,843 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1573 states and 1701 transitions.
[2020-11-25 04:15:29,850 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:29,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1573 states to 1573 states and 1701 transitions.
[2020-11-25 04:15:29,857 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 501
[2020-11-25 04:15:29,857 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 501
[2020-11-25 04:15:29,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1573 states and 1701 transitions.
[2020-11-25 04:15:29,859 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:29,859 INFO  L728         BuchiCegarLoop]: Abstraction has 1573 states and 1701 transitions.
[2020-11-25 04:15:29,861 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1573 states and 1701 transitions.
[2020-11-25 04:15:29,886 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1573 to 1475.
[2020-11-25 04:15:29,887 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1475 states.
[2020-11-25 04:15:29,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1475 states to 1475 states and 1588 transitions.
[2020-11-25 04:15:29,891 INFO  L751         BuchiCegarLoop]: Abstraction has 1475 states and 1588 transitions.
[2020-11-25 04:15:29,891 INFO  L631         BuchiCegarLoop]: Abstraction has 1475 states and 1588 transitions.
[2020-11-25 04:15:29,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 04:15:29,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1475 states and 1588 transitions.
[2020-11-25 04:15:29,896 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:29,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:29,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:29,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:29,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1197]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1198]              revert := true;
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1197]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1198]              revert := true;
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:29,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:29,903 INFO  L82        PathProgramCache]: Analyzing trace with hash -66015129, now seen corresponding path program 1 times
[2020-11-25 04:15:29,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:29,916 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:29,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:29,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:29,960 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 04:15:29,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:29,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 04:15:29,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 04:15:29,961 INFO  L87              Difference]: Start difference. First operand 1475 states and 1588 transitions. cyclomatic complexity: 115 Second operand 3 states.
[2020-11-25 04:15:29,993 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:29,993 INFO  L93              Difference]: Finished difference Result 1555 states and 1686 transitions.
[2020-11-25 04:15:29,993 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 04:15:29,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1555 states and 1686 transitions.
[2020-11-25 04:15:30,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:30,025 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1555 states to 1555 states and 1686 transitions.
[2020-11-25 04:15:30,025 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 475
[2020-11-25 04:15:30,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 475
[2020-11-25 04:15:30,026 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1555 states and 1686 transitions.
[2020-11-25 04:15:30,029 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:30,029 INFO  L728         BuchiCegarLoop]: Abstraction has 1555 states and 1686 transitions.
[2020-11-25 04:15:30,030 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1555 states and 1686 transitions.
[2020-11-25 04:15:30,047 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1555 to 1547.
[2020-11-25 04:15:30,048 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1547 states.
[2020-11-25 04:15:30,050 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1547 states to 1547 states and 1678 transitions.
[2020-11-25 04:15:30,050 INFO  L751         BuchiCegarLoop]: Abstraction has 1547 states and 1678 transitions.
[2020-11-25 04:15:30,050 INFO  L631         BuchiCegarLoop]: Abstraction has 1547 states and 1678 transitions.
[2020-11-25 04:15:30,050 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 04:15:30,050 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1547 states and 1678 transitions.
[2020-11-25 04:15:30,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:30,055 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:30,055 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:30,057 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:30,057 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1217]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1218]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1024]              revert := true;
[L1218]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1219]  COND TRUE   revert
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1217]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1218]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1024]              revert := true;
[L1218]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1219]  COND TRUE   revert
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:30,067 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:30,068 INFO  L82        PathProgramCache]: Analyzing trace with hash -184019254, now seen corresponding path program 1 times
[2020-11-25 04:15:30,068 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:30,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:30,134 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:30,135 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:30,135 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:15:30,135 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:30,135 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:15:30,135 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:15:30,136 INFO  L87              Difference]: Start difference. First operand 1547 states and 1678 transitions. cyclomatic complexity: 133 Second operand 7 states.
[2020-11-25 04:15:30,222 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:30,223 INFO  L93              Difference]: Finished difference Result 1585 states and 1721 transitions.
[2020-11-25 04:15:30,223 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:15:30,223 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1585 states and 1721 transitions.
[2020-11-25 04:15:30,229 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:30,236 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1585 states to 1585 states and 1721 transitions.
[2020-11-25 04:15:30,236 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 487
[2020-11-25 04:15:30,236 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 487
[2020-11-25 04:15:30,236 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1585 states and 1721 transitions.
[2020-11-25 04:15:30,238 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:30,238 INFO  L728         BuchiCegarLoop]: Abstraction has 1585 states and 1721 transitions.
[2020-11-25 04:15:30,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1585 states and 1721 transitions.
[2020-11-25 04:15:30,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1585 to 1554.
[2020-11-25 04:15:30,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1554 states.
[2020-11-25 04:15:30,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1554 states to 1554 states and 1686 transitions.
[2020-11-25 04:15:30,258 INFO  L751         BuchiCegarLoop]: Abstraction has 1554 states and 1686 transitions.
[2020-11-25 04:15:30,258 INFO  L631         BuchiCegarLoop]: Abstraction has 1554 states and 1686 transitions.
[2020-11-25 04:15:30,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 04:15:30,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1554 states and 1686 transitions.
[2020-11-25 04:15:30,262 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:30,262 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:30,262 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:30,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:30,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1217]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1218]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1218]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1219]  COND FALSE  !(revert)
[L1225]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1226]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1227]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1228]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1230]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1230]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1231]  COND FALSE  !(revert)
[L1237]              ninetynine_s309 := ninetynine_s309;
[L1238]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1239]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1004]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1005]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1006]              revert := true;
[L1239]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1240]  COND TRUE   revert
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1217]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1218]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1218]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1219]  COND FALSE  !(revert)
[L1225]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1226]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1227]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1228]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1230]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1230]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1231]  COND FALSE  !(revert)
[L1237]              ninetynine_s309 := ninetynine_s309;
[L1238]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1239]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1004]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1005]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1006]              revert := true;
[L1239]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1240]  COND TRUE   revert
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:30,269 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:30,269 INFO  L82        PathProgramCache]: Analyzing trace with hash -1438464910, now seen corresponding path program 1 times
[2020-11-25 04:15:30,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:30,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:30,616 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 04:15:30,616 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:30,616 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 04:15:30,617 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:30,617 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 04:15:30,617 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=592, Unknown=0, NotChecked=0, Total=650
[2020-11-25 04:15:30,617 INFO  L87              Difference]: Start difference. First operand 1554 states and 1686 transitions. cyclomatic complexity: 134 Second operand 26 states.
[2020-11-25 04:15:33,372 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:33,373 INFO  L93              Difference]: Finished difference Result 1707 states and 1887 transitions.
[2020-11-25 04:15:33,373 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 04:15:33,373 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1707 states and 1887 transitions.
[2020-11-25 04:15:33,377 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:15:33,382 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1707 states to 1707 states and 1887 transitions.
[2020-11-25 04:15:33,383 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 542
[2020-11-25 04:15:33,383 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 542
[2020-11-25 04:15:33,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1707 states and 1887 transitions.
[2020-11-25 04:15:33,385 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:33,385 INFO  L728         BuchiCegarLoop]: Abstraction has 1707 states and 1887 transitions.
[2020-11-25 04:15:33,386 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1707 states and 1887 transitions.
[2020-11-25 04:15:33,399 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1707 to 1638.
[2020-11-25 04:15:33,399 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1638 states.
[2020-11-25 04:15:33,401 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1638 states to 1638 states and 1785 transitions.
[2020-11-25 04:15:33,401 INFO  L751         BuchiCegarLoop]: Abstraction has 1638 states and 1785 transitions.
[2020-11-25 04:15:33,401 INFO  L631         BuchiCegarLoop]: Abstraction has 1638 states and 1785 transitions.
[2020-11-25 04:15:33,401 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 04:15:33,401 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1638 states and 1785 transitions.
[2020-11-25 04:15:33,403 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:33,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:33,403 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:33,404 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:33,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND TRUE   __exception
[L306]               __tmp__Balance := Balance;
[L307]               __tmp__DType := DType;
[L308]               __tmp__Alloc := Alloc;
[L309]               __tmp__balance_ADDR := balance_ADDR;
[L310]               __tmp__M_Ref_int := M_Ref_int;
[L311]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L312]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L313]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L314]               __tmp__sum_allowance1 := sum_allowance1;
[L315]               __tmp__Length := Length;
[L316]               __tmp__now := now;
[L317]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L318]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L319]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L320]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L321]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L322]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L323]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1168]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1195]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1196]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1213]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1217]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1218]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1218]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1219]  COND FALSE  !(revert)
[L1225]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1226]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1227]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1228]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1230]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1022]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1023]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1024]              revert := true;
[L1230]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1231]  COND TRUE   revert
[L1168]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1169]  COND TRUE   revert
[L323]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L324]               assume revert || gas < 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:33,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:33,407 INFO  L82        PathProgramCache]: Analyzing trace with hash -365930121, now seen corresponding path program 1 times
[2020-11-25 04:15:33,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:33,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:33,441 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 04:15:33,441 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:33,441 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:15:33,441 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:33,441 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:15:33,441 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:15:33,442 INFO  L87              Difference]: Start difference. First operand 1638 states and 1785 transitions. cyclomatic complexity: 151 Second operand 7 states.
[2020-11-25 04:15:33,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:33,507 INFO  L93              Difference]: Finished difference Result 1673 states and 1824 transitions.
[2020-11-25 04:15:33,507 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:15:33,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1673 states and 1824 transitions.
[2020-11-25 04:15:33,511 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:33,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1673 states to 1673 states and 1824 transitions.
[2020-11-25 04:15:33,515 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 538
[2020-11-25 04:15:33,516 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 538
[2020-11-25 04:15:33,516 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1673 states and 1824 transitions.
[2020-11-25 04:15:33,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:33,517 INFO  L728         BuchiCegarLoop]: Abstraction has 1673 states and 1824 transitions.
[2020-11-25 04:15:33,518 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1673 states and 1824 transitions.
[2020-11-25 04:15:33,530 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1673 to 1638.
[2020-11-25 04:15:33,530 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1638 states.
[2020-11-25 04:15:33,532 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1638 states to 1638 states and 1785 transitions.
[2020-11-25 04:15:33,532 INFO  L751         BuchiCegarLoop]: Abstraction has 1638 states and 1785 transitions.
[2020-11-25 04:15:33,532 INFO  L631         BuchiCegarLoop]: Abstraction has 1638 states and 1785 transitions.
[2020-11-25 04:15:33,532 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 04:15:33,532 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1638 states and 1785 transitions.
[2020-11-25 04:15:33,534 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:33,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:33,535 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:33,535 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:33,535 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L2]                 revert := revert_hold;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL       call CorralChoice_SpaghettiToken(this);
[L1910]             havoc msgsender_MSG;
[L1911]             havoc msgvalue_MSG;
[L1912]             havoc choice;
[L1913]             havoc __ret_0_totalSupply;
[L1914]             havoc arg329_s0;
[L1915]             havoc __ret_0_balanceOf;
[L1916]             havoc arg330_s0;
[L1917]             havoc arg331_s0;
[L1918]             havoc __ret_0_allowance;
[L1919]             havoc __ret_0_symbol;
[L1920]             havoc __ret_0_decimals;
[L1921]             havoc __ret_0_name;
[L1922]             havoc chef_s113;
[L1923]             havoc guy_s149;
[L1924]             havoc __ret_0_approve;
[L1925]             havoc guy_s177;
[L1926]             havoc wad_s177;
[L1927]             havoc dst_s194;
[L1928]             havoc wad_s194;
[L1929]             havoc __ret_0_transfer;
[L1930]             havoc src_s309;
[L1931]             havoc dst_s309;
[L1932]             havoc wad_s309;
[L1933]             havoc __ret_0_transferFrom;
[L1934]             havoc tmpNow;
[L1935]             havoc gas;
[L1936]             assume gas > 4000000 && gas <= 8000000;
[L1937]             tmpNow := now;
[L1938]             havoc now;
[L1939]             assume now > tmpNow;
[L1940]             assume msgsender_MSG != null;
[L1941]             assume DType[msgsender_MSG] != DSMath;
[L1942]             assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]             Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE  choice == 10
[L1945]             gas := gas - 21000;
[L1946]  COND TRUE  gas >= 0
[L1947]             assume msgvalue_MSG == 0;
[L1948]  CALL       call __ret_0_totalSupply := totalSupply_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG);
[L411]              havoc __exception;
[L412]              revert := false;
[L413]   COND TRUE  __exception
[L414]              __tmp__Balance := Balance;
[L415]              __tmp__DType := DType;
[L416]              __tmp__Alloc := Alloc;
[L417]              __tmp__balance_ADDR := balance_ADDR;
[L418]              __tmp__M_Ref_int := M_Ref_int;
[L419]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L420]              __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L421]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]              __tmp__sum_allowance1 := sum_allowance1;
[L423]              __tmp__Length := Length;
[L424]              __tmp__now := now;
[L425]              __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L426]              __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L427]              __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L428]              __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L429]              __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L430]              __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L431]   CALL       call __ret_0_ := totalSupply_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1359]             __ret_0_ := __tmp__totalSupply_SpaghettiToken[this];
[L431]   RET        call __ret_0_ := totalSupply_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L432]              assume revert || gas < 0;
[L1948]  RET        call __ret_0_totalSupply := totalSupply_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG);
[L2026]  RET        call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:33,538 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:33,538 INFO  L82        PathProgramCache]: Analyzing trace with hash 1467812171, now seen corresponding path program 1 times
[2020-11-25 04:15:33,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:33,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:33,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:33,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:33,644 INFO  L82        PathProgramCache]: Analyzing trace with hash -1541741902, now seen corresponding path program 1 times
[2020-11-25 04:15:33,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:33,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:33,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:33,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:33,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 04:15:33,654 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 04:15:33,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 04:15:33,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 04:15:33,654 INFO  L87              Difference]: Start difference. First operand 1638 states and 1785 transitions. cyclomatic complexity: 151 Second operand 5 states.
[2020-11-25 04:15:33,865 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:33,865 INFO  L93              Difference]: Finished difference Result 2010 states and 2295 transitions.
[2020-11-25 04:15:33,865 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:15:33,865 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2010 states and 2295 transitions.
[2020-11-25 04:15:33,873 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 04:15:33,880 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2010 states to 1499 states and 1779 transitions.
[2020-11-25 04:15:33,880 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 373
[2020-11-25 04:15:33,880 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 373
[2020-11-25 04:15:33,881 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1499 states and 1779 transitions.
[2020-11-25 04:15:33,883 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:33,883 INFO  L728         BuchiCegarLoop]: Abstraction has 1499 states and 1779 transitions.
[2020-11-25 04:15:33,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1499 states and 1779 transitions.
[2020-11-25 04:15:33,895 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1499 to 1117.
[2020-11-25 04:15:33,895 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1117 states.
[2020-11-25 04:15:33,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1117 states to 1117 states and 1240 transitions.
[2020-11-25 04:15:33,896 INFO  L751         BuchiCegarLoop]: Abstraction has 1117 states and 1240 transitions.
[2020-11-25 04:15:33,896 INFO  L631         BuchiCegarLoop]: Abstraction has 1117 states and 1240 transitions.
[2020-11-25 04:15:33,896 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 04:15:33,897 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1117 states and 1240 transitions.
[2020-11-25 04:15:33,899 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:33,899 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:33,899 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:33,900 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:33,900 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L2]                 revert := revert_hold;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == dst_s194 && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L2]                 revert := revert_hold;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:33,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:33,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 1467812171, now seen corresponding path program 2 times
[2020-11-25 04:15:33,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:33,930 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:33,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:33,968 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:33,968 INFO  L82        PathProgramCache]: Analyzing trace with hash 455046836, now seen corresponding path program 1 times
[2020-11-25 04:15:33,969 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:33,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:34,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:34,032 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:34,032 INFO  L82        PathProgramCache]: Analyzing trace with hash 549994750, now seen corresponding path program 1 times
[2020-11-25 04:15:34,033 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:34,121 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:34,261 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 04:15:34,670 WARN  L188               SmtUtils]: Spent 308.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 164
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
[2020-11-25 04:15:34,886 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 79
[2020-11-25 04:15:35,056 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 111
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 04:15:35,228 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 103
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
[2020-11-25 04:15:35,391 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 103
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 04:15:35,642 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 154 DAG size of output: 139
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
[2020-11-25 04:15:35,958 WARN  L188               SmtUtils]: Spent 303.00 ms on a formula simplification. DAG size of input: 97 DAG size of output: 92
[2020-11-25 04:15:36,396 WARN  L188               SmtUtils]: Spent 436.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 216
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
[2020-11-25 04:15:36,513 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 198
[2020-11-25 04:15:36,829 WARN  L188               SmtUtils]: Spent 313.00 ms on a formula simplification. DAG size of input: 256 DAG size of output: 228
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 04:15:37,146 WARN  L188               SmtUtils]: Spent 224.00 ms on a formula simplification that was a NOOP. DAG size: 274
Garbage collection #1: 107 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
[2020-11-25 04:15:37,300 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 216
[2020-11-25 04:15:37,439 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification that was a NOOP. DAG size: 216
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
[2020-11-25 04:15:37,523 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 04:15:37,959 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 164
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
[2020-11-25 04:15:38,083 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 79
[2020-11-25 04:15:38,199 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 111
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
[2020-11-25 04:15:38,511 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 103
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
[2020-11-25 04:15:38,767 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 154 DAG size of output: 138
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 04:15:39,086 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification. DAG size of input: 96 DAG size of output: 91
[2020-11-25 04:15:39,375 WARN  L188               SmtUtils]: Spent 288.00 ms on a formula simplification. DAG size of input: 230 DAG size of output: 215
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 04:15:39,506 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification that was a NOOP. DAG size: 197
[2020-11-25 04:15:39,897 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification. DAG size of input: 254 DAG size of output: 227
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 04:15:40,004 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 155
[2020-11-25 04:15:40,255 WARN  L188               SmtUtils]: Spent 250.00 ms on a formula simplification that was a NOOP. DAG size: 277
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 04:15:40,412 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification that was a NOOP. DAG size: 219
[2020-11-25 04:15:45,795 WARN  L188               SmtUtils]: Spent 5.38 s on a formula simplification. DAG size of input: 388 DAG size of output: 384
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 04:15:45,998 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification that was a NOOP. DAG size: 180
[2020-11-25 04:15:47,320 WARN  L188               SmtUtils]: Spent 1.31 s on a formula simplification that was a NOOP. DAG size: 249
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 04:15:47,470 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 180
[2020-11-25 04:15:48,403 WARN  L188               SmtUtils]: Spent 931.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 250
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 04:15:48,887 WARN  L188               SmtUtils]: Spent 482.00 ms on a formula simplification that was a NOOP. DAG size: 246
[2020-11-25 04:15:48,900 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:48,908 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 04:15:48,909 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 04:15:48,909 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 04:15:48,909 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 04:15:48,909 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 04:15:48,909 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 04:15:48,909 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 04:15:48,909 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 04:15:48,909 INFO  L131   ssoRankerPreferences]: Filename of dumped script: SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-self.bpl_BEv2_Iteration9_Lasso
[2020-11-25 04:15:48,909 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 04:15:48,909 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 04:15:48,967 INFO  L141          MapEliminator]: Using MapEliminator with SimplificationTechnique=SIMPLIFY_DDA XnfConversionTechnique=BDD_BASED AddInequalities=false OnlyTrivialImplicationsArrayWrite=false OnlyTrivialImplicationsForModifiedArguments=true OnlyArgumentsInFormula=true
[2020-11-25 04:15:48,971 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: Only formulae in NNF are supported
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.MapEliminationLassoPreprocessor.process(MapEliminationLassoPreprocessor.java:109)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 04:15:48,972 INFO  L168              Benchmark]: Toolchain (without parser) took 22513.16 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 945.9 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,973 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,973 INFO  L168              Benchmark]: Boogie Preprocessor took 87.57 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,973 INFO  L168              Benchmark]: UtopiaSpecLang took 54.40 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,973 INFO  L168              Benchmark]: Boogie Printer took 10.49 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,973 INFO  L168              Benchmark]: RCFGBuilder took 610.21 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 876.1 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,974 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.04 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 867.1 MB in the end (delta: 9.1 MB). Peak memory consumption was 9.1 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,974 INFO  L168              Benchmark]: BÃ¼chi Program Product took 917.80 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 867.1 MB in the beginning and 907.3 MB in the end (delta: -40.3 MB). Peak memory consumption was 151.0 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,974 INFO  L168              Benchmark]: BlockEncodingV2 took 64.71 ms. Allocated memory is still 1.1 GB. Free memory was 907.3 MB in the beginning and 878.9 MB in the end (delta: 28.4 MB). Peak memory consumption was 28.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,974 INFO  L168              Benchmark]: BuchiAutomizer took 20723.90 ms. Allocated memory was 1.1 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 878.9 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 04:15:48,977 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1776 locations, 3016 edges
  - StatisticsResult: Encoded RCFG
    1738 locations, 2913 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 87.57 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.40 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.49 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 610.21 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 876.1 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.04 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 867.1 MB in the end (delta: 9.1 MB). Peak memory consumption was 9.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 917.80 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 867.1 MB in the beginning and 907.3 MB in the end (delta: -40.3 MB). Peak memory consumption was 151.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 64.71 ms. Allocated memory is still 1.1 GB. Free memory was 907.3 MB in the beginning and 878.9 MB in the end (delta: 28.4 MB). Peak memory consumption was 28.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 20723.90 ms. Allocated memory was 1.1 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 878.9 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    744 locations, 934 edges
  - StatisticsResult: BuchiProgram size
    1776 locations, 3016 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: Only formulae in NNF are supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: Only formulae in NNF are supported: de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
